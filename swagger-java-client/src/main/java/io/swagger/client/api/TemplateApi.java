/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BlueprintTemplateArray;
import io.swagger.client.model.ContentTemplate;
import io.swagger.client.model.ContentTemplateArray;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateApi {
    private ApiClient apiClient;

    public TemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContentTemplate
     * @param body The content template to be created.
The content body must be in &#x27;storage&#x27; format. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContentTemplateCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContentTemplateValidateBeforeCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createContentTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = createContentTemplateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create content template
     * Creates a new content template. Note, blueprint templates cannot be created via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space to create a space template or &#x27;Confluence Administrator&#x27; global permission to create a global template.
     * @param body The content template to be created.
The content body must be in &#x27;storage&#x27; format. (required)
     * @return ContentTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentTemplate createContentTemplate(Map<String, Object> body) throws ApiException {
        ApiResponse<ContentTemplate> resp = createContentTemplateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create content template
     * Creates a new content template. Note, blueprint templates cannot be created via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space to create a space template or &#x27;Confluence Administrator&#x27; global permission to create a global template.
     * @param body The content template to be created.
The content body must be in &#x27;storage&#x27; format. (required)
     * @return ApiResponse&lt;ContentTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentTemplate> createContentTemplateWithHttpInfo(Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = createContentTemplateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ContentTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create content template (asynchronously)
     * Creates a new content template. Note, blueprint templates cannot be created via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space to create a space template or &#x27;Confluence Administrator&#x27; global permission to create a global template.
     * @param body The content template to be created.
The content body must be in &#x27;storage&#x27; format. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContentTemplateAsync(Map<String, Object> body, final ApiCallback<ContentTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContentTemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlueprintTemplates
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global blueprint templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlueprintTemplatesCall(String spaceKey, Integer start, Integer limit, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/template/blueprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (spaceKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("spaceKey", spaceKey));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlueprintTemplatesValidateBeforeCall(String spaceKey, Integer start, Integer limit, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getBlueprintTemplatesCall(spaceKey, start, limit, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get blueprint templates
     * Returns all templates provided by blueprints. Use this method to retrieve all global blueprint templates or all blueprint templates in a space.  Note, all global blueprints are inherited by each space. Space blueprints can be customised without affecting the global blueprints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view blueprints for the space and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global blueprints.
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global blueprint templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @return BlueprintTemplateArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BlueprintTemplateArray getBlueprintTemplates(String spaceKey, Integer start, Integer limit, List<String> expand) throws ApiException {
        ApiResponse<BlueprintTemplateArray> resp = getBlueprintTemplatesWithHttpInfo(spaceKey, start, limit, expand);
        return resp.getData();
    }

    /**
     * Get blueprint templates
     * Returns all templates provided by blueprints. Use this method to retrieve all global blueprint templates or all blueprint templates in a space.  Note, all global blueprints are inherited by each space. Space blueprints can be customised without affecting the global blueprints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view blueprints for the space and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global blueprints.
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global blueprint templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @return ApiResponse&lt;BlueprintTemplateArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BlueprintTemplateArray> getBlueprintTemplatesWithHttpInfo(String spaceKey, Integer start, Integer limit, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = getBlueprintTemplatesValidateBeforeCall(spaceKey, start, limit, expand, null, null);
        Type localVarReturnType = new TypeToken<BlueprintTemplateArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get blueprint templates (asynchronously)
     * Returns all templates provided by blueprints. Use this method to retrieve all global blueprint templates or all blueprint templates in a space.  Note, all global blueprints are inherited by each space. Space blueprints can be customised without affecting the global blueprints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view blueprints for the space and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global blueprints.
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global blueprint templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlueprintTemplatesAsync(String spaceKey, Integer start, Integer limit, List<String> expand, final ApiCallback<BlueprintTemplateArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlueprintTemplatesValidateBeforeCall(spaceKey, start, limit, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BlueprintTemplateArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentTemplate
     * @param contentTemplateId The ID of the content template to be returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentTemplateCall(String contentTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/template/{contentTemplateId}"
            .replaceAll("\\{" + "contentTemplateId" + "\\}", apiClient.escapeString(contentTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentTemplateValidateBeforeCall(String contentTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentTemplateId' is set
        if (contentTemplateId == null) {
            throw new ApiException("Missing the required parameter 'contentTemplateId' when calling getContentTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentTemplateCall(contentTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content template
     * Returns a content template. This includes information about template, like the name, the space or blueprint that the template is in, the body of the template, and more.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view space templates and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global templates.
     * @param contentTemplateId The ID of the content template to be returned. (required)
     * @return ContentTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentTemplate getContentTemplate(String contentTemplateId) throws ApiException {
        ApiResponse<ContentTemplate> resp = getContentTemplateWithHttpInfo(contentTemplateId);
        return resp.getData();
    }

    /**
     * Get content template
     * Returns a content template. This includes information about template, like the name, the space or blueprint that the template is in, the body of the template, and more.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view space templates and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global templates.
     * @param contentTemplateId The ID of the content template to be returned. (required)
     * @return ApiResponse&lt;ContentTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentTemplate> getContentTemplateWithHttpInfo(String contentTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getContentTemplateValidateBeforeCall(contentTemplateId, null, null);
        Type localVarReturnType = new TypeToken<ContentTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content template (asynchronously)
     * Returns a content template. This includes information about template, like the name, the space or blueprint that the template is in, the body of the template, and more.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view space templates and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global templates.
     * @param contentTemplateId The ID of the content template to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentTemplateAsync(String contentTemplateId, final ApiCallback<ContentTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentTemplateValidateBeforeCall(contentTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentTemplates
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentTemplatesCall(String spaceKey, Integer start, Integer limit, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/template/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (spaceKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("spaceKey", spaceKey));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentTemplatesValidateBeforeCall(String spaceKey, Integer start, Integer limit, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getContentTemplatesCall(spaceKey, start, limit, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content templates
     * Returns all content templates. Use this method to retrieve all global content templates or all content templates in a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view space templates and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global templates.
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @return ContentTemplateArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentTemplateArray getContentTemplates(String spaceKey, Integer start, Integer limit, List<String> expand) throws ApiException {
        ApiResponse<ContentTemplateArray> resp = getContentTemplatesWithHttpInfo(spaceKey, start, limit, expand);
        return resp.getData();
    }

    /**
     * Get content templates
     * Returns all content templates. Use this method to retrieve all global content templates or all content templates in a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view space templates and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global templates.
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @return ApiResponse&lt;ContentTemplateArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentTemplateArray> getContentTemplatesWithHttpInfo(String spaceKey, Integer start, Integer limit, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = getContentTemplatesValidateBeforeCall(spaceKey, start, limit, expand, null, null);
        Type localVarReturnType = new TypeToken<ContentTemplateArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content templates (asynchronously)
     * Returns all content templates. Use this method to retrieve all global content templates or all content templates in a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space to view space templates and permission to access the Confluence site (&#x27;Can use&#x27; global permission) to view global templates.
     * @param spaceKey The key of the space to be queried for templates. If the &#x60;spaceKey&#x60; is not specified, global templates will be returned. (optional)
     * @param start The starting index of the returned templates. (optional, default to 0)
     * @param limit The maximum number of templates to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the template to expand.  - &#x60;body&#x60; returns the content of the template in storage format. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentTemplatesAsync(String spaceKey, Integer start, Integer limit, List<String> expand, final ApiCallback<ContentTemplateArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentTemplatesValidateBeforeCall(spaceKey, start, limit, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentTemplateArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTemplate
     * @param contentTemplateId The ID of the template to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTemplateCall(String contentTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/template/{contentTemplateId}"
            .replaceAll("\\{" + "contentTemplateId" + "\\}", apiClient.escapeString(contentTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTemplateValidateBeforeCall(String contentTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentTemplateId' is set
        if (contentTemplateId == null) {
            throw new ApiException("Missing the required parameter 'contentTemplateId' when calling removeTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = removeTemplateCall(contentTemplateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove template
     * Deletes a template. This results in different actions depending on the type of template:  - If the template is a content template, it is deleted. - If the template is a modified space-level blueprint template, it reverts to the template inherited from the global-level blueprint template. - If the template is a modified global-level blueprint template, it reverts to the default global-level blueprint template.   Note, unmodified blueprint templates cannot be deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:         &#x27;Admin&#x27; permission for the space to delete a space template or &#x27;Confluence Administrator&#x27;         global permission to delete a global template.
     * @param contentTemplateId The ID of the template to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeTemplate(String contentTemplateId) throws ApiException {
        removeTemplateWithHttpInfo(contentTemplateId);
    }

    /**
     * Remove template
     * Deletes a template. This results in different actions depending on the type of template:  - If the template is a content template, it is deleted. - If the template is a modified space-level blueprint template, it reverts to the template inherited from the global-level blueprint template. - If the template is a modified global-level blueprint template, it reverts to the default global-level blueprint template.   Note, unmodified blueprint templates cannot be deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:         &#x27;Admin&#x27; permission for the space to delete a space template or &#x27;Confluence Administrator&#x27;         global permission to delete a global template.
     * @param contentTemplateId The ID of the template to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeTemplateWithHttpInfo(String contentTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = removeTemplateValidateBeforeCall(contentTemplateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove template (asynchronously)
     * Deletes a template. This results in different actions depending on the type of template:  - If the template is a content template, it is deleted. - If the template is a modified space-level blueprint template, it reverts to the template inherited from the global-level blueprint template. - If the template is a modified global-level blueprint template, it reverts to the default global-level blueprint template.   Note, unmodified blueprint templates cannot be deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:         &#x27;Admin&#x27; permission for the space to delete a space template or &#x27;Confluence Administrator&#x27;         global permission to delete a global template.
     * @param contentTemplateId The ID of the template to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTemplateAsync(String contentTemplateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTemplateValidateBeforeCall(contentTemplateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContentTemplate
     * @param body The updated content template. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContentTemplateCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContentTemplateValidateBeforeCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContentTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = updateContentTemplateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update content template
     * Updates a content template. Note, blueprint templates cannot be updated via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space to update a space template or &#x27;Confluence Administrator&#x27; global permission to update a global template.
     * @param body The updated content template. (required)
     * @return ContentTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentTemplate updateContentTemplate(Map<String, Object> body) throws ApiException {
        ApiResponse<ContentTemplate> resp = updateContentTemplateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update content template
     * Updates a content template. Note, blueprint templates cannot be updated via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space to update a space template or &#x27;Confluence Administrator&#x27; global permission to update a global template.
     * @param body The updated content template. (required)
     * @return ApiResponse&lt;ContentTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentTemplate> updateContentTemplateWithHttpInfo(Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = updateContentTemplateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ContentTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update content template (asynchronously)
     * Updates a content template. Note, blueprint templates cannot be updated via the REST API.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space to update a space template or &#x27;Confluence Administrator&#x27; global permission to update a global template.
     * @param body The updated content template. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContentTemplateAsync(Map<String, Object> body, final ApiCallback<ContentTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContentTemplateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
