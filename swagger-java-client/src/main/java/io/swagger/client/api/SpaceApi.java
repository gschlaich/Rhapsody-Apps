/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContentArray;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.LongTask;
import io.swagger.client.model.Space;
import io.swagger.client.model.SpaceArray;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpaceApi {
    private ApiClient apiClient;

    public SpaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpaceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPrivateSpace
     * @param body The space to be created. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPrivateSpaceCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/_private";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPrivateSpaceValidateBeforeCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPrivateSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = createPrivateSpaceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create private space
     * Creates a new space that is only visible to the creator. This method is the same as the [Create space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Create Space(s)&#x27; global permission.
     * @param body The space to be created. (required)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space createPrivateSpace(Map<String, Object> body) throws ApiException {
        ApiResponse<Space> resp = createPrivateSpaceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create private space
     * Creates a new space that is only visible to the creator. This method is the same as the [Create space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Create Space(s)&#x27; global permission.
     * @param body The space to be created. (required)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> createPrivateSpaceWithHttpInfo(Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = createPrivateSpaceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create private space (asynchronously)
     * Creates a new space that is only visible to the creator. This method is the same as the [Create space](#api-space-post) method with permissions set to the current user only. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Create Space(s)&#x27; global permission.
     * @param body The space to be created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPrivateSpaceAsync(Map<String, Object> body, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPrivateSpaceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSpace
     * @param body The space to be created. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpaceCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSpaceValidateBeforeCall(Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = createSpaceCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create space
     * Creates a new space. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Create Space(s)&#x27; global permission.
     * @param body The space to be created. (required)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space createSpace(Map<String, Object> body) throws ApiException {
        ApiResponse<Space> resp = createSpaceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create space
     * Creates a new space. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Create Space(s)&#x27; global permission.
     * @param body The space to be created. (required)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> createSpaceWithHttpInfo(Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = createSpaceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create space (asynchronously)
     * Creates a new space. Note, currently you cannot set space labels when creating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Create Space(s)&#x27; global permission.
     * @param body The space to be created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpaceAsync(Map<String, Object> body, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpaceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpace
     * @param spaceKey The key of the space to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpaceCall(String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSpaceValidateBeforeCall(String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling deleteSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSpaceCall(spaceKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete space
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted yet when this method has returned. Clients should poll the status link that is returned in the response until the task completes.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space.
     * @param spaceKey The key of the space to delete. (required)
     * @return LongTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LongTask deleteSpace(String spaceKey) throws ApiException {
        ApiResponse<LongTask> resp = deleteSpaceWithHttpInfo(spaceKey);
        return resp.getData();
    }

    /**
     * Delete space
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted yet when this method has returned. Clients should poll the status link that is returned in the response until the task completes.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space.
     * @param spaceKey The key of the space to delete. (required)
     * @return ApiResponse&lt;LongTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LongTask> deleteSpaceWithHttpInfo(String spaceKey) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpaceValidateBeforeCall(spaceKey, null, null);
        Type localVarReturnType = new TypeToken<LongTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete space (asynchronously)
     * Deletes a space. Note, the space will be deleted in a long running task. Therefore, the space may not be deleted yet when this method has returned. Clients should poll the status link that is returned in the response until the task completes.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space.
     * @param spaceKey The key of the space to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpaceAsync(String spaceKey, final ApiCallback<LongTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpaceValidateBeforeCall(spaceKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LongTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentByTypeForSpace
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param type The type of content to return. &#x60;page&#x60;, &#x60;blogpost&#x60;, &#x60;&lt;some_customContentType&gt;&#x60;. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentByTypeForSpaceCall(String spaceKey, String type, String depth, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/content/{type}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentByTypeForSpaceValidateBeforeCall(String spaceKey, String type, String depth, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getContentByTypeForSpace(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getContentByTypeForSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentByTypeForSpaceCall(spaceKey, type, depth, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content by type for space
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param type The type of content to return. &#x60;page&#x60;, &#x60;blogpost&#x60;, &#x60;&lt;some_customContentType&gt;&#x60;. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return ContentArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentArray getContentByTypeForSpace(String spaceKey, String type, String depth, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<ContentArray> resp = getContentByTypeForSpaceWithHttpInfo(spaceKey, type, depth, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get content by type for space
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param type The type of content to return. &#x60;page&#x60;, &#x60;blogpost&#x60;, &#x60;&lt;some_customContentType&gt;&#x60;. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return ApiResponse&lt;ContentArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentArray> getContentByTypeForSpaceWithHttpInfo(String spaceKey, String type, String depth, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getContentByTypeForSpaceValidateBeforeCall(spaceKey, type, depth, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<ContentArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content by type for space (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content of a given type, in a space. The returned content is ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param type The type of content to return. &#x60;page&#x60;, &#x60;blogpost&#x60;, &#x60;&lt;some_customContentType&gt;&#x60;. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentByTypeForSpaceAsync(String spaceKey, String type, String depth, List<String> expand, Integer start, Integer limit, final ApiCallback<ContentArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentByTypeForSpaceValidateBeforeCall(spaceKey, type, depth, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentForSpace
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentForSpaceCall(String spaceKey, String depth, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/content"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentForSpaceValidateBeforeCall(String spaceKey, String depth, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getContentForSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentForSpaceCall(spaceKey, depth, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content for space
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getContentForSpace(String spaceKey, String depth, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getContentForSpaceWithHttpInfo(spaceKey, depth, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get content for space
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getContentForSpaceWithHttpInfo(String spaceKey, String depth, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getContentForSpaceValidateBeforeCall(spaceKey, depth, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content for space (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a space. The returned content is grouped by type (pages then blogposts), then ordered by content ID in ascending order.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space. Note, the returned list will only contain content that the current user has permission to view.
     * @param spaceKey The key of the space to be queried for its content. (required)
     * @param depth Filter the results to content at the root level of the space or all content. (optional, default to all)
     * @param expand A multi-value parameter indicating which properties of the content to expand.  - &#x60;childTypes.all&#x60; returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type. - &#x60;childTypes.attachment&#x60; returns whether the content has attachments. - &#x60;childTypes.comment&#x60; returns whether the content has comments. - &#x60;childTypes.page&#x60; returns whether the content has child pages. - &#x60;container&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - &#x60;metadata.currentuser&#x60; returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - &#x60;metadata.properties&#x60; returns content properties that have been set via the Confluence REST API. - &#x60;metadata.labels&#x60; returns the labels that have been added to the content. - &#x60;metadata.frontend&#x60; this property is only used by Atlassian. - &#x60;operations&#x60; returns the operations for the content, which are used when setting permissions. - &#x60;children.page&#x60; returns pages that are descendants at the level immediately below the content. - &#x60;children.attachment&#x60; returns all attachments for the content. - &#x60;children.comment&#x60; returns all comments on the content. - &#x60;restrictions.read.restrictions.user&#x60; returns the users that have permission to read the content. - &#x60;restrictions.read.restrictions.group&#x60; returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;restrictions.update.restrictions.user&#x60; returns the users that have permission to update the content. - &#x60;restrictions.update.restrictions.group&#x60; returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn&#x27;t remove associated restrictions. - &#x60;history&#x60; returns the history of the content, including the date it was created. - &#x60;history.lastUpdated&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;history.previousVersion&#x60; returns information about the update prior to the current content update. - &#x60;history.contributors&#x60; returns all of the users who have contributed to the content. - &#x60;history.nextVersion&#x60; returns information about the update after to the current content update. - &#x60;ancestors&#x60; returns the parent page, if the content is a page. - &#x60;body&#x60; returns the body of the content in different formats, including the editor format, view format, and export format. - &#x60;body.storage&#x60; returns the body of content in storage format. - &#x60;body.view&#x60; returns the body of content in view format. - &#x60;version&#x60; returns information about the most recent update of the content, including who updated it and when it was updated. - &#x60;descendants.page&#x60; returns pages that are descendants at any level below the content. - &#x60;descendants.attachment&#x60; returns all attachments for the content, same as &#x60;children.attachment&#x60;. - &#x60;descendants.comment&#x60; returns all comments on the content, same as &#x60;children.comment&#x60;. - &#x60;space&#x60; returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - &#x60;extensions.inlineProperties&#x60; returns inline comment-specific properties. - &#x60;extensions.resolution&#x60; returns the resolution status of each comment. (optional)
     * @param start The starting index of the returned content. (optional, default to 0)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentForSpaceAsync(String spaceKey, String depth, List<String> expand, Integer start, Integer limit, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentForSpaceValidateBeforeCall(spaceKey, depth, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSpace
     * @param spaceKey The key of the space to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpaceCall(String spaceKey, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSpaceValidateBeforeCall(String spaceKey, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = getSpaceCall(spaceKey, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get space
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space. This includes information like the name, description, and permissions, but not the content in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space.
     * @param spaceKey The key of the space to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space getSpace(String spaceKey, List<String> expand) throws ApiException {
        ApiResponse<Space> resp = getSpaceWithHttpInfo(spaceKey, expand);
        return resp.getData();
    }

    /**
     * Get space
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space. This includes information like the name, description, and permissions, but not the content in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space.
     * @param spaceKey The key of the space to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> getSpaceWithHttpInfo(String spaceKey, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = getSpaceValidateBeforeCall(spaceKey, expand, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get space (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space. This includes information like the name, description, and permissions, but not the content in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space.
     * @param spaceKey The key of the space to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpaceAsync(String spaceKey, List<String> expand, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpaceValidateBeforeCall(spaceKey, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSpaces
     * @param spaceKey The key of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param spaceId The id of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param type Filter the results to spaces based on their type. (optional)
     * @param status Filter the results to spaces based on their status. (optional)
     * @param label Filter the results to spaces based on their label. (optional)
     * @param favourite Filter the results to the favourite spaces of the user specified by &#x60;favouriteUserKey&#x60;. Note, &#x27;favourite&#x27; spaces are also known as &#x27;saved for later&#x27; spaces. (optional)
     * @param favouriteUserKey The userKey of the user, whose favourite spaces are used to filter the results when using the &#x60;favourite&#x60; parameter.  Leave blank for the current user. Use [Get user](#api-user-get) to get the userKey for a user. (optional)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @param start The starting index of the returned spaces. (optional, default to 0)
     * @param limit The maximum number of spaces to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpacesCall(List<String> spaceKey, List<Long> spaceId, String type, String status, List<String> label, Boolean favourite, String favouriteUserKey, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (spaceKey != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spaceKey", spaceKey));
        if (spaceId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spaceId", spaceId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (label != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "label", label));
        if (favourite != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("favourite", favourite));
        if (favouriteUserKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("favouriteUserKey", favouriteUserKey));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSpacesValidateBeforeCall(List<String> spaceKey, List<Long> spaceId, String type, String status, List<String> label, Boolean favourite, String favouriteUserKey, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSpacesCall(spaceKey, spaceId, type, status, label, favourite, favouriteUserKey, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get spaces
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). Note, the returned list will only contain spaces that the current user has permission to view.
     * @param spaceKey The key of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param spaceId The id of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param type Filter the results to spaces based on their type. (optional)
     * @param status Filter the results to spaces based on their status. (optional)
     * @param label Filter the results to spaces based on their label. (optional)
     * @param favourite Filter the results to the favourite spaces of the user specified by &#x60;favouriteUserKey&#x60;. Note, &#x27;favourite&#x27; spaces are also known as &#x27;saved for later&#x27; spaces. (optional)
     * @param favouriteUserKey The userKey of the user, whose favourite spaces are used to filter the results when using the &#x60;favourite&#x60; parameter.  Leave blank for the current user. Use [Get user](#api-user-get) to get the userKey for a user. (optional)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @param start The starting index of the returned spaces. (optional, default to 0)
     * @param limit The maximum number of spaces to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return SpaceArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceArray getSpaces(List<String> spaceKey, List<Long> spaceId, String type, String status, List<String> label, Boolean favourite, String favouriteUserKey, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<SpaceArray> resp = getSpacesWithHttpInfo(spaceKey, spaceId, type, status, label, favourite, favouriteUserKey, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get spaces
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). Note, the returned list will only contain spaces that the current user has permission to view.
     * @param spaceKey The key of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param spaceId The id of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param type Filter the results to spaces based on their type. (optional)
     * @param status Filter the results to spaces based on their status. (optional)
     * @param label Filter the results to spaces based on their label. (optional)
     * @param favourite Filter the results to the favourite spaces of the user specified by &#x60;favouriteUserKey&#x60;. Note, &#x27;favourite&#x27; spaces are also known as &#x27;saved for later&#x27; spaces. (optional)
     * @param favouriteUserKey The userKey of the user, whose favourite spaces are used to filter the results when using the &#x60;favourite&#x60; parameter.  Leave blank for the current user. Use [Get user](#api-user-get) to get the userKey for a user. (optional)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @param start The starting index of the returned spaces. (optional, default to 0)
     * @param limit The maximum number of spaces to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return ApiResponse&lt;SpaceArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceArray> getSpacesWithHttpInfo(List<String> spaceKey, List<Long> spaceId, String type, String status, List<String> label, Boolean favourite, String favouriteUserKey, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getSpacesValidateBeforeCall(spaceKey, spaceId, type, status, label, favourite, favouriteUserKey, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<SpaceArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get spaces (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all spaces. The returned spaces are ordered alphabetically in ascending order by space key.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). Note, the returned list will only contain spaces that the current user has permission to view.
     * @param spaceKey The key of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param spaceId The id of the space to be returned. To return multiple spaces, specify this parameter multiple times with different values. (optional)
     * @param type Filter the results to spaces based on their type. (optional)
     * @param status Filter the results to spaces based on their status. (optional)
     * @param label Filter the results to spaces based on their label. (optional)
     * @param favourite Filter the results to the favourite spaces of the user specified by &#x60;favouriteUserKey&#x60;. Note, &#x27;favourite&#x27; spaces are also known as &#x27;saved for later&#x27; spaces. (optional)
     * @param favouriteUserKey The userKey of the user, whose favourite spaces are used to filter the results when using the &#x60;favourite&#x60; parameter.  Leave blank for the current user. Use [Get user](#api-user-get) to get the userKey for a user. (optional)
     * @param expand A multi-value parameter indicating which properties of the spaces to expand, where:    - &#x60;settings&#x60; returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).   - &#x60;metadata&#x60; returns the space metadata.   - &#x60;metadata.labels&#x60; returns the space labels, which are used to categorize the space.   - &#x60;operations&#x60; returns the operations for a space, which are used when setting permissions.   - &#x60;lookAndFeel&#x60; returns information about the look and feel of the space, including the color scheme.   - &#x60;permissions&#x60; returns the permissions for the space. Note that this may return permissions for deleted groups,   because deleting a group doesn&#x27;t remove associated space permissions.   - &#x60;icon&#x60; returns information about space icon.   - &#x60;description&#x60; returns the description of the space.   - &#x60;description.plain&#x60; returns the description of the space, the plain format.   - &#x60;description.view&#x60; returns the description of the space, the view format.   - &#x60;theme&#x60; returns information about the space theme.   - &#x60;homepage&#x60; returns information about the space homepage.   - &#x60;history&#x60; returns information about the history of the space. (optional)
     * @param start The starting index of the returned spaces. (optional, default to 0)
     * @param limit The maximum number of spaces to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpacesAsync(List<String> spaceKey, List<Long> spaceId, String type, String status, List<String> label, Boolean favourite, String favouriteUserKey, List<String> expand, Integer start, Integer limit, final ApiCallback<SpaceArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpacesValidateBeforeCall(spaceKey, spaceId, type, status, label, favourite, favouriteUserKey, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSpace
     * @param body The updated space. (required)
     * @param spaceKey The key of the space to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpaceCall(Map<String, Object> body, String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSpaceValidateBeforeCall(Map<String, Object> body, String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSpace(Async)");
        }
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling updateSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSpaceCall(body, spaceKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update space
     * Updates the name, description, or homepage of a space.  -   For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead. -   Currently you cannot set space labels when updating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space.
     * @param body The updated space. (required)
     * @param spaceKey The key of the space to update. (required)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space updateSpace(Map<String, Object> body, String spaceKey) throws ApiException {
        ApiResponse<Space> resp = updateSpaceWithHttpInfo(body, spaceKey);
        return resp.getData();
    }

    /**
     * Update space
     * Updates the name, description, or homepage of a space.  -   For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead. -   Currently you cannot set space labels when updating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space.
     * @param body The updated space. (required)
     * @param spaceKey The key of the space to update. (required)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> updateSpaceWithHttpInfo(Map<String, Object> body, String spaceKey) throws ApiException {
        com.squareup.okhttp.Call call = updateSpaceValidateBeforeCall(body, spaceKey, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update space (asynchronously)
     * Updates the name, description, or homepage of a space.  -   For security reasons, permissions cannot be updated via the API and must be changed via the user interface instead. -   Currently you cannot set space labels when updating a space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Admin&#x27; permission for the space.
     * @param body The updated space. (required)
     * @param spaceKey The key of the space to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpaceAsync(Map<String, Object> body, String spaceKey, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpaceValidateBeforeCall(body, spaceKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
