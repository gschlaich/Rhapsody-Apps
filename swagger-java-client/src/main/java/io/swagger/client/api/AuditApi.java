/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuditRecord;
import io.swagger.client.model.AuditRecordArray;
import io.swagger.client.model.AuditRecordCreate;
import java.io.File;
import io.swagger.client.model.RetentionPeriod;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient apiClient;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAuditRecord
     * @param body The record to be created in the audit log. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuditRecordCall(AuditRecordCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/audit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuditRecordValidateBeforeCall(AuditRecordCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuditRecord(Async)");
        }
        
        com.squareup.okhttp.Call call = createAuditRecordCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create audit record
     * Creates a record in the audit log.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param body The record to be created in the audit log. (required)
     * @return AuditRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuditRecord createAuditRecord(AuditRecordCreate body) throws ApiException {
        ApiResponse<AuditRecord> resp = createAuditRecordWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create audit record
     * Creates a record in the audit log.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param body The record to be created in the audit log. (required)
     * @return ApiResponse&lt;AuditRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuditRecord> createAuditRecordWithHttpInfo(AuditRecordCreate body) throws ApiException {
        com.squareup.okhttp.Call call = createAuditRecordValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AuditRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create audit record (asynchronously)
     * Creates a record in the audit log.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param body The record to be created in the audit log. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuditRecordAsync(AuditRecordCreate body, final ApiCallback<AuditRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuditRecordValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuditRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportAuditRecords
     * @param startDate Filters the exported results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the exported results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the exported results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param format The format of the export file for the audit records. (optional, default to csv)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportAuditRecordsCall(String startDate, String endDate, String searchString, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/audit/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchString", searchString));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip", "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportAuditRecordsValidateBeforeCall(String startDate, String endDate, String searchString, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = exportAuditRecordsCall(startDate, endDate, searchString, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export audit records
     * Exports audit records as a CSV file or ZIP file.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param startDate Filters the exported results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the exported results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the exported results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param format The format of the export file for the audit records. (optional, default to csv)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File exportAuditRecords(String startDate, String endDate, String searchString, String format) throws ApiException {
        ApiResponse<File> resp = exportAuditRecordsWithHttpInfo(startDate, endDate, searchString, format);
        return resp.getData();
    }

    /**
     * Export audit records
     * Exports audit records as a CSV file or ZIP file.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param startDate Filters the exported results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the exported results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the exported results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param format The format of the export file for the audit records. (optional, default to csv)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> exportAuditRecordsWithHttpInfo(String startDate, String endDate, String searchString, String format) throws ApiException {
        com.squareup.okhttp.Call call = exportAuditRecordsValidateBeforeCall(startDate, endDate, searchString, format, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export audit records (asynchronously)
     * Exports audit records as a CSV file or ZIP file.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param startDate Filters the exported results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the exported results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the exported results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param format The format of the export file for the audit records. (optional, default to csv)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportAuditRecordsAsync(String startDate, String endDate, String searchString, String format, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportAuditRecordsValidateBeforeCall(startDate, endDate, searchString, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuditRecords
     * @param startDate Filters the results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuditRecordsCall(String startDate, String endDate, String searchString, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/audit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchString", searchString));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuditRecordsValidateBeforeCall(String startDate, String endDate, String searchString, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAuditRecordsCall(startDate, endDate, searchString, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get audit records
     * Returns all records in the audit log, optionally for a certain date range. This contains information about events like space exports, group membership changes, app installations, etc. For more information, see [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) in the Confluence administrator&#x27;s guide.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param startDate Filters the results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @return AuditRecordArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuditRecordArray getAuditRecords(String startDate, String endDate, String searchString, Integer start, Integer limit) throws ApiException {
        ApiResponse<AuditRecordArray> resp = getAuditRecordsWithHttpInfo(startDate, endDate, searchString, start, limit);
        return resp.getData();
    }

    /**
     * Get audit records
     * Returns all records in the audit log, optionally for a certain date range. This contains information about events like space exports, group membership changes, app installations, etc. For more information, see [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) in the Confluence administrator&#x27;s guide.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param startDate Filters the results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @return ApiResponse&lt;AuditRecordArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuditRecordArray> getAuditRecordsWithHttpInfo(String startDate, String endDate, String searchString, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getAuditRecordsValidateBeforeCall(startDate, endDate, searchString, start, limit, null, null);
        Type localVarReturnType = new TypeToken<AuditRecordArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get audit records (asynchronously)
     * Returns all records in the audit log, optionally for a certain date range. This contains information about events like space exports, group membership changes, app installations, etc. For more information, see [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) in the Confluence administrator&#x27;s guide.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param startDate Filters the results to the records on or after the &#x60;startDate&#x60;. The &#x60;startDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param endDate Filters the results to the records on or before the &#x60;endDate&#x60;. The &#x60;endDate&#x60; must be specified as a [timestamp](https://www.unixtimestamp.com/). (optional)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuditRecordsAsync(String startDate, String endDate, String searchString, Integer start, Integer limit, final ApiCallback<AuditRecordArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuditRecordsValidateBeforeCall(startDate, endDate, searchString, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuditRecordArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuditRecordsForTimePeriod
     * @param number The number of units for the time period. (optional, default to 3)
     * @param units The unit of time that the time period is measured in. (optional, default to MONTHS)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuditRecordsForTimePeriodCall(Long number, String units, String searchString, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/audit/since";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (number != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number", number));
        if (units != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("units", units));
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchString", searchString));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuditRecordsForTimePeriodValidateBeforeCall(Long number, String units, String searchString, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAuditRecordsForTimePeriodCall(number, units, searchString, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get audit records for time period
     * Returns records from the audit log, for a time period back from the current date. For example, you can use this method to get the last 3 months of records.  This contains information about events like space exports, group membership changes, app installations, etc. For more information, see [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) in the Confluence administrator&#x27;s guide.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param number The number of units for the time period. (optional, default to 3)
     * @param units The unit of time that the time period is measured in. (optional, default to MONTHS)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @return AuditRecordArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuditRecordArray getAuditRecordsForTimePeriod(Long number, String units, String searchString, Integer start, Integer limit) throws ApiException {
        ApiResponse<AuditRecordArray> resp = getAuditRecordsForTimePeriodWithHttpInfo(number, units, searchString, start, limit);
        return resp.getData();
    }

    /**
     * Get audit records for time period
     * Returns records from the audit log, for a time period back from the current date. For example, you can use this method to get the last 3 months of records.  This contains information about events like space exports, group membership changes, app installations, etc. For more information, see [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) in the Confluence administrator&#x27;s guide.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param number The number of units for the time period. (optional, default to 3)
     * @param units The unit of time that the time period is measured in. (optional, default to MONTHS)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @return ApiResponse&lt;AuditRecordArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuditRecordArray> getAuditRecordsForTimePeriodWithHttpInfo(Long number, String units, String searchString, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getAuditRecordsForTimePeriodValidateBeforeCall(number, units, searchString, start, limit, null, null);
        Type localVarReturnType = new TypeToken<AuditRecordArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get audit records for time period (asynchronously)
     * Returns records from the audit log, for a time period back from the current date. For example, you can use this method to get the last 3 months of records.  This contains information about events like space exports, group membership changes, app installations, etc. For more information, see [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) in the Confluence administrator&#x27;s guide.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param number The number of units for the time period. (optional, default to 3)
     * @param units The unit of time that the time period is measured in. (optional, default to MONTHS)
     * @param searchString Filters the results to records that have string property values matching the &#x60;searchString&#x60;. (optional)
     * @param start The starting index of the returned records. (optional, default to 0)
     * @param limit The maximum number of records to return per page. Note, this may be restricted by fixed system limits. (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuditRecordsForTimePeriodAsync(Long number, String units, String searchString, Integer start, Integer limit, final ApiCallback<AuditRecordArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuditRecordsForTimePeriodValidateBeforeCall(number, units, searchString, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuditRecordArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRetentionPeriod
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRetentionPeriodCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/audit/retention";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRetentionPeriodValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRetentionPeriodCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get retention period
     * Returns the retention period for records in the audit log. The retention period is how long an audit record is kept for, from creation date until it is deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @return RetentionPeriod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetentionPeriod getRetentionPeriod() throws ApiException {
        ApiResponse<RetentionPeriod> resp = getRetentionPeriodWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get retention period
     * Returns the retention period for records in the audit log. The retention period is how long an audit record is kept for, from creation date until it is deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @return ApiResponse&lt;RetentionPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetentionPeriod> getRetentionPeriodWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRetentionPeriodValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RetentionPeriod>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get retention period (asynchronously)
     * Returns the retention period for records in the audit log. The retention period is how long an audit record is kept for, from creation date until it is deleted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRetentionPeriodAsync(final ApiCallback<RetentionPeriod> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRetentionPeriodValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetentionPeriod>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setRetentionPeriod
     * @param body The updated retention period. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setRetentionPeriodCall(RetentionPeriod body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/audit/retention";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setRetentionPeriodValidateBeforeCall(RetentionPeriod body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setRetentionPeriod(Async)");
        }
        
        com.squareup.okhttp.Call call = setRetentionPeriodCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set retention period
     * Sets the retention period for records in the audit log. The retention period can be set to a maximum of 20 years.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param body The updated retention period. (required)
     * @return RetentionPeriod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetentionPeriod setRetentionPeriod(RetentionPeriod body) throws ApiException {
        ApiResponse<RetentionPeriod> resp = setRetentionPeriodWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Set retention period
     * Sets the retention period for records in the audit log. The retention period can be set to a maximum of 20 years.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param body The updated retention period. (required)
     * @return ApiResponse&lt;RetentionPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetentionPeriod> setRetentionPeriodWithHttpInfo(RetentionPeriod body) throws ApiException {
        com.squareup.okhttp.Call call = setRetentionPeriodValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RetentionPeriod>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set retention period (asynchronously)
     * Sets the retention period for records in the audit log. The retention period can be set to a maximum of 20 years.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Confluence Administrator&#x27; global permission.
     * @param body The updated retention period. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setRetentionPeriodAsync(RetentionPeriod body, final ApiCallback<RetentionPeriod> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setRetentionPeriodValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetentionPeriod>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
