/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContentRestriction;
import io.swagger.client.model.ContentRestrictionAddOrUpdateArray;
import io.swagger.client.model.ContentRestrictionArray;
import io.swagger.client.model.InlineResponseMap200;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentRestrictionsApi {
    private ApiClient apiClient;

    public ContentRestrictionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentRestrictionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addGroupToContentRestriction
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to add to the content restriction. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGroupToContentRestrictionCall(String id, String operationKey, String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/group/{groupName}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()))
            .replaceAll("\\{" + "groupName" + "\\}", apiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGroupToContentRestrictionValidateBeforeCall(String id, String operationKey, String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addGroupToContentRestriction(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling addGroupToContentRestriction(Async)");
        }
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addGroupToContentRestriction(Async)");
        }
        
        com.squareup.okhttp.Call call = addGroupToContentRestrictionCall(id, operationKey, groupName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add group to content restriction
     * Adds a group to a content restriction. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to add to the content restriction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGroupToContentRestriction(String id, String operationKey, String groupName) throws ApiException {
        addGroupToContentRestrictionWithHttpInfo(id, operationKey, groupName);
    }

    /**
     * Add group to content restriction
     * Adds a group to a content restriction. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to add to the content restriction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGroupToContentRestrictionWithHttpInfo(String id, String operationKey, String groupName) throws ApiException {
        com.squareup.okhttp.Call call = addGroupToContentRestrictionValidateBeforeCall(id, operationKey, groupName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add group to content restriction (asynchronously)
     * Adds a group to a content restriction. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to add to the content restriction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupToContentRestrictionAsync(String id, String operationKey, String groupName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupToContentRestrictionValidateBeforeCall(id, operationKey, groupName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addGroupToContentRestrictionByGroupId
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The groupId of the group to add to the content restriction. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGroupToContentRestrictionByGroupIdCall(String id, String operationKey, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGroupToContentRestrictionByGroupIdValidateBeforeCall(String id, String operationKey, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addGroupToContentRestrictionByGroupId(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling addGroupToContentRestrictionByGroupId(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupToContentRestrictionByGroupId(Async)");
        }
        
        com.squareup.okhttp.Call call = addGroupToContentRestrictionByGroupIdCall(id, operationKey, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add group to content restriction
     * Adds a group to a content restriction by Group Id. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The groupId of the group to add to the content restriction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGroupToContentRestrictionByGroupId(String id, String operationKey, String groupId) throws ApiException {
        addGroupToContentRestrictionByGroupIdWithHttpInfo(id, operationKey, groupId);
    }

    /**
     * Add group to content restriction
     * Adds a group to a content restriction by Group Id. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The groupId of the group to add to the content restriction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGroupToContentRestrictionByGroupIdWithHttpInfo(String id, String operationKey, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = addGroupToContentRestrictionByGroupIdValidateBeforeCall(id, operationKey, groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add group to content restriction (asynchronously)
     * Adds a group to a content restriction by Group Id. That is, grant read or update permission to the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The groupId of the group to add to the content restriction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupToContentRestrictionByGroupIdAsync(String id, String operationKey, String groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupToContentRestrictionByGroupIdValidateBeforeCall(id, operationKey, groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addRestrictions
     * @param body The restrictions to be added to the content. (required)
     * @param id The ID of the content to add restrictions to. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRestrictionsCall(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRestrictionsValidateBeforeCall(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRestrictions(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRestrictions(Async)");
        }
        
        com.squareup.okhttp.Call call = addRestrictionsCall(body, id, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add restrictions
     * Adds restrictions to a piece of content. Note, this does not change any existing restrictions on the content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body The restrictions to be added to the content. (required)
     * @param id The ID of the content to add restrictions to. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ContentRestrictionArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentRestrictionArray addRestrictions(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand) throws ApiException {
        ApiResponse<ContentRestrictionArray> resp = addRestrictionsWithHttpInfo(body, id, expand);
        return resp.getData();
    }

    /**
     * Add restrictions
     * Adds restrictions to a piece of content. Note, this does not change any existing restrictions on the content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body The restrictions to be added to the content. (required)
     * @param id The ID of the content to add restrictions to. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ApiResponse&lt;ContentRestrictionArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentRestrictionArray> addRestrictionsWithHttpInfo(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = addRestrictionsValidateBeforeCall(body, id, expand, null, null);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add restrictions (asynchronously)
     * Adds restrictions to a piece of content. Note, this does not change any existing restrictions on the content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body The restrictions to be added to the content. (required)
     * @param id The ID of the content to add restrictions to. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRestrictionsAsync(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand, final ApiCallback<ContentRestrictionArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRestrictionsValidateBeforeCall(body, id, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addUserToContentRestriction
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addUserToContentRestrictionCall(String id, String operationKey, String key, String username, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/user"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUserToContentRestrictionValidateBeforeCall(String id, String operationKey, String key, String username, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addUserToContentRestriction(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling addUserToContentRestriction(Async)");
        }
        
        com.squareup.okhttp.Call call = addUserToContentRestrictionCall(id, operationKey, key, username, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add user to content restriction
     * Adds a user to a content restriction. That is, grant read or update permission to the user for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addUserToContentRestriction(String id, String operationKey, String key, String username, String accountId) throws ApiException {
        addUserToContentRestrictionWithHttpInfo(id, operationKey, key, username, accountId);
    }

    /**
     * Add user to content restriction
     * Adds a user to a content restriction. That is, grant read or update permission to the user for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addUserToContentRestrictionWithHttpInfo(String id, String operationKey, String key, String username, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = addUserToContentRestrictionValidateBeforeCall(id, operationKey, key, username, accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add user to content restriction (asynchronously)
     * Adds a user to a content restriction. That is, grant read or update permission to the user for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserToContentRestrictionAsync(String id, String operationKey, String key, String username, String accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserToContentRestrictionValidateBeforeCall(id, operationKey, key, username, accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRestrictions
     * @param id The ID of the content to remove restrictions from. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRestrictionsCall(String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRestrictionsValidateBeforeCall(String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRestrictions(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRestrictionsCall(id, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete restrictions
     * Removes all restrictions (read and update) on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content to remove restrictions from. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ContentRestrictionArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentRestrictionArray deleteRestrictions(String id, List<String> expand) throws ApiException {
        ApiResponse<ContentRestrictionArray> resp = deleteRestrictionsWithHttpInfo(id, expand);
        return resp.getData();
    }

    /**
     * Delete restrictions
     * Removes all restrictions (read and update) on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content to remove restrictions from. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ApiResponse&lt;ContentRestrictionArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentRestrictionArray> deleteRestrictionsWithHttpInfo(String id, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = deleteRestrictionsValidateBeforeCall(id, expand, null, null);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete restrictions (asynchronously)
     * Removes all restrictions (read and update) on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content to remove restrictions from. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRestrictionsAsync(String id, List<String> expand, final ApiCallback<ContentRestrictionArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRestrictionsValidateBeforeCall(id, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentRestrictionStatusForGroup
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to be queried for whether the content restriction applies to it. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentRestrictionStatusForGroupCall(String id, String operationKey, String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/group/{groupName}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()))
            .replaceAll("\\{" + "groupName" + "\\}", apiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentRestrictionStatusForGroupValidateBeforeCall(String id, String operationKey, String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentRestrictionStatusForGroup(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling getContentRestrictionStatusForGroup(Async)");
        }
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling getContentRestrictionStatusForGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentRestrictionStatusForGroupCall(id, operationKey, groupName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content restriction status for group
     * Returns whether the specified content restriction applies to a group. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for the &#x60;admins&#x60; group, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/group/admins&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to be queried for whether the content restriction applies to it. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getContentRestrictionStatusForGroup(String id, String operationKey, String groupName) throws ApiException {
        getContentRestrictionStatusForGroupWithHttpInfo(id, operationKey, groupName);
    }

    /**
     * Get content restriction status for group
     * Returns whether the specified content restriction applies to a group. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for the &#x60;admins&#x60; group, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/group/admins&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to be queried for whether the content restriction applies to it. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getContentRestrictionStatusForGroupWithHttpInfo(String id, String operationKey, String groupName) throws ApiException {
        com.squareup.okhttp.Call call = getContentRestrictionStatusForGroupValidateBeforeCall(id, operationKey, groupName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get content restriction status for group (asynchronously)
     * Returns whether the specified content restriction applies to a group. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for the &#x60;admins&#x60; group, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/group/admins&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to be queried for whether the content restriction applies to it. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentRestrictionStatusForGroupAsync(String id, String operationKey, String groupName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentRestrictionStatusForGroupValidateBeforeCall(id, operationKey, groupName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getContentRestrictionStatusForUser
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that is restricted. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentRestrictionStatusForUserCall(String id, String operationKey, String key, String username, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/user"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentRestrictionStatusForUserValidateBeforeCall(String id, String operationKey, String key, String username, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentRestrictionStatusForUser(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling getContentRestrictionStatusForUser(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentRestrictionStatusForUserCall(id, operationKey, key, username, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content restriction status for user
     * Returns whether the specified content restriction applies to a user. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for a user with an account ID of &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId&#x3D;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the user can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that is restricted. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getContentRestrictionStatusForUser(String id, String operationKey, String key, String username, String accountId) throws ApiException {
        getContentRestrictionStatusForUserWithHttpInfo(id, operationKey, key, username, accountId);
    }

    /**
     * Get content restriction status for user
     * Returns whether the specified content restriction applies to a user. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for a user with an account ID of &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId&#x3D;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the user can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that is restricted. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getContentRestrictionStatusForUserWithHttpInfo(String id, String operationKey, String key, String username, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getContentRestrictionStatusForUserValidateBeforeCall(id, operationKey, key, username, accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get content restriction status for user (asynchronously)
     * Returns whether the specified content restriction applies to a user. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for a user with an account ID of &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId&#x3D;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the user can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that is restricted. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentRestrictionStatusForUserAsync(String id, String operationKey, String key, String username, String accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentRestrictionStatusForUserValidateBeforeCall(id, operationKey, key, username, accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getIndividualGroupRestrictionStatusByGroupId
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to be queried for whether the content restriction applies to it. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIndividualGroupRestrictionStatusByGroupIdCall(String id, String operationKey, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIndividualGroupRestrictionStatusByGroupIdValidateBeforeCall(String id, String operationKey, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIndividualGroupRestrictionStatusByGroupId(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling getIndividualGroupRestrictionStatusByGroupId(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getIndividualGroupRestrictionStatusByGroupId(Async)");
        }
        
        com.squareup.okhttp.Call call = getIndividualGroupRestrictionStatusByGroupIdCall(id, operationKey, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content restriction status for group
     * Returns whether the specified content restriction applies to a group. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for the &#x60;123456&#x60; group id, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to be queried for whether the content restriction applies to it. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getIndividualGroupRestrictionStatusByGroupId(String id, String operationKey, String groupId) throws ApiException {
        getIndividualGroupRestrictionStatusByGroupIdWithHttpInfo(id, operationKey, groupId);
    }

    /**
     * Get content restriction status for group
     * Returns whether the specified content restriction applies to a group. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for the &#x60;123456&#x60; group id, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to be queried for whether the content restriction applies to it. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getIndividualGroupRestrictionStatusByGroupIdWithHttpInfo(String id, String operationKey, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = getIndividualGroupRestrictionStatusByGroupIdValidateBeforeCall(id, operationKey, groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get content restriction status for group (asynchronously)
     * Returns whether the specified content restriction applies to a group. For example, if a page with &#x60;id&#x3D;123&#x60; has a &#x60;read&#x60; restriction for the &#x60;123456&#x60; group id, the following request will return &#x60;true&#x60;:  &#x60;/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456&#x60;  Note that a response of &#x60;true&#x60; does not guarantee that the group can view the page, as it does not account for account-inherited restrictions, space permissions, or even product access. For more information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to be queried for whether the content restriction applies to it. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIndividualGroupRestrictionStatusByGroupIdAsync(String id, String operationKey, String groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIndividualGroupRestrictionStatusByGroupIdValidateBeforeCall(id, operationKey, groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRestrictions
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand. By default, the following objects are expanded: &#x60;restrictions.user&#x60;, &#x60;restrictions.group&#x60;.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestrictionsCall(String id, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestrictionsValidateBeforeCall(String id, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRestrictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestrictionsCall(id, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get restrictions
     * Returns the restrictions on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand. By default, the following objects are expanded: &#x60;restrictions.user&#x60;, &#x60;restrictions.group&#x60;.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @return ContentRestrictionArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentRestrictionArray getRestrictions(String id, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<ContentRestrictionArray> resp = getRestrictionsWithHttpInfo(id, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get restrictions
     * Returns the restrictions on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand. By default, the following objects are expanded: &#x60;restrictions.user&#x60;, &#x60;restrictions.group&#x60;.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @return ApiResponse&lt;ContentRestrictionArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentRestrictionArray> getRestrictionsWithHttpInfo(String id, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getRestrictionsValidateBeforeCall(id, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get restrictions (asynchronously)
     * Returns the restrictions on a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand. By default, the following objects are expanded: &#x60;restrictions.user&#x60;, &#x60;restrictions.group&#x60;.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestrictionsAsync(String id, List<String> expand, Integer start, Integer limit, final ApiCallback<ContentRestrictionArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestrictionsValidateBeforeCall(id, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestrictionsByOperation
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestrictionsByOperationCall(String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestrictionsByOperationValidateBeforeCall(String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRestrictionsByOperation(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestrictionsByOperationCall(id, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get restrictions by operation
     * Returns restrictions on a piece of content by operation. This method is similar to [Get restrictions](#api-content-id-restriction-get) except that the operations are properties of the return object, rather than items in a results array.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return Map&lt;String, InlineResponseMap200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, InlineResponseMap200> getRestrictionsByOperation(String id, List<String> expand) throws ApiException {
        ApiResponse<Map<String, InlineResponseMap200>> resp = getRestrictionsByOperationWithHttpInfo(id, expand);
        return resp.getData();
    }

    /**
     * Get restrictions by operation
     * Returns restrictions on a piece of content by operation. This method is similar to [Get restrictions](#api-content-id-restriction-get) except that the operations are properties of the return object, rather than items in a results array.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ApiResponse&lt;Map&lt;String, InlineResponseMap200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, InlineResponseMap200>> getRestrictionsByOperationWithHttpInfo(String id, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = getRestrictionsByOperationValidateBeforeCall(id, expand, null, null);
        Type localVarReturnType = new TypeToken<Map<String, InlineResponseMap200>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get restrictions by operation (asynchronously)
     * Returns restrictions on a piece of content by operation. This method is similar to [Get restrictions](#api-content-id-restriction-get) except that the operations are properties of the return object, rather than items in a results array.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestrictionsByOperationAsync(String id, List<String> expand, final ApiCallback<Map<String, InlineResponseMap200>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestrictionsByOperationValidateBeforeCall(id, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, InlineResponseMap200>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestrictionsForOperation
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param operationKey The operation type of the restrictions to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestrictionsForOperationCall(String id, String operationKey, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestrictionsForOperationValidateBeforeCall(String id, String operationKey, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRestrictionsForOperation(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling getRestrictionsForOperation(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestrictionsForOperationCall(id, operationKey, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get restrictions for operation
     * Returns the restictions on a piece of content for a given operation (read or update).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param operationKey The operation type of the restrictions to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @return ContentRestriction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentRestriction getRestrictionsForOperation(String id, String operationKey, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<ContentRestriction> resp = getRestrictionsForOperationWithHttpInfo(id, operationKey, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get restrictions for operation
     * Returns the restictions on a piece of content for a given operation (read or update).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param operationKey The operation type of the restrictions to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @return ApiResponse&lt;ContentRestriction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentRestriction> getRestrictionsForOperationWithHttpInfo(String id, String operationKey, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getRestrictionsForOperationValidateBeforeCall(id, operationKey, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<ContentRestriction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get restrictions for operation (asynchronously)
     * Returns the restictions on a piece of content for a given operation (read or update).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The ID of the content to be queried for its restrictions. (required)
     * @param operationKey The operation type of the restrictions to be returned. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param start The starting index of the users and groups in the returned restrictions. (optional, default to 0)
     * @param limit The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits. (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestrictionsForOperationAsync(String id, String operationKey, List<String> expand, Integer start, Integer limit, final ApiCallback<ContentRestriction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestrictionsForOperationValidateBeforeCall(id, operationKey, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentRestriction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeGroupFromContentRestriction
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to remove from the content restriction. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeGroupFromContentRestrictionCall(String id, String operationKey, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeGroupFromContentRestrictionValidateBeforeCall(String id, String operationKey, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeGroupFromContentRestriction(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling removeGroupFromContentRestriction(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeGroupFromContentRestriction(Async)");
        }
        
        com.squareup.okhttp.Call call = removeGroupFromContentRestrictionCall(id, operationKey, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove group from content restriction
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to remove from the content restriction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeGroupFromContentRestriction(String id, String operationKey, String groupId) throws ApiException {
        removeGroupFromContentRestrictionWithHttpInfo(id, operationKey, groupId);
    }

    /**
     * Remove group from content restriction
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to remove from the content restriction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeGroupFromContentRestrictionWithHttpInfo(String id, String operationKey, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = removeGroupFromContentRestrictionValidateBeforeCall(id, operationKey, groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove group from content restriction (asynchronously)
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupId The id of the group to remove from the content restriction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeGroupFromContentRestrictionAsync(String id, String operationKey, String groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeGroupFromContentRestrictionValidateBeforeCall(id, operationKey, groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeGroupFromContentRestrictionById
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to remove from the content restriction. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeGroupFromContentRestrictionByIdCall(String id, String operationKey, String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/group/{groupName}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()))
            .replaceAll("\\{" + "groupName" + "\\}", apiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeGroupFromContentRestrictionByIdValidateBeforeCall(String id, String operationKey, String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeGroupFromContentRestrictionById(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling removeGroupFromContentRestrictionById(Async)");
        }
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling removeGroupFromContentRestrictionById(Async)");
        }
        
        com.squareup.okhttp.Call call = removeGroupFromContentRestrictionByIdCall(id, operationKey, groupName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove group from content restriction
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to remove from the content restriction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeGroupFromContentRestrictionById(String id, String operationKey, String groupName) throws ApiException {
        removeGroupFromContentRestrictionByIdWithHttpInfo(id, operationKey, groupName);
    }

    /**
     * Remove group from content restriction
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to remove from the content restriction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeGroupFromContentRestrictionByIdWithHttpInfo(String id, String operationKey, String groupName) throws ApiException {
        com.squareup.okhttp.Call call = removeGroupFromContentRestrictionByIdValidateBeforeCall(id, operationKey, groupName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove group from content restriction (asynchronously)
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param groupName The name of the group to remove from the content restriction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeGroupFromContentRestrictionByIdAsync(String id, String operationKey, String groupName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeGroupFromContentRestrictionByIdValidateBeforeCall(id, operationKey, groupName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeUserFromContentRestriction
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeUserFromContentRestrictionCall(String id, String operationKey, String key, String username, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction/byOperation/{operationKey}/user"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "operationKey" + "\\}", apiClient.escapeString(operationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeUserFromContentRestrictionValidateBeforeCall(String id, String operationKey, String key, String username, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeUserFromContentRestriction(Async)");
        }
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling removeUserFromContentRestriction(Async)");
        }
        
        com.squareup.okhttp.Call call = removeUserFromContentRestrictionCall(id, operationKey, key, username, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove user from content restriction
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeUserFromContentRestriction(String id, String operationKey, String key, String username, String accountId) throws ApiException {
        removeUserFromContentRestrictionWithHttpInfo(id, operationKey, key, username, accountId);
    }

    /**
     * Remove user from content restriction
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeUserFromContentRestrictionWithHttpInfo(String id, String operationKey, String key, String username, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = removeUserFromContentRestrictionValidateBeforeCall(id, operationKey, key, username, accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove user from content restriction (asynchronously)
     * Removes a group from a content restriction. That is, remove read or update permission for the group for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The ID of the content that the restriction applies to. (required)
     * @param operationKey The operation that the restriction applies to. (required)
     * @param key This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. Use &#x60;accountId&#x60; instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, &#x60;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUserFromContentRestrictionAsync(String id, String operationKey, String key, String username, String accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUserFromContentRestrictionValidateBeforeCall(id, operationKey, key, username, accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateRestrictions
     * @param body The updated restrictions for the content. (required)
     * @param id The ID of the content to update restrictions for. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRestrictionsCall(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/restriction"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRestrictionsValidateBeforeCall(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRestrictions(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRestrictions(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRestrictionsCall(body, id, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update restrictions
     * Updates restrictions for a piece of content. This removes the existing restrictions and replaces them with the restrictions in the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body The updated restrictions for the content. (required)
     * @param id The ID of the content to update restrictions for. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ContentRestrictionArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentRestrictionArray updateRestrictions(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand) throws ApiException {
        ApiResponse<ContentRestrictionArray> resp = updateRestrictionsWithHttpInfo(body, id, expand);
        return resp.getData();
    }

    /**
     * Update restrictions
     * Updates restrictions for a piece of content. This removes the existing restrictions and replaces them with the restrictions in the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body The updated restrictions for the content. (required)
     * @param id The ID of the content to update restrictions for. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @return ApiResponse&lt;ContentRestrictionArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentRestrictionArray> updateRestrictionsWithHttpInfo(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = updateRestrictionsValidateBeforeCall(body, id, expand, null, null);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update restrictions (asynchronously)
     * Updates restrictions for a piece of content. This removes the existing restrictions and replaces them with the restrictions in the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body The updated restrictions for the content. (required)
     * @param id The ID of the content to update restrictions for. (required)
     * @param expand A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - &#x60;restrictions.user&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;restrictions.group&#x60; returns the piece of content that the restrictions are applied to. Expanded by default. - &#x60;content&#x60; returns the piece of content that the restrictions are applied to. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRestrictionsAsync(ContentRestrictionAddOrUpdateArray body, String id, List<String> expand, final ApiCallback<ContentRestrictionArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRestrictionsValidateBeforeCall(body, id, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentRestrictionArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
