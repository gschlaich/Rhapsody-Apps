/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContentProperty;
import io.swagger.client.model.ContentPropertyArray;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentPropertiesApi {
    private ApiClient apiClient;

    public ContentPropertiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentPropertiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContentProperty
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContentPropertyCall(Map<String, Object> body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/property"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContentPropertyValidateBeforeCall(Map<String, Object> body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createContentProperty(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createContentProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = createContentPropertyCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create content property
     * Creates a property for an existing piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  This is the same as [Create content property for key](#api-content-id-property-key-post) except that the key is specified in the request body instead of as a path parameter.  Content properties can also be added when creating a new piece of content by including them in the &#x60;metadata.properties&#x60; of the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @return ContentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentProperty createContentProperty(Map<String, Object> body, String id) throws ApiException {
        ApiResponse<ContentProperty> resp = createContentPropertyWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Create content property
     * Creates a property for an existing piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  This is the same as [Create content property for key](#api-content-id-property-key-post) except that the key is specified in the request body instead of as a path parameter.  Content properties can also be added when creating a new piece of content by including them in the &#x60;metadata.properties&#x60; of the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @return ApiResponse&lt;ContentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentProperty> createContentPropertyWithHttpInfo(Map<String, Object> body, String id) throws ApiException {
        com.squareup.okhttp.Call call = createContentPropertyValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create content property (asynchronously)
     * Creates a property for an existing piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  This is the same as [Create content property for key](#api-content-id-property-key-post) except that the key is specified in the request body instead of as a path parameter.  Content properties can also be added when creating a new piece of content by including them in the &#x60;metadata.properties&#x60; of the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContentPropertyAsync(Map<String, Object> body, String id, final ApiCallback<ContentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContentPropertyValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContentPropertyForKey
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @param key The key of the content property. Required. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContentPropertyForKeyCall(Map<String, Object> body, String id, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/property/{key}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContentPropertyForKeyValidateBeforeCall(Map<String, Object> body, String id, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createContentPropertyForKey(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createContentPropertyForKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createContentPropertyForKey(Async)");
        }
        
        com.squareup.okhttp.Call call = createContentPropertyForKeyCall(body, id, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create content property for key
     * Creates a property for an existing piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  This is the same as [Create content property](#api-content-id-property-post) except that the key is specified as a path parameter instead of in the request body.  Content properties can also be added when creating a new piece of content by including them in the &#x60;metadata.properties&#x60; of the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @param key The key of the content property. Required. (required)
     * @return ContentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentProperty createContentPropertyForKey(Map<String, Object> body, String id, String key) throws ApiException {
        ApiResponse<ContentProperty> resp = createContentPropertyForKeyWithHttpInfo(body, id, key);
        return resp.getData();
    }

    /**
     * Create content property for key
     * Creates a property for an existing piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  This is the same as [Create content property](#api-content-id-property-post) except that the key is specified as a path parameter instead of in the request body.  Content properties can also be added when creating a new piece of content by including them in the &#x60;metadata.properties&#x60; of the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @param key The key of the content property. Required. (required)
     * @return ApiResponse&lt;ContentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentProperty> createContentPropertyForKeyWithHttpInfo(Map<String, Object> body, String id, String key) throws ApiException {
        com.squareup.okhttp.Call call = createContentPropertyForKeyValidateBeforeCall(body, id, key, null, null);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create content property for key (asynchronously)
     * Creates a property for an existing piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  This is the same as [Create content property](#api-content-id-property-post) except that the key is specified as a path parameter instead of in the request body.  Content properties can also be added when creating a new piece of content by including them in the &#x60;metadata.properties&#x60; of the request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property to be created. (required)
     * @param id The ID of the content to add the property to. (required)
     * @param key The key of the content property. Required. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContentPropertyForKeyAsync(Map<String, Object> body, String id, String key, final ApiCallback<ContentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContentPropertyForKeyValidateBeforeCall(body, id, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteContentProperty
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContentPropertyCall(String id, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/property/{key}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContentPropertyValidateBeforeCall(String id, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContentProperty(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteContentProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteContentPropertyCall(id, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete content property
     * Deletes a content property. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContentProperty(String id, String key) throws ApiException {
        deleteContentPropertyWithHttpInfo(id, key);
    }

    /**
     * Delete content property
     * Deletes a content property. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContentPropertyWithHttpInfo(String id, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteContentPropertyValidateBeforeCall(id, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete content property (asynchronously)
     * Deletes a content property. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContentPropertyAsync(String id, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContentPropertyValidateBeforeCall(id, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getContentProperties
     * @param id The ID of the content to be queried for its properties. (required)
     * @param key The key of the content property. (optional)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param start The starting index of the returned properties. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentPropertiesCall(String id, List<String> key, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/property"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "key", key));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentPropertiesValidateBeforeCall(String id, List<String> key, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentProperties(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentPropertiesCall(id, key, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content properties
     * Returns the properties for a piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     * @param id The ID of the content to be queried for its properties. (required)
     * @param key The key of the content property. (optional)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param start The starting index of the returned properties. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @return ContentPropertyArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentPropertyArray getContentProperties(String id, List<String> key, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<ContentPropertyArray> resp = getContentPropertiesWithHttpInfo(id, key, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get content properties
     * Returns the properties for a piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     * @param id The ID of the content to be queried for its properties. (required)
     * @param key The key of the content property. (optional)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param start The starting index of the returned properties. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @return ApiResponse&lt;ContentPropertyArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentPropertyArray> getContentPropertiesWithHttpInfo(String id, List<String> key, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getContentPropertiesValidateBeforeCall(id, key, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<ContentPropertyArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content properties (asynchronously)
     * Returns the properties for a piece of content. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     * @param id The ID of the content to be queried for its properties. (required)
     * @param key The key of the content property. (optional)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param start The starting index of the returned properties. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentPropertiesAsync(String id, List<String> key, List<String> expand, Integer start, Integer limit, final ApiCallback<ContentPropertyArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentPropertiesValidateBeforeCall(id, key, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentPropertyArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentProperty
     * @param id The ID of the content to be queried for the property. (required)
     * @param key The key of the content property. (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param status Filter the results to a set of content based on their status. If set to &#x60;any&#x60;, content with any status is returned. By default it will fetch current and archived statuses &#x60;?status&#x3D;current&amp;status&#x3D;archived&#x60;. All supported statuses  - any - archived - current - deleted - draft - trashed (optional, default to ["current","archived"])
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentPropertyCall(String id, String key, List<String> expand, List<String> status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/property/{key}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentPropertyValidateBeforeCall(String id, String key, List<String> expand, List<String> status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentProperty(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getContentProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentPropertyCall(id, key, expand, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content property
     * Returns a content property for a piece of content. For more information, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     * @param id The ID of the content to be queried for the property. (required)
     * @param key The key of the content property. (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param status Filter the results to a set of content based on their status. If set to &#x60;any&#x60;, content with any status is returned. By default it will fetch current and archived statuses &#x60;?status&#x3D;current&amp;status&#x3D;archived&#x60;. All supported statuses  - any - archived - current - deleted - draft - trashed (optional, default to ["current","archived"])
     * @return ContentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentProperty getContentProperty(String id, String key, List<String> expand, List<String> status) throws ApiException {
        ApiResponse<ContentProperty> resp = getContentPropertyWithHttpInfo(id, key, expand, status);
        return resp.getData();
    }

    /**
     * Get content property
     * Returns a content property for a piece of content. For more information, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     * @param id The ID of the content to be queried for the property. (required)
     * @param key The key of the content property. (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param status Filter the results to a set of content based on their status. If set to &#x60;any&#x60;, content with any status is returned. By default it will fetch current and archived statuses &#x60;?status&#x3D;current&amp;status&#x3D;archived&#x60;. All supported statuses  - any - archived - current - deleted - draft - trashed (optional, default to ["current","archived"])
     * @return ApiResponse&lt;ContentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentProperty> getContentPropertyWithHttpInfo(String id, String key, List<String> expand, List<String> status) throws ApiException {
        com.squareup.okhttp.Call call = getContentPropertyValidateBeforeCall(id, key, expand, status, null, null);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content property (asynchronously)
     * Returns a content property for a piece of content. For more information, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     * @param id The ID of the content to be queried for the property. (required)
     * @param key The key of the content property. (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;content&#x60; returns the content that the property is stored against. - &#x60;version&#x60; returns information about the version of the property, such as the version number, when it was created, etc. (optional)
     * @param status Filter the results to a set of content based on their status. If set to &#x60;any&#x60;, content with any status is returned. By default it will fetch current and archived statuses &#x60;?status&#x3D;current&amp;status&#x3D;archived&#x60;. All supported statuses  - any - archived - current - deleted - draft - trashed (optional, default to ["current","archived"])
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentPropertyAsync(String id, String key, List<String> expand, List<String> status, final ApiCallback<ContentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentPropertyValidateBeforeCall(id, key, expand, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContentProperty
     * @param body The content property being updated. (required)
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContentPropertyCall(Map<String, Object> body, String id, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/property/{key}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContentPropertyValidateBeforeCall(Map<String, Object> body, String id, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContentProperty(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContentProperty(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateContentProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = updateContentPropertyCall(body, id, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update content property
     * Updates an existing content property. This method will also create a new property for a piece of content, if the property key does not exist and the property version is 1. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property being updated. (required)
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @return ContentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentProperty updateContentProperty(Map<String, Object> body, String id, String key) throws ApiException {
        ApiResponse<ContentProperty> resp = updateContentPropertyWithHttpInfo(body, id, key);
        return resp.getData();
    }

    /**
     * Update content property
     * Updates an existing content property. This method will also create a new property for a piece of content, if the property key does not exist and the property version is 1. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property being updated. (required)
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @return ApiResponse&lt;ContentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentProperty> updateContentPropertyWithHttpInfo(Map<String, Object> body, String id, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateContentPropertyValidateBeforeCall(body, id, key, null, null);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update content property (asynchronously)
     * Updates an existing content property. This method will also create a new property for a piece of content, if the property key does not exist and the property version is 1. For more information about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     * @param body The content property being updated. (required)
     * @param id The ID of the content that the property belongs to. (required)
     * @param key The key of the property. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContentPropertyAsync(Map<String, Object> body, String id, String key, final ApiCallback<ContentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContentPropertyValidateBeforeCall(body, id, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
