/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AsyncId;
import io.swagger.client.model.AvailableContentStates;
import io.swagger.client.model.BulkContentStateSetInput;
import io.swagger.client.model.ContentArray;
import io.swagger.client.model.ContentState;
import io.swagger.client.model.ContentStateBulkSetTaskUpdate;
import io.swagger.client.model.ContentStateResponse;
import io.swagger.client.model.ContentStateRestInput;
import io.swagger.client.model.ContentStateSettings;
import io.swagger.client.model.ContentstatesDeleteBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentStatesApi {
    private ApiClient apiClient;

    public ContentStatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentStatesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for bulkRemoveContentStates
     * @param status Set status to one of [current,draft]. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkRemoveContentStatesCall(String status, ContentstatesDeleteBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content-states/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkRemoveContentStatesValidateBeforeCall(String status, ContentstatesDeleteBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling bulkRemoveContentStates(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkRemoveContentStatesCall(status, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk remove content states from content
     * Creates a long running task that Removes content state from draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state removed via this endpoint.
     * @param status Set status to one of [current,draft]. (required)
     * @param body  (optional)
     * @return AsyncId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncId bulkRemoveContentStates(String status, ContentstatesDeleteBody body) throws ApiException {
        ApiResponse<AsyncId> resp = bulkRemoveContentStatesWithHttpInfo(status, body);
        return resp.getData();
    }

    /**
     * Bulk remove content states from content
     * Creates a long running task that Removes content state from draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state removed via this endpoint.
     * @param status Set status to one of [current,draft]. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AsyncId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsyncId> bulkRemoveContentStatesWithHttpInfo(String status, ContentstatesDeleteBody body) throws ApiException {
        com.squareup.okhttp.Call call = bulkRemoveContentStatesValidateBeforeCall(status, body, null, null);
        Type localVarReturnType = new TypeToken<AsyncId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk remove content states from content (asynchronously)
     * Creates a long running task that Removes content state from draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state removed via this endpoint.
     * @param status Set status to one of [current,draft]. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkRemoveContentStatesAsync(String status, ContentstatesDeleteBody body, final ApiCallback<AsyncId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkRemoveContentStatesValidateBeforeCall(status, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsyncId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkSetContentStates
     * @param body The content state and ids to set it to. (required)
     * @param status Set status to one of [current,draft]. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkSetContentStatesCall(BulkContentStateSetInput body, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content-states";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkSetContentStatesValidateBeforeCall(BulkContentStateSetInput body, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkSetContentStates(Async)");
        }
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling bulkSetContentStates(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkSetContentStatesCall(body, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk set content state of many contents
     * Creates a long running task that sets content state of draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state set via this endpoint.
     * @param body The content state and ids to set it to. (required)
     * @param status Set status to one of [current,draft]. (required)
     * @return AsyncId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncId bulkSetContentStates(BulkContentStateSetInput body, String status) throws ApiException {
        ApiResponse<AsyncId> resp = bulkSetContentStatesWithHttpInfo(body, status);
        return resp.getData();
    }

    /**
     * Bulk set content state of many contents
     * Creates a long running task that sets content state of draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state set via this endpoint.
     * @param body The content state and ids to set it to. (required)
     * @param status Set status to one of [current,draft]. (required)
     * @return ApiResponse&lt;AsyncId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsyncId> bulkSetContentStatesWithHttpInfo(BulkContentStateSetInput body, String status) throws ApiException {
        com.squareup.okhttp.Call call = bulkSetContentStatesValidateBeforeCall(body, status, null, null);
        Type localVarReturnType = new TypeToken<AsyncId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk set content state of many contents (asynchronously)
     * Creates a long running task that sets content state of draft or published versions of pages specified.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Content Edit Permission for a content to have its state set via this endpoint.
     * @param body The content state and ids to set it to. (required)
     * @param status Set status to one of [current,draft]. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkSetContentStatesAsync(BulkContentStateSetInput body, String status, final ApiCallback<AsyncId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkSetContentStatesValidateBeforeCall(body, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsyncId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAvailableContentStates
     * @param id id of content to get available states for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailableContentStatesCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/state/available"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvailableContentStatesValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAvailableContentStates(Async)");
        }
        
        com.squareup.okhttp.Call call = getAvailableContentStatesCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets available content states for content.
     * Gets content states that are available for the content to be set as. Will return all enabled Space Content States. Will only return most the 3 most recently published custom content states to match UI editor list. To get all custom content states, use the /content-states endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id id of content to get available states for (required)
     * @return AvailableContentStates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AvailableContentStates getAvailableContentStates(String id) throws ApiException {
        ApiResponse<AvailableContentStates> resp = getAvailableContentStatesWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets available content states for content.
     * Gets content states that are available for the content to be set as. Will return all enabled Space Content States. Will only return most the 3 most recently published custom content states to match UI editor list. To get all custom content states, use the /content-states endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id id of content to get available states for (required)
     * @return ApiResponse&lt;AvailableContentStates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AvailableContentStates> getAvailableContentStatesWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getAvailableContentStatesValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<AvailableContentStates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets available content states for content. (asynchronously)
     * Gets content states that are available for the content to be set as. Will return all enabled Space Content States. Will only return most the 3 most recently published custom content states to match UI editor list. To get all custom content states, use the /content-states endpoint.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id id of content to get available states for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvailableContentStatesAsync(String id, final ApiCallback<AvailableContentStates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailableContentStatesValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AvailableContentStates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentState
     * @param id The id of the content whose content state is of interest. (required)
     * @param status Set status to one of [current,draft,archived]. Default value is current. (optional, default to current)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentStateCall(String id, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentStateValidateBeforeCall(String id, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentState(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentStateCall(id, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content state
     * Gets the current content state of the draft or current version of content. To specify the draft version, set the parameter status to draft, otherwise archived or current will get the relevant published state. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The id of the content whose content state is of interest. (required)
     * @param status Set status to one of [current,draft,archived]. Default value is current. (optional, default to current)
     * @return ContentStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStateResponse getContentState(String id, String status) throws ApiException {
        ApiResponse<ContentStateResponse> resp = getContentStateWithHttpInfo(id, status);
        return resp.getData();
    }

    /**
     * Get content state
     * Gets the current content state of the draft or current version of content. To specify the draft version, set the parameter status to draft, otherwise archived or current will get the relevant published state. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The id of the content whose content state is of interest. (required)
     * @param status Set status to one of [current,draft,archived]. Default value is current. (optional, default to current)
     * @return ApiResponse&lt;ContentStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStateResponse> getContentStateWithHttpInfo(String id, String status) throws ApiException {
        com.squareup.okhttp.Call call = getContentStateValidateBeforeCall(id, status, null, null);
        Type localVarReturnType = new TypeToken<ContentStateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content state (asynchronously)
     * Gets the current content state of the draft or current version of content. To specify the draft version, set the parameter status to draft, otherwise archived or current will get the relevant published state. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     * @param id The id of the content whose content state is of interest. (required)
     * @param status Set status to one of [current,draft,archived]. Default value is current. (optional, default to current)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentStateAsync(String id, String status, final ApiCallback<ContentStateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentStateValidateBeforeCall(id, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentStateSettings
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentStateSettingsCall(String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/state/settings"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentStateSettingsValidateBeforeCall(String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getContentStateSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentStateSettingsCall(spaceKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content state settings for space
     * Get object describing whether content states are allowed at all, if custom content states or space content states are restricted, and a list of space content states allowed for the space if they are not restricted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space admin permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @return ContentStateSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStateSettings getContentStateSettings(String spaceKey) throws ApiException {
        ApiResponse<ContentStateSettings> resp = getContentStateSettingsWithHttpInfo(spaceKey);
        return resp.getData();
    }

    /**
     * Get content state settings for space
     * Get object describing whether content states are allowed at all, if custom content states or space content states are restricted, and a list of space content states allowed for the space if they are not restricted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space admin permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @return ApiResponse&lt;ContentStateSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStateSettings> getContentStateSettingsWithHttpInfo(String spaceKey) throws ApiException {
        com.squareup.okhttp.Call call = getContentStateSettingsValidateBeforeCall(spaceKey, null, null);
        Type localVarReturnType = new TypeToken<ContentStateSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content state settings for space (asynchronously)
     * Get object describing whether content states are allowed at all, if custom content states or space content states are restricted, and a list of space content states allowed for the space if they are not restricted.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space admin permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentStateSettingsAsync(String spaceKey, final ApiCallback<ContentStateSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentStateSettingsValidateBeforeCall(spaceKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStateSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentsWithState
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param stateId The id of the content state to filter content by (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. Options include: space, version, history, children, etc.  Ex: space,version (optional)
     * @param limit Maximum number of results to return (optional, default to 25)
     * @param start Number of result to start returning. (0 indexed) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContentsWithStateCall(String spaceKey, Integer stateId, List<String> expand, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/state/content"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stateId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state-id", stateId));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContentsWithStateValidateBeforeCall(String spaceKey, Integer stateId, List<String> expand, Integer limit, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getContentsWithState(Async)");
        }
        // verify the required parameter 'stateId' is set
        if (stateId == null) {
            throw new ApiException("Missing the required parameter 'stateId' when calling getContentsWithState(Async)");
        }
        
        com.squareup.okhttp.Call call = getContentsWithStateCall(spaceKey, stateId, expand, limit, start, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get content in space with given content state
     * Finds paginated content with   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space View Permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param stateId The id of the content state to filter content by (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. Options include: space, version, history, children, etc.  Ex: space,version (optional)
     * @param limit Maximum number of results to return (optional, default to 25)
     * @param start Number of result to start returning. (0 indexed) (optional)
     * @return ContentArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentArray getContentsWithState(String spaceKey, Integer stateId, List<String> expand, Integer limit, Integer start) throws ApiException {
        ApiResponse<ContentArray> resp = getContentsWithStateWithHttpInfo(spaceKey, stateId, expand, limit, start);
        return resp.getData();
    }

    /**
     * Get content in space with given content state
     * Finds paginated content with   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space View Permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param stateId The id of the content state to filter content by (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. Options include: space, version, history, children, etc.  Ex: space,version (optional)
     * @param limit Maximum number of results to return (optional, default to 25)
     * @param start Number of result to start returning. (0 indexed) (optional)
     * @return ApiResponse&lt;ContentArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentArray> getContentsWithStateWithHttpInfo(String spaceKey, Integer stateId, List<String> expand, Integer limit, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = getContentsWithStateValidateBeforeCall(spaceKey, stateId, expand, limit, start, null, null);
        Type localVarReturnType = new TypeToken<ContentArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get content in space with given content state (asynchronously)
     * Finds paginated content with   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space View Permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param stateId The id of the content state to filter content by (required)
     * @param expand A multi-value parameter indicating which properties of the content to expand. Options include: space, version, history, children, etc.  Ex: space,version (optional)
     * @param limit Maximum number of results to return (optional, default to 25)
     * @param start Number of result to start returning. (0 indexed) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContentsWithStateAsync(String spaceKey, Integer stateId, List<String> expand, Integer limit, Integer start, final ApiCallback<ContentArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContentsWithStateValidateBeforeCall(spaceKey, stateId, expand, limit, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomContentStates
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomContentStatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content-states";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomContentStatesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCustomContentStatesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Custom Content States
     * Get custom content states that authenticated user has created.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have user authentication.
     * @return List&lt;ContentState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentState> getCustomContentStates() throws ApiException {
        ApiResponse<List<ContentState>> resp = getCustomContentStatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Custom Content States
     * Get custom content states that authenticated user has created.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have user authentication.
     * @return ApiResponse&lt;List&lt;ContentState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentState>> getCustomContentStatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCustomContentStatesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ContentState>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Custom Content States (asynchronously)
     * Get custom content states that authenticated user has created.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have user authentication.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomContentStatesAsync(final ApiCallback<List<ContentState>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomContentStatesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentState>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSpaceContentStates
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpaceContentStatesCall(String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/state"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSpaceContentStatesValidateBeforeCall(String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getSpaceContentStates(Async)");
        }
        
        com.squareup.okhttp.Call call = getSpaceContentStatesCall(spaceKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get space suggested content states
     * Get content states that are suggested in the space. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space view permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @return List&lt;ContentState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentState> getSpaceContentStates(String spaceKey) throws ApiException {
        ApiResponse<List<ContentState>> resp = getSpaceContentStatesWithHttpInfo(spaceKey);
        return resp.getData();
    }

    /**
     * Get space suggested content states
     * Get content states that are suggested in the space. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space view permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @return ApiResponse&lt;List&lt;ContentState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentState>> getSpaceContentStatesWithHttpInfo(String spaceKey) throws ApiException {
        com.squareup.okhttp.Call call = getSpaceContentStatesValidateBeforeCall(spaceKey, null, null);
        Type localVarReturnType = new TypeToken<List<ContentState>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get space suggested content states (asynchronously)
     * Get content states that are suggested in the space. **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Space view permission
     * @param spaceKey The key of the space to be queried for its content state settings. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpaceContentStatesAsync(String spaceKey, final ApiCallback<List<ContentState>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpaceContentStatesValidateBeforeCall(spaceKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentState>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskUpdate
     * @param taskId taskId returned by put or delete requests to /wiki/rest/api/content-states (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskUpdateCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content-states/task/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskUpdateValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = getTaskUpdateCall(taskId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get update on long running task for setting of content state.
     * Get Status of long running task that was previously created to set or remove content states from content. User must first create a task by passing in details to /wiki/rest/api/content-states PUT or DELETE endpoints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have created long running task
     * @param taskId taskId returned by put or delete requests to /wiki/rest/api/content-states (required)
     * @return ContentStateBulkSetTaskUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStateBulkSetTaskUpdate getTaskUpdate(String taskId) throws ApiException {
        ApiResponse<ContentStateBulkSetTaskUpdate> resp = getTaskUpdateWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Get update on long running task for setting of content state.
     * Get Status of long running task that was previously created to set or remove content states from content. User must first create a task by passing in details to /wiki/rest/api/content-states PUT or DELETE endpoints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have created long running task
     * @param taskId taskId returned by put or delete requests to /wiki/rest/api/content-states (required)
     * @return ApiResponse&lt;ContentStateBulkSetTaskUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStateBulkSetTaskUpdate> getTaskUpdateWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskUpdateValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<ContentStateBulkSetTaskUpdate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get update on long running task for setting of content state. (asynchronously)
     * Get Status of long running task that was previously created to set or remove content states from content. User must first create a task by passing in details to /wiki/rest/api/content-states PUT or DELETE endpoints.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required** Must have created long running task
     * @param taskId taskId returned by put or delete requests to /wiki/rest/api/content-states (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskUpdateAsync(String taskId, final ApiCallback<ContentStateBulkSetTaskUpdate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskUpdateValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStateBulkSetTaskUpdate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeContentState
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status status of content state from which to delete state. Can be draft or archived (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeContentStateCall(String id, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeContentStateValidateBeforeCall(String id, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeContentState(Async)");
        }
        
        com.squareup.okhttp.Call call = removeContentStateCall(id, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes the content state of a content and publishes a new version.
     * Removes the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new status.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status status of content state from which to delete state. Can be draft or archived (optional)
     * @return ContentStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStateResponse removeContentState(String id, String status) throws ApiException {
        ApiResponse<ContentStateResponse> resp = removeContentStateWithHttpInfo(id, status);
        return resp.getData();
    }

    /**
     * Removes the content state of a content and publishes a new version.
     * Removes the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new status.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status status of content state from which to delete state. Can be draft or archived (optional)
     * @return ApiResponse&lt;ContentStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStateResponse> removeContentStateWithHttpInfo(String id, String status) throws ApiException {
        com.squareup.okhttp.Call call = removeContentStateValidateBeforeCall(id, status, null, null);
        Type localVarReturnType = new TypeToken<ContentStateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes the content state of a content and publishes a new version. (asynchronously)
     * Removes the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new status.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status status of content state from which to delete state. Can be draft or archived (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeContentStateAsync(String id, String status, final ApiCallback<ContentStateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeContentStateValidateBeforeCall(id, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setContentState
     * @param body Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space. (required)
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status Status of content onto which state will be placed. If draft, then draft state will change. If current, state will be placed onto a new version of the content with same body as previous version. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setContentStateCall(ContentStateRestInput body, String id, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/content/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setContentStateValidateBeforeCall(ContentStateRestInput body, String id, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setContentState(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setContentState(Async)");
        }
        
        com.squareup.okhttp.Call call = setContentStateCall(body, id, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the content state of a content and publishes a new version of the content.
     * Sets the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new state.  You may pass in either an id of a state, or the name and color of a desired new state. If all 3 are passed in, id will be used. If the name and color passed in already exist under the current user&#x27;s existing custom states, the existing state will be reused. If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content&#x27;s space) then this set will fail.  You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space. (required)
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status Status of content onto which state will be placed. If draft, then draft state will change. If current, state will be placed onto a new version of the content with same body as previous version. (optional)
     * @return ContentStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStateResponse setContentState(ContentStateRestInput body, String id, String status) throws ApiException {
        ApiResponse<ContentStateResponse> resp = setContentStateWithHttpInfo(body, id, status);
        return resp.getData();
    }

    /**
     * Set the content state of a content and publishes a new version of the content.
     * Sets the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new state.  You may pass in either an id of a state, or the name and color of a desired new state. If all 3 are passed in, id will be used. If the name and color passed in already exist under the current user&#x27;s existing custom states, the existing state will be reused. If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content&#x27;s space) then this set will fail.  You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space. (required)
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status Status of content onto which state will be placed. If draft, then draft state will change. If current, state will be placed onto a new version of the content with same body as previous version. (optional)
     * @return ApiResponse&lt;ContentStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStateResponse> setContentStateWithHttpInfo(ContentStateRestInput body, String id, String status) throws ApiException {
        com.squareup.okhttp.Call call = setContentStateValidateBeforeCall(body, id, status, null, null);
        Type localVarReturnType = new TypeToken<ContentStateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the content state of a content and publishes a new version of the content. (asynchronously)
     * Sets the content state of the content specified and creates a new version (publishes the content without changing the body) of the content with the new state.  You may pass in either an id of a state, or the name and color of a desired new state. If all 3 are passed in, id will be used. If the name and color passed in already exist under the current user&#x27;s existing custom states, the existing state will be reused. If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content&#x27;s space) then this set will fail.  You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to edit the content.
     * @param body Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space. (required)
     * @param id The Id of the content whose content state is to be set. (required)
     * @param status Status of content onto which state will be placed. If draft, then draft state will change. If current, state will be placed onto a new version of the content with same body as previous version. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setContentStateAsync(ContentStateRestInput body, String id, String status, final ApiCallback<ContentStateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setContentStateValidateBeforeCall(body, id, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
