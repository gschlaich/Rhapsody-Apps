/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SearchPageResponseSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient apiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchByCQL
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
     * @param cqlcontext The space, content, and content status to execute the search against.  - &#x60;spaceKey&#x60; Key of the space to search against. Optional. - &#x60;contentId&#x60; ID of the content to search against. Optional. Must be in the space specified by &#x60;spaceKey&#x60;. - &#x60;contentStatuses&#x60; Content statuses to search against. Optional.  Specify these values in an object. For example, &#x60;cqlcontext&#x3D;{%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}&#x60; (optional)
     * @param cursor Pointer to a set of search results, returned as part of the &#x60;next&#x60; or &#x60;prev&#x60; URL from the previous search call. (optional)
     * @param next  (optional, default to false)
     * @param prev  (optional, default to false)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param start The start point of the collection to return (optional, default to 0)
     * @param includeArchivedSpaces Whether to include content from archived spaces in the results. (optional, default to false)
     * @param excludeCurrentSpaces Whether to exclude current spaces and only show archived spaces. (optional, default to false)
     * @param excerpt The excerpt strategy to apply to the result (optional, default to highlight)
     * @param sitePermissionTypeFilter Filters users by permission type.  Use NONE to default to licensed users, EXTERNALCOLLABORATOR for external/guest users, and ALL to include all permission types. (optional, default to none)
     * @param u  (optional)
     * @param expand  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchByCQLCall(String cql, String cqlcontext, String cursor, Boolean next, Boolean prev, Integer limit, Integer start, Boolean includeArchivedSpaces, Boolean excludeCurrentSpaces, String excerpt, String sitePermissionTypeFilter, Long u, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cql != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cql", cql));
        if (cqlcontext != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cqlcontext", cqlcontext));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (next != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("next", next));
        if (prev != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prev", prev));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (includeArchivedSpaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeArchivedSpaces", includeArchivedSpaces));
        if (excludeCurrentSpaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excludeCurrentSpaces", excludeCurrentSpaces));
        if (excerpt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excerpt", excerpt));
        if (sitePermissionTypeFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sitePermissionTypeFilter", sitePermissionTypeFilter));
        if (u != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_", u));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchByCQLValidateBeforeCall(String cql, String cqlcontext, String cursor, Boolean next, Boolean prev, Integer limit, Integer start, Boolean includeArchivedSpaces, Boolean excludeCurrentSpaces, String excerpt, String sitePermissionTypeFilter, Long u, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cql' is set
        if (cql == null) {
            throw new ApiException("Missing the required parameter 'cql' when calling searchByCQL(Async)");
        }
        
        com.squareup.okhttp.Call call = searchByCQLCall(cql, cqlcontext, cursor, next, prev, limit, start, includeArchivedSpaces, excludeCurrentSpaces, excerpt, sitePermissionTypeFilter, u, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search content
     * Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search&#x60; endpoint no longer support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25 &#x60;&#x60;&#x60;  Example response: &#x60;&#x60;&#x60; {   \&quot;results\&quot;: [     { ... },     { ... },     ...     { ... }   ],   \&quot;limit\&quot;: 25,   \&quot;size\&quot;: 25,   ...   \&quot;_links\&quot;: {     \&quot;base\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;context\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;next\&quot;: \&quot;/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg\&quot;,     \&quot;self\&quot;: \&quot;&lt;url&gt;\&quot;   } } &#x60;&#x60;&#x60;  When additional results are available, returns &#x60;next&#x60; and &#x60;prev&#x60; URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use &#x60;limit&#x60; to specify the number of results returned in each call.  Example subsequent call (taken from example response): &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg &#x60;&#x60;&#x60; The response to this will have a &#x60;prev&#x60; URL similar to the &#x60;next&#x60; in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
     * @param cqlcontext The space, content, and content status to execute the search against.  - &#x60;spaceKey&#x60; Key of the space to search against. Optional. - &#x60;contentId&#x60; ID of the content to search against. Optional. Must be in the space specified by &#x60;spaceKey&#x60;. - &#x60;contentStatuses&#x60; Content statuses to search against. Optional.  Specify these values in an object. For example, &#x60;cqlcontext&#x3D;{%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}&#x60; (optional)
     * @param cursor Pointer to a set of search results, returned as part of the &#x60;next&#x60; or &#x60;prev&#x60; URL from the previous search call. (optional)
     * @param next  (optional, default to false)
     * @param prev  (optional, default to false)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param start The start point of the collection to return (optional, default to 0)
     * @param includeArchivedSpaces Whether to include content from archived spaces in the results. (optional, default to false)
     * @param excludeCurrentSpaces Whether to exclude current spaces and only show archived spaces. (optional, default to false)
     * @param excerpt The excerpt strategy to apply to the result (optional, default to highlight)
     * @param sitePermissionTypeFilter Filters users by permission type.  Use NONE to default to licensed users, EXTERNALCOLLABORATOR for external/guest users, and ALL to include all permission types. (optional, default to none)
     * @param u  (optional)
     * @param expand  (optional)
     * @return SearchPageResponseSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchPageResponseSearchResult searchByCQL(String cql, String cqlcontext, String cursor, Boolean next, Boolean prev, Integer limit, Integer start, Boolean includeArchivedSpaces, Boolean excludeCurrentSpaces, String excerpt, String sitePermissionTypeFilter, Long u, List<String> expand) throws ApiException {
        ApiResponse<SearchPageResponseSearchResult> resp = searchByCQLWithHttpInfo(cql, cqlcontext, cursor, next, prev, limit, start, includeArchivedSpaces, excludeCurrentSpaces, excerpt, sitePermissionTypeFilter, u, expand);
        return resp.getData();
    }

    /**
     * Search content
     * Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search&#x60; endpoint no longer support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25 &#x60;&#x60;&#x60;  Example response: &#x60;&#x60;&#x60; {   \&quot;results\&quot;: [     { ... },     { ... },     ...     { ... }   ],   \&quot;limit\&quot;: 25,   \&quot;size\&quot;: 25,   ...   \&quot;_links\&quot;: {     \&quot;base\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;context\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;next\&quot;: \&quot;/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg\&quot;,     \&quot;self\&quot;: \&quot;&lt;url&gt;\&quot;   } } &#x60;&#x60;&#x60;  When additional results are available, returns &#x60;next&#x60; and &#x60;prev&#x60; URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use &#x60;limit&#x60; to specify the number of results returned in each call.  Example subsequent call (taken from example response): &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg &#x60;&#x60;&#x60; The response to this will have a &#x60;prev&#x60; URL similar to the &#x60;next&#x60; in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
     * @param cqlcontext The space, content, and content status to execute the search against.  - &#x60;spaceKey&#x60; Key of the space to search against. Optional. - &#x60;contentId&#x60; ID of the content to search against. Optional. Must be in the space specified by &#x60;spaceKey&#x60;. - &#x60;contentStatuses&#x60; Content statuses to search against. Optional.  Specify these values in an object. For example, &#x60;cqlcontext&#x3D;{%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}&#x60; (optional)
     * @param cursor Pointer to a set of search results, returned as part of the &#x60;next&#x60; or &#x60;prev&#x60; URL from the previous search call. (optional)
     * @param next  (optional, default to false)
     * @param prev  (optional, default to false)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param start The start point of the collection to return (optional, default to 0)
     * @param includeArchivedSpaces Whether to include content from archived spaces in the results. (optional, default to false)
     * @param excludeCurrentSpaces Whether to exclude current spaces and only show archived spaces. (optional, default to false)
     * @param excerpt The excerpt strategy to apply to the result (optional, default to highlight)
     * @param sitePermissionTypeFilter Filters users by permission type.  Use NONE to default to licensed users, EXTERNALCOLLABORATOR for external/guest users, and ALL to include all permission types. (optional, default to none)
     * @param u  (optional)
     * @param expand  (optional)
     * @return ApiResponse&lt;SearchPageResponseSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchPageResponseSearchResult> searchByCQLWithHttpInfo(String cql, String cqlcontext, String cursor, Boolean next, Boolean prev, Integer limit, Integer start, Boolean includeArchivedSpaces, Boolean excludeCurrentSpaces, String excerpt, String sitePermissionTypeFilter, Long u, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = searchByCQLValidateBeforeCall(cql, cqlcontext, cursor, next, prev, limit, start, includeArchivedSpaces, excludeCurrentSpaces, excerpt, sitePermissionTypeFilter, u, expand, null, null);
        Type localVarReturnType = new TypeToken<SearchPageResponseSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search content (asynchronously)
     * Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search&#x60; endpoint no longer support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25 &#x60;&#x60;&#x60;  Example response: &#x60;&#x60;&#x60; {   \&quot;results\&quot;: [     { ... },     { ... },     ...     { ... }   ],   \&quot;limit\&quot;: 25,   \&quot;size\&quot;: 25,   ...   \&quot;_links\&quot;: {     \&quot;base\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;context\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;next\&quot;: \&quot;/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg\&quot;,     \&quot;self\&quot;: \&quot;&lt;url&gt;\&quot;   } } &#x60;&#x60;&#x60;  When additional results are available, returns &#x60;next&#x60; and &#x60;prev&#x60; URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use &#x60;limit&#x60; to specify the number of results returned in each call.  Example subsequent call (taken from example response): &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg &#x60;&#x60;&#x60; The response to this will have a &#x60;prev&#x60; URL similar to the &#x60;next&#x60; in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
     * @param cqlcontext The space, content, and content status to execute the search against.  - &#x60;spaceKey&#x60; Key of the space to search against. Optional. - &#x60;contentId&#x60; ID of the content to search against. Optional. Must be in the space specified by &#x60;spaceKey&#x60;. - &#x60;contentStatuses&#x60; Content statuses to search against. Optional.  Specify these values in an object. For example, &#x60;cqlcontext&#x3D;{%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}&#x60; (optional)
     * @param cursor Pointer to a set of search results, returned as part of the &#x60;next&#x60; or &#x60;prev&#x60; URL from the previous search call. (optional)
     * @param next  (optional, default to false)
     * @param prev  (optional, default to false)
     * @param limit The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param start The start point of the collection to return (optional, default to 0)
     * @param includeArchivedSpaces Whether to include content from archived spaces in the results. (optional, default to false)
     * @param excludeCurrentSpaces Whether to exclude current spaces and only show archived spaces. (optional, default to false)
     * @param excerpt The excerpt strategy to apply to the result (optional, default to highlight)
     * @param sitePermissionTypeFilter Filters users by permission type.  Use NONE to default to licensed users, EXTERNALCOLLABORATOR for external/guest users, and ALL to include all permission types. (optional, default to none)
     * @param u  (optional)
     * @param expand  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchByCQLAsync(String cql, String cqlcontext, String cursor, Boolean next, Boolean prev, Integer limit, Integer start, Boolean includeArchivedSpaces, Boolean excludeCurrentSpaces, String excerpt, String sitePermissionTypeFilter, Long u, List<String> expand, final ApiCallback<SearchPageResponseSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchByCQLValidateBeforeCall(cql, cqlcontext, cursor, next, prev, limit, start, includeArchivedSpaces, excludeCurrentSpaces, excerpt, sitePermissionTypeFilter, u, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchPageResponseSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUser
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql&#x3D;type&#x3D;user will return all users           cql&#x3D;user&#x3D;\&quot;1234\&quot; will return user with accountId \&quot;1234\&quot;           You can also use IN, NOT IN, !&#x3D; operators           cql&#x3D;user IN (\&quot;12\&quot;, \&quot;34\&quot;) will return users with accountids \&quot;12\&quot; and \&quot;34\&quot;           cql&#x3D;user.fullname~jo will return users with nickname/full name starting with \&quot;jo\&quot;           cql&#x3D;user.accountid&#x3D;\&quot;123\&quot; will return user with accountId \&quot;123\&quot; (required)
     * @param start The starting index of the returned users. (optional, default to 0)
     * @param limit The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the user to expand.  - &#x60;operations&#x60; returns the operations for the user, which are used when setting permissions. - &#x60;personalSpace&#x60; returns the personal space of the user. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUserCall(String cql, Integer start, Integer limit, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/search/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cql != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cql", cql));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUserValidateBeforeCall(String cql, Integer start, Integer limit, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'cql' is set
        if (cql == null) {
            throw new ApiException("Missing the required parameter 'cql' when calling searchUser(Async)");
        }
        
        com.squareup.okhttp.Call call = searchUserCall(cql, start, limit, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search users
     * Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search/user&#x60; endpoint only support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.  Note that some user fields may be set to null depending on the user&#x27;s privacy settings. These are: email, profilePicture, displayName, and timeZone.
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql&#x3D;type&#x3D;user will return all users           cql&#x3D;user&#x3D;\&quot;1234\&quot; will return user with accountId \&quot;1234\&quot;           You can also use IN, NOT IN, !&#x3D; operators           cql&#x3D;user IN (\&quot;12\&quot;, \&quot;34\&quot;) will return users with accountids \&quot;12\&quot; and \&quot;34\&quot;           cql&#x3D;user.fullname~jo will return users with nickname/full name starting with \&quot;jo\&quot;           cql&#x3D;user.accountid&#x3D;\&quot;123\&quot; will return user with accountId \&quot;123\&quot; (required)
     * @param start The starting index of the returned users. (optional, default to 0)
     * @param limit The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the user to expand.  - &#x60;operations&#x60; returns the operations for the user, which are used when setting permissions. - &#x60;personalSpace&#x60; returns the personal space of the user. (optional)
     * @return SearchPageResponseSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchPageResponseSearchResult searchUser(String cql, Integer start, Integer limit, List<String> expand) throws ApiException {
        ApiResponse<SearchPageResponseSearchResult> resp = searchUserWithHttpInfo(cql, start, limit, expand);
        return resp.getData();
    }

    /**
     * Search users
     * Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search/user&#x60; endpoint only support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.  Note that some user fields may be set to null depending on the user&#x27;s privacy settings. These are: email, profilePicture, displayName, and timeZone.
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql&#x3D;type&#x3D;user will return all users           cql&#x3D;user&#x3D;\&quot;1234\&quot; will return user with accountId \&quot;1234\&quot;           You can also use IN, NOT IN, !&#x3D; operators           cql&#x3D;user IN (\&quot;12\&quot;, \&quot;34\&quot;) will return users with accountids \&quot;12\&quot; and \&quot;34\&quot;           cql&#x3D;user.fullname~jo will return users with nickname/full name starting with \&quot;jo\&quot;           cql&#x3D;user.accountid&#x3D;\&quot;123\&quot; will return user with accountId \&quot;123\&quot; (required)
     * @param start The starting index of the returned users. (optional, default to 0)
     * @param limit The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the user to expand.  - &#x60;operations&#x60; returns the operations for the user, which are used when setting permissions. - &#x60;personalSpace&#x60; returns the personal space of the user. (optional)
     * @return ApiResponse&lt;SearchPageResponseSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchPageResponseSearchResult> searchUserWithHttpInfo(String cql, Integer start, Integer limit, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = searchUserValidateBeforeCall(cql, start, limit, expand, null, null);
        Type localVarReturnType = new TypeToken<SearchPageResponseSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search users (asynchronously)
     * Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search/user&#x60; endpoint only support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.  Note that some user fields may be set to null depending on the user&#x27;s privacy settings. These are: email, profilePicture, displayName, and timeZone.
     * @param cql The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql&#x3D;type&#x3D;user will return all users           cql&#x3D;user&#x3D;\&quot;1234\&quot; will return user with accountId \&quot;1234\&quot;           You can also use IN, NOT IN, !&#x3D; operators           cql&#x3D;user IN (\&quot;12\&quot;, \&quot;34\&quot;) will return users with accountids \&quot;12\&quot; and \&quot;34\&quot;           cql&#x3D;user.fullname~jo will return users with nickname/full name starting with \&quot;jo\&quot;           cql&#x3D;user.accountid&#x3D;\&quot;123\&quot; will return user with accountId \&quot;123\&quot; (required)
     * @param start The starting index of the returned users. (optional, default to 0)
     * @param limit The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param expand A multi-value parameter indicating which properties of the user to expand.  - &#x60;operations&#x60; returns the operations for the user, which are used when setting permissions. - &#x60;personalSpace&#x60; returns the personal space of the user. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUserAsync(String cql, Integer start, Integer limit, List<String> expand, final ApiCallback<SearchPageResponseSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUserValidateBeforeCall(cql, start, limit, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchPageResponseSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
