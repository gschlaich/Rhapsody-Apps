/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Relation;
import io.swagger.client.model.RelationArray;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationApi {
    private ApiClient apiClient;

    public RelationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRelationship
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRelationshipCall(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}"
            .replaceAll("\\{" + "relationName" + "\\}", apiClient.escapeString(relationName.toString()))
            .replaceAll("\\{" + "sourceType" + "\\}", apiClient.escapeString(sourceType.toString()))
            .replaceAll("\\{" + "sourceKey" + "\\}", apiClient.escapeString(sourceKey.toString()))
            .replaceAll("\\{" + "targetType" + "\\}", apiClient.escapeString(targetType.toString()))
            .replaceAll("\\{" + "targetKey" + "\\}", apiClient.escapeString(targetKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceStatus", sourceStatus));
        if (targetStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetStatus", targetStatus));
        if (sourceVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceVersion", sourceVersion));
        if (targetVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetVersion", targetVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRelationshipValidateBeforeCall(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'relationName' is set
        if (relationName == null) {
            throw new ApiException("Missing the required parameter 'relationName' when calling createRelationship(Async)");
        }
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling createRelationship(Async)");
        }
        // verify the required parameter 'sourceKey' is set
        if (sourceKey == null) {
            throw new ApiException("Missing the required parameter 'sourceKey' when calling createRelationship(Async)");
        }
        // verify the required parameter 'targetType' is set
        if (targetType == null) {
            throw new ApiException("Missing the required parameter 'targetType' when calling createRelationship(Async)");
        }
        // verify the required parameter 'targetKey' is set
        if (targetKey == null) {
            throw new ApiException("Missing the required parameter 'targetKey' when calling createRelationship(Async)");
        }
        
        com.squareup.okhttp.Call call = createRelationshipCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create relationship
     * Creates a relationship between two entities (user, space, content). The &#x27;favourite&#x27; relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a &#x27;sibling&#x27; relationship between two pieces of content: &#x60;GET /wiki/rest/api/relation/sibling/from/content/123/to/content/456&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission).
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Relation createRelationship(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion) throws ApiException {
        ApiResponse<Relation> resp = createRelationshipWithHttpInfo(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion);
        return resp.getData();
    }

    /**
     * Create relationship
     * Creates a relationship between two entities (user, space, content). The &#x27;favourite&#x27; relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a &#x27;sibling&#x27; relationship between two pieces of content: &#x60;GET /wiki/rest/api/relation/sibling/from/content/123/to/content/456&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission).
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Relation> createRelationshipWithHttpInfo(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion) throws ApiException {
        com.squareup.okhttp.Call call = createRelationshipValidateBeforeCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, null, null);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create relationship (asynchronously)
     * Creates a relationship between two entities (user, space, content). The &#x27;favourite&#x27; relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a &#x27;sibling&#x27; relationship between two pieces of content: &#x60;GET /wiki/rest/api/relation/sibling/from/content/123/to/content/456&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission).
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRelationshipAsync(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, final ApiCallback<Relation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRelationshipValidateBeforeCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRelationship
     * @param relationName The name of the relationship. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRelationshipCall(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}"
            .replaceAll("\\{" + "relationName" + "\\}", apiClient.escapeString(relationName.toString()))
            .replaceAll("\\{" + "sourceType" + "\\}", apiClient.escapeString(sourceType.toString()))
            .replaceAll("\\{" + "sourceKey" + "\\}", apiClient.escapeString(sourceKey.toString()))
            .replaceAll("\\{" + "targetType" + "\\}", apiClient.escapeString(targetType.toString()))
            .replaceAll("\\{" + "targetKey" + "\\}", apiClient.escapeString(targetKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceStatus", sourceStatus));
        if (targetStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetStatus", targetStatus));
        if (sourceVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceVersion", sourceVersion));
        if (targetVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetVersion", targetVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRelationshipValidateBeforeCall(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'relationName' is set
        if (relationName == null) {
            throw new ApiException("Missing the required parameter 'relationName' when calling deleteRelationship(Async)");
        }
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling deleteRelationship(Async)");
        }
        // verify the required parameter 'sourceKey' is set
        if (sourceKey == null) {
            throw new ApiException("Missing the required parameter 'sourceKey' when calling deleteRelationship(Async)");
        }
        // verify the required parameter 'targetType' is set
        if (targetType == null) {
            throw new ApiException("Missing the required parameter 'targetType' when calling deleteRelationship(Async)");
        }
        // verify the required parameter 'targetKey' is set
        if (targetKey == null) {
            throw new ApiException("Missing the required parameter 'targetKey' when calling deleteRelationship(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRelationshipCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete relationship
     * Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.
     * @param relationName The name of the relationship. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRelationship(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion) throws ApiException {
        deleteRelationshipWithHttpInfo(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion);
    }

    /**
     * Delete relationship
     * Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.
     * @param relationName The name of the relationship. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRelationshipWithHttpInfo(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteRelationshipValidateBeforeCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete relationship (asynchronously)
     * Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.
     * @param relationName The name of the relationship. (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey - The identifier for the target entity:  - If &#x60;sourceType&#x60; is &#x27;user&#x27;, then specify either &#x27;current&#x27; (logged-in   user) or the user key. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRelationshipAsync(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRelationshipValidateBeforeCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for findSourcesForTarget
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSourcesForTargetCall(String relationName, String sourceType, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/relation/{relationName}/to/{targetType}/{targetKey}/from/{sourceType}"
            .replaceAll("\\{" + "relationName" + "\\}", apiClient.escapeString(relationName.toString()))
            .replaceAll("\\{" + "sourceType" + "\\}", apiClient.escapeString(sourceType.toString()))
            .replaceAll("\\{" + "targetType" + "\\}", apiClient.escapeString(targetType.toString()))
            .replaceAll("\\{" + "targetKey" + "\\}", apiClient.escapeString(targetKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceStatus", sourceStatus));
        if (targetStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetStatus", targetStatus));
        if (sourceVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceVersion", sourceVersion));
        if (targetVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetVersion", targetVersion));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSourcesForTargetValidateBeforeCall(String relationName, String sourceType, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'relationName' is set
        if (relationName == null) {
            throw new ApiException("Missing the required parameter 'relationName' when calling findSourcesForTarget(Async)");
        }
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling findSourcesForTarget(Async)");
        }
        // verify the required parameter 'targetType' is set
        if (targetType == null) {
            throw new ApiException("Missing the required parameter 'targetType' when calling findSourcesForTarget(Async)");
        }
        // verify the required parameter 'targetKey' is set
        if (targetKey == null) {
            throw new ApiException("Missing the required parameter 'targetKey' when calling findSourcesForTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = findSourcesForTargetCall(relationName, sourceType, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find source entities related to a target entity
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a &#x27;collaborator&#x27; relationship to a piece of content with an ID of &#x27;1234&#x27;: &#x60;GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user&#x60; Note, &#x27;collaborator&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return RelationArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelationArray findSourcesForTarget(String relationName, String sourceType, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<RelationArray> resp = findSourcesForTargetWithHttpInfo(relationName, sourceType, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit);
        return resp.getData();
    }

    /**
     * Find source entities related to a target entity
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a &#x27;collaborator&#x27; relationship to a piece of content with an ID of &#x27;1234&#x27;: &#x60;GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user&#x60; Note, &#x27;collaborator&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return ApiResponse&lt;RelationArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelationArray> findSourcesForTargetWithHttpInfo(String relationName, String sourceType, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = findSourcesForTargetValidateBeforeCall(relationName, sourceType, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<RelationArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find source entities related to a target entity (asynchronously)
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a &#x27;collaborator&#x27; relationship to a piece of content with an ID of &#x27;1234&#x27;: &#x60;GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user&#x60; Note, &#x27;collaborator&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSourcesForTargetAsync(String relationName, String sourceType, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit, final ApiCallback<RelationArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSourcesForTargetValidateBeforeCall(relationName, sourceType, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelationArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findTargetFromSource
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param sourceKey The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findTargetFromSourceCall(String relationName, String sourceType, String sourceKey, String targetType, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}"
            .replaceAll("\\{" + "relationName" + "\\}", apiClient.escapeString(relationName.toString()))
            .replaceAll("\\{" + "sourceType" + "\\}", apiClient.escapeString(sourceType.toString()))
            .replaceAll("\\{" + "sourceKey" + "\\}", apiClient.escapeString(sourceKey.toString()))
            .replaceAll("\\{" + "targetType" + "\\}", apiClient.escapeString(targetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceStatus", sourceStatus));
        if (targetStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetStatus", targetStatus));
        if (sourceVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceVersion", sourceVersion));
        if (targetVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetVersion", targetVersion));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findTargetFromSourceValidateBeforeCall(String relationName, String sourceType, String sourceKey, String targetType, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'relationName' is set
        if (relationName == null) {
            throw new ApiException("Missing the required parameter 'relationName' when calling findTargetFromSource(Async)");
        }
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling findTargetFromSource(Async)");
        }
        // verify the required parameter 'sourceKey' is set
        if (sourceKey == null) {
            throw new ApiException("Missing the required parameter 'sourceKey' when calling findTargetFromSource(Async)");
        }
        // verify the required parameter 'targetType' is set
        if (targetType == null) {
            throw new ApiException("Missing the required parameter 'targetType' when calling findTargetFromSource(Async)");
        }
        
        com.squareup.okhttp.Call call = findTargetFromSourceCall(relationName, sourceType, sourceKey, targetType, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find target entities related to a source entity
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an &#x27;ignore&#x27; relationship with: &#x60;GET /wiki/rest/api/relation/ignore/from/user/current/to/content&#x60; Note, &#x27;ignore&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param sourceKey The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return RelationArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelationArray findTargetFromSource(String relationName, String sourceType, String sourceKey, String targetType, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<RelationArray> resp = findTargetFromSourceWithHttpInfo(relationName, sourceType, sourceKey, targetType, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit);
        return resp.getData();
    }

    /**
     * Find target entities related to a source entity
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an &#x27;ignore&#x27; relationship with: &#x60;GET /wiki/rest/api/relation/ignore/from/user/current/to/content&#x60; Note, &#x27;ignore&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param sourceKey The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @return ApiResponse&lt;RelationArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelationArray> findTargetFromSourceWithHttpInfo(String relationName, String sourceType, String sourceKey, String targetType, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = findTargetFromSourceValidateBeforeCall(relationName, sourceType, sourceKey, targetType, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<RelationArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find target entities related to a source entity (asynchronously)
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an &#x27;ignore&#x27; relationship with: &#x60;GET /wiki/rest/api/relation/ignore/from/user/current/to/content&#x60; Note, &#x27;ignore&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support &#x27;like&#x27; or &#x27;favourite&#x27; relationships. (required)
     * @param sourceType The source entity type of the relationship. (required)
     * @param sourceKey The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param start The starting index of the returned relationships. (optional, default to 0)
     * @param limit The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTargetFromSourceAsync(String relationName, String sourceType, String sourceKey, String targetType, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, Integer start, Integer limit, final ApiCallback<RelationArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTargetFromSourceValidateBeforeCall(relationName, sourceType, sourceKey, targetType, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelationArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRelationship
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRelationshipCall(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}"
            .replaceAll("\\{" + "relationName" + "\\}", apiClient.escapeString(relationName.toString()))
            .replaceAll("\\{" + "sourceType" + "\\}", apiClient.escapeString(sourceType.toString()))
            .replaceAll("\\{" + "sourceKey" + "\\}", apiClient.escapeString(sourceKey.toString()))
            .replaceAll("\\{" + "targetType" + "\\}", apiClient.escapeString(targetType.toString()))
            .replaceAll("\\{" + "targetKey" + "\\}", apiClient.escapeString(targetKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceStatus", sourceStatus));
        if (targetStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetStatus", targetStatus));
        if (sourceVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceVersion", sourceVersion));
        if (targetVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetVersion", targetVersion));
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRelationshipValidateBeforeCall(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'relationName' is set
        if (relationName == null) {
            throw new ApiException("Missing the required parameter 'relationName' when calling getRelationship(Async)");
        }
        // verify the required parameter 'sourceType' is set
        if (sourceType == null) {
            throw new ApiException("Missing the required parameter 'sourceType' when calling getRelationship(Async)");
        }
        // verify the required parameter 'sourceKey' is set
        if (sourceKey == null) {
            throw new ApiException("Missing the required parameter 'sourceKey' when calling getRelationship(Async)");
        }
        // verify the required parameter 'targetType' is set
        if (targetType == null) {
            throw new ApiException("Missing the required parameter 'targetType' when calling getRelationship(Async)");
        }
        // verify the required parameter 'targetKey' is set
        if (targetKey == null) {
            throw new ApiException("Missing the required parameter 'targetKey' when calling getRelationship(Async)");
        }
        
        com.squareup.okhttp.Call call = getRelationshipCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find relationship from source to target
     * Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. &#x27;save for later&#x27;): &#x60;GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Relation getRelationship(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand) throws ApiException {
        ApiResponse<Relation> resp = getRelationshipWithHttpInfo(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand);
        return resp.getData();
    }

    /**
     * Find relationship from source to target
     * Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. &#x27;save for later&#x27;): &#x60;GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Relation> getRelationshipWithHttpInfo(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = getRelationshipValidateBeforeCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, null, null);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find relationship from source to target (asynchronously)
     * Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. &#x27;save for later&#x27;): &#x60;GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     * @param relationName The name of the relationship. This method supports the &#x27;favourite&#x27; (i.e. &#x27;save for later&#x27;) relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
     * @param sourceType The source entity type of the relationship. This must be &#x27;user&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param sourceKey - The identifier for the source entity:  - If &#x60;sourceType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;sourceType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;sourceType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param targetType The target entity type of the relationship. This must be &#x27;space&#x27; or &#x27;content&#x27;, if the &#x60;relationName&#x60; is &#x27;favourite&#x27;. (required)
     * @param targetKey The identifier for the target entity:  - If &#x60;targetType&#x60; is &#x60;user&#x60;, then specify either &#x60;current&#x60; (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If &#x60;targetType&#x60; is &#x27;content&#x27;, then specify the content ID. - If &#x60;targetType&#x60; is &#x27;space&#x27;, then specify the space key. (required)
     * @param sourceStatus The status of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27;. (optional)
     * @param targetStatus The status of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27;. (optional)
     * @param sourceVersion The version of the source. This parameter is only used when the &#x60;sourceType&#x60; is &#x27;content&#x27; and the &#x60;sourceStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param targetVersion The version of the target. This parameter is only used when the &#x60;targetType&#x60; is &#x27;content&#x27; and the &#x60;targetStatus&#x60; is &#x27;historical&#x27;. (optional)
     * @param expand A multi-value parameter indicating which properties of the response object to expand.  - &#x60;relationData&#x60; returns information about the relationship, such as who created it and when it was created. - &#x60;source&#x60; returns the source entity. - &#x60;target&#x60; returns the target entity. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRelationshipAsync(String relationName, String sourceType, String sourceKey, String targetType, String targetKey, String sourceStatus, String targetStatus, Integer sourceVersion, Integer targetVersion, List<String> expand, final ApiCallback<Relation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRelationshipValidateBeforeCall(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
