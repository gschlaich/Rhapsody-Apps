/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SpaceProperty;
import io.swagger.client.model.SpacePropertyArray;
import io.swagger.client.model.SpacePropertyCreate;
import io.swagger.client.model.SpacePropertyCreateNoKey;
import io.swagger.client.model.SpacePropertyUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpacePropertiesApi {
    private ApiClient apiClient;

    public SpacePropertiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpacePropertiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSpaceProperty
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpacePropertyCall(SpacePropertyCreate body, String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/property"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSpacePropertyValidateBeforeCall(SpacePropertyCreate body, String spaceKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSpaceProperty(Async)");
        }
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling createSpaceProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = createSpacePropertyCall(body, spaceKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @return SpaceProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceProperty createSpaceProperty(SpacePropertyCreate body, String spaceKey) throws ApiException {
        ApiResponse<SpaceProperty> resp = createSpacePropertyWithHttpInfo(body, spaceKey);
        return resp.getData();
    }

    /**
     * Create space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @return ApiResponse&lt;SpaceProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceProperty> createSpacePropertyWithHttpInfo(SpacePropertyCreate body, String spaceKey) throws ApiException {
        com.squareup.okhttp.Call call = createSpacePropertyValidateBeforeCall(body, spaceKey, null, null);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create space property (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpacePropertyAsync(SpacePropertyCreate body, String spaceKey, final ApiCallback<SpaceProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpacePropertyValidateBeforeCall(body, spaceKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSpacePropertyForKey
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @param key The key of the property to be created. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpacePropertyForKeyCall(SpacePropertyCreateNoKey body, String spaceKey, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/property/{key}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSpacePropertyForKeyValidateBeforeCall(SpacePropertyCreateNoKey body, String spaceKey, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSpacePropertyForKey(Async)");
        }
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling createSpacePropertyForKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createSpacePropertyForKey(Async)");
        }
        
        com.squareup.okhttp.Call call = createSpacePropertyForKeyCall(body, spaceKey, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create space property for key
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new space property. This is the same as &#x60;POST /wiki/rest/api/space/{spaceKey}/property&#x60; but the key for the property is passed as a path parameter, rather than in the request body.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @param key The key of the property to be created. (required)
     * @return SpaceProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceProperty createSpacePropertyForKey(SpacePropertyCreateNoKey body, String spaceKey, String key) throws ApiException {
        ApiResponse<SpaceProperty> resp = createSpacePropertyForKeyWithHttpInfo(body, spaceKey, key);
        return resp.getData();
    }

    /**
     * Create space property for key
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new space property. This is the same as &#x60;POST /wiki/rest/api/space/{spaceKey}/property&#x60; but the key for the property is passed as a path parameter, rather than in the request body.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @param key The key of the property to be created. (required)
     * @return ApiResponse&lt;SpaceProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceProperty> createSpacePropertyForKeyWithHttpInfo(SpacePropertyCreateNoKey body, String spaceKey, String key) throws ApiException {
        com.squareup.okhttp.Call call = createSpacePropertyForKeyValidateBeforeCall(body, spaceKey, key, null, null);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create space property for key (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new space property. This is the same as &#x60;POST /wiki/rest/api/space/{spaceKey}/property&#x60; but the key for the property is passed as a path parameter, rather than in the request body.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property to be created. (required)
     * @param spaceKey The key of the space that the property will be created in. (required)
     * @param key The key of the property to be created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpacePropertyForKeyAsync(SpacePropertyCreateNoKey body, String spaceKey, String key, final ApiCallback<SpaceProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpacePropertyForKeyValidateBeforeCall(body, spaceKey, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpaceProperty
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpacePropertyCall(String spaceKey, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/property/{key}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSpacePropertyValidateBeforeCall(String spaceKey, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling deleteSpaceProperty(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteSpaceProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSpacePropertyCall(spaceKey, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Deletes a space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSpaceProperty(String spaceKey, String key) throws ApiException {
        deleteSpacePropertyWithHttpInfo(spaceKey, key);
    }

    /**
     * Delete space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Deletes a space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSpacePropertyWithHttpInfo(String spaceKey, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpacePropertyValidateBeforeCall(spaceKey, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete space property (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Deletes a space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpacePropertyAsync(String spaceKey, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpacePropertyValidateBeforeCall(spaceKey, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getSpaceProperties
     * @param spaceKey The key of the space to be queried for its properties. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @param start The starting index of the returned objects. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpacePropertiesCall(String spaceKey, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/property"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSpacePropertiesValidateBeforeCall(String spaceKey, List<String> expand, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getSpaceProperties(Async)");
        }
        
        com.squareup.okhttp.Call call = getSpacePropertiesCall(spaceKey, expand, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get space properties
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all properties for the given space. Space properties are a key-value storage associated with a space.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * @param spaceKey The key of the space to be queried for its properties. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @param start The starting index of the returned objects. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @return SpacePropertyArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpacePropertyArray getSpaceProperties(String spaceKey, List<String> expand, Integer start, Integer limit) throws ApiException {
        ApiResponse<SpacePropertyArray> resp = getSpacePropertiesWithHttpInfo(spaceKey, expand, start, limit);
        return resp.getData();
    }

    /**
     * Get space properties
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all properties for the given space. Space properties are a key-value storage associated with a space.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * @param spaceKey The key of the space to be queried for its properties. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @param start The starting index of the returned objects. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @return ApiResponse&lt;SpacePropertyArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpacePropertyArray> getSpacePropertiesWithHttpInfo(String spaceKey, List<String> expand, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getSpacePropertiesValidateBeforeCall(spaceKey, expand, start, limit, null, null);
        Type localVarReturnType = new TypeToken<SpacePropertyArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get space properties (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all properties for the given space. Space properties are a key-value storage associated with a space.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * @param spaceKey The key of the space to be queried for its properties. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @param start The starting index of the returned objects. (optional, default to 0)
     * @param limit The maximum number of properties to return per page. Note, this may be restricted by fixed system limits. (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpacePropertiesAsync(String spaceKey, List<String> expand, Integer start, Integer limit, final ApiCallback<SpacePropertyArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpacePropertiesValidateBeforeCall(spaceKey, expand, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpacePropertyArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSpaceProperty
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the space property. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpacePropertyCall(String spaceKey, String key, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/property/{key}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSpacePropertyValidateBeforeCall(String spaceKey, String key, List<String> expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling getSpaceProperty(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSpaceProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = getSpacePropertyCall(spaceKey, key, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the space property. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @return SpaceProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceProperty getSpaceProperty(String spaceKey, String key, List<String> expand) throws ApiException {
        ApiResponse<SpaceProperty> resp = getSpacePropertyWithHttpInfo(spaceKey, key, expand);
        return resp.getData();
    }

    /**
     * Get space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the space property. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @return ApiResponse&lt;SpaceProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceProperty> getSpacePropertyWithHttpInfo(String spaceKey, String key, List<String> expand) throws ApiException {
        com.squareup.okhttp.Call call = getSpacePropertyValidateBeforeCall(spaceKey, key, expand, null, null);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get space property (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a space property.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the space property. (required)
     * @param expand A multi-value parameter indicating which properties of the space property to expand. By default, the &#x60;version&#x60; object is expanded.  - &#x60;version&#x60; returns information about the version of the content. - &#x60;space&#x60; returns the space that the properties are in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpacePropertyAsync(String spaceKey, String key, List<String> expand, final ApiCallback<SpaceProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpacePropertyValidateBeforeCall(spaceKey, key, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSpaceProperty
     * @param body The space property being updated. (required)
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpacePropertyCall(SpacePropertyUpdate body, String spaceKey, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/wiki/rest/api/space/{spaceKey}/property/{key}"
            .replaceAll("\\{" + "spaceKey" + "\\}", apiClient.escapeString(spaceKey.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "oAuthDefinitions" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSpacePropertyValidateBeforeCall(SpacePropertyUpdate body, String spaceKey, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSpaceProperty(Async)");
        }
        // verify the required parameter 'spaceKey' is set
        if (spaceKey == null) {
            throw new ApiException("Missing the required parameter 'spaceKey' when calling updateSpaceProperty(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateSpaceProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSpacePropertyCall(body, spaceKey, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Updates a space property. Note, you cannot update the key of a space property, only the value.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property being updated. (required)
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be updated. (required)
     * @return SpaceProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpaceProperty updateSpaceProperty(SpacePropertyUpdate body, String spaceKey, String key) throws ApiException {
        ApiResponse<SpaceProperty> resp = updateSpacePropertyWithHttpInfo(body, spaceKey, key);
        return resp.getData();
    }

    /**
     * Update space property
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Updates a space property. Note, you cannot update the key of a space property, only the value.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property being updated. (required)
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be updated. (required)
     * @return ApiResponse&lt;SpaceProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpaceProperty> updateSpacePropertyWithHttpInfo(SpacePropertyUpdate body, String spaceKey, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateSpacePropertyValidateBeforeCall(body, spaceKey, key, null, null);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update space property (asynchronously)
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Updates a space property. Note, you cannot update the key of a space property, only the value.  **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘Admin’ permission for the space.
     * @param body The space property being updated. (required)
     * @param spaceKey The key of the space that the property is in. (required)
     * @param key The key of the property to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpacePropertyAsync(SpacePropertyUpdate body, String spaceKey, String key, final ApiCallback<SpaceProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpacePropertyValidateBeforeCall(body, spaceKey, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpaceProperty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
