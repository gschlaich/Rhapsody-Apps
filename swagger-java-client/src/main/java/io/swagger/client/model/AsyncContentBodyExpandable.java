/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AsyncContentBodyExpandable
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class AsyncContentBodyExpandable {
  @SerializedName("content")
  private String content = null;

  @SerializedName("embeddedContent")
  private String embeddedContent = null;

  @SerializedName("webresource")
  private String webresource = null;

  @SerializedName("mediaToken")
  private String mediaToken = null;

  public AsyncContentBodyExpandable content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @Schema(description = "")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public AsyncContentBodyExpandable embeddedContent(String embeddedContent) {
    this.embeddedContent = embeddedContent;
    return this;
  }

   /**
   * Get embeddedContent
   * @return embeddedContent
  **/
  @Schema(description = "")
  public String getEmbeddedContent() {
    return embeddedContent;
  }

  public void setEmbeddedContent(String embeddedContent) {
    this.embeddedContent = embeddedContent;
  }

  public AsyncContentBodyExpandable webresource(String webresource) {
    this.webresource = webresource;
    return this;
  }

   /**
   * Get webresource
   * @return webresource
  **/
  @Schema(description = "")
  public String getWebresource() {
    return webresource;
  }

  public void setWebresource(String webresource) {
    this.webresource = webresource;
  }

  public AsyncContentBodyExpandable mediaToken(String mediaToken) {
    this.mediaToken = mediaToken;
    return this;
  }

   /**
   * Get mediaToken
   * @return mediaToken
  **/
  @Schema(description = "")
  public String getMediaToken() {
    return mediaToken;
  }

  public void setMediaToken(String mediaToken) {
    this.mediaToken = mediaToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncContentBodyExpandable asyncContentBodyExpandable = (AsyncContentBodyExpandable) o;
    return Objects.equals(this.content, asyncContentBodyExpandable.content) &&
        Objects.equals(this.embeddedContent, asyncContentBodyExpandable.embeddedContent) &&
        Objects.equals(this.webresource, asyncContentBodyExpandable.webresource) &&
        Objects.equals(this.mediaToken, asyncContentBodyExpandable.mediaToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, embeddedContent, webresource, mediaToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncContentBodyExpandable {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    embeddedContent: ").append(toIndentedString(embeddedContent)).append("\n");
    sb.append("    webresource: ").append(toIndentedString(webresource)).append("\n");
    sb.append("    mediaToken: ").append(toIndentedString(mediaToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
