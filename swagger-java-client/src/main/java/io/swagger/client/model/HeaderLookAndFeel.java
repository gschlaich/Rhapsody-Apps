/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ButtonLookAndFeel;
import io.swagger.client.model.NavigationLookAndFeel;
import io.swagger.client.model.SearchFieldLookAndFeel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * HeaderLookAndFeel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class HeaderLookAndFeel {
  @SerializedName("backgroundColor")
  private String backgroundColor = null;

  @SerializedName("button")
  private ButtonLookAndFeel button = null;

  @SerializedName("primaryNavigation")
  private NavigationLookAndFeel primaryNavigation = null;

  @SerializedName("secondaryNavigation")
  private NavigationLookAndFeel secondaryNavigation = null;

  @SerializedName("search")
  private SearchFieldLookAndFeel search = null;

  public HeaderLookAndFeel backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Get backgroundColor
   * @return backgroundColor
  **/
  @Schema(required = true, description = "")
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }

  public HeaderLookAndFeel button(ButtonLookAndFeel button) {
    this.button = button;
    return this;
  }

   /**
   * Get button
   * @return button
  **/
  @Schema(required = true, description = "")
  public ButtonLookAndFeel getButton() {
    return button;
  }

  public void setButton(ButtonLookAndFeel button) {
    this.button = button;
  }

  public HeaderLookAndFeel primaryNavigation(NavigationLookAndFeel primaryNavigation) {
    this.primaryNavigation = primaryNavigation;
    return this;
  }

   /**
   * Get primaryNavigation
   * @return primaryNavigation
  **/
  @Schema(required = true, description = "")
  public NavigationLookAndFeel getPrimaryNavigation() {
    return primaryNavigation;
  }

  public void setPrimaryNavigation(NavigationLookAndFeel primaryNavigation) {
    this.primaryNavigation = primaryNavigation;
  }

  public HeaderLookAndFeel secondaryNavigation(NavigationLookAndFeel secondaryNavigation) {
    this.secondaryNavigation = secondaryNavigation;
    return this;
  }

   /**
   * Get secondaryNavigation
   * @return secondaryNavigation
  **/
  @Schema(required = true, description = "")
  public NavigationLookAndFeel getSecondaryNavigation() {
    return secondaryNavigation;
  }

  public void setSecondaryNavigation(NavigationLookAndFeel secondaryNavigation) {
    this.secondaryNavigation = secondaryNavigation;
  }

  public HeaderLookAndFeel search(SearchFieldLookAndFeel search) {
    this.search = search;
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @Schema(required = true, description = "")
  public SearchFieldLookAndFeel getSearch() {
    return search;
  }

  public void setSearch(SearchFieldLookAndFeel search) {
    this.search = search;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeaderLookAndFeel headerLookAndFeel = (HeaderLookAndFeel) o;
    return Objects.equals(this.backgroundColor, headerLookAndFeel.backgroundColor) &&
        Objects.equals(this.button, headerLookAndFeel.button) &&
        Objects.equals(this.primaryNavigation, headerLookAndFeel.primaryNavigation) &&
        Objects.equals(this.secondaryNavigation, headerLookAndFeel.secondaryNavigation) &&
        Objects.equals(this.search, headerLookAndFeel.search);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, button, primaryNavigation, secondaryNavigation, search);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeaderLookAndFeel {\n");
    
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    primaryNavigation: ").append(toIndentedString(primaryNavigation)).append("\n");
    sb.append("    secondaryNavigation: ").append(toIndentedString(secondaryNavigation)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
