/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ContentStateRestInput
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentStateRestInput {
  @SerializedName("name")
  private String name = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("id")
  private Long id = null;

  public ContentStateRestInput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of content state. Maximum 20 characters.
   * @return name
  **/
  @Schema(description = "Name of content state. Maximum 20 characters.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContentStateRestInput color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Color of state. Must be in 6 digit hex form (#FFFFFF). The default colors offered in the UI are:  #ff7452 (red),  #2684ff (blue),  #ffc400 (yellow),  #57d9a3 (green), and  #8777d9 (purple)
   * @return color
  **/
  @Schema(description = "Color of state. Must be in 6 digit hex form (#FFFFFF). The default colors offered in the UI are:  #ff7452 (red),  #2684ff (blue),  #ffc400 (yellow),  #57d9a3 (green), and  #8777d9 (purple)")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public ContentStateRestInput id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * id of state. This can be 0,1, or 2 if you wish to specify a default space state.
   * @return id
  **/
  @Schema(description = "id of state. This can be 0,1, or 2 if you wish to specify a default space state.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentStateRestInput contentStateRestInput = (ContentStateRestInput) o;
    return Objects.equals(this.name, contentStateRestInput.name) &&
        Objects.equals(this.color, contentStateRestInput.color) &&
        Objects.equals(this.id, contentStateRestInput.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, color, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentStateRestInput {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
