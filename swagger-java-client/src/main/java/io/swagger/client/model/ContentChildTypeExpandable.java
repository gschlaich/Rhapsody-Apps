/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ContentChildTypeExpandable
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentChildTypeExpandable {
  @SerializedName("all")
  private Object all = null;

  @SerializedName("attachment")
  private Object attachment = null;

  @SerializedName("comment")
  private Object comment = null;

  @SerializedName("page")
  private Object page = null;

  public ContentChildTypeExpandable all(Object all) {
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @Schema(description = "")
  public Object getAll() {
    return all;
  }

  public void setAll(Object all) {
    this.all = all;
  }

  public ContentChildTypeExpandable attachment(Object attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @Schema(description = "")
  public Object getAttachment() {
    return attachment;
  }

  public void setAttachment(Object attachment) {
    this.attachment = attachment;
  }

  public ContentChildTypeExpandable comment(Object comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public Object getComment() {
    return comment;
  }

  public void setComment(Object comment) {
    this.comment = comment;
  }

  public ContentChildTypeExpandable page(Object page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @Schema(description = "")
  public Object getPage() {
    return page;
  }

  public void setPage(Object page) {
    this.page = page;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentChildTypeExpandable contentChildTypeExpandable = (ContentChildTypeExpandable) o;
    return Objects.equals(this.all, contentChildTypeExpandable.all) &&
        Objects.equals(this.attachment, contentChildTypeExpandable.attachment) &&
        Objects.equals(this.comment, contentChildTypeExpandable.comment) &&
        Objects.equals(this.page, contentChildTypeExpandable.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, attachment, comment, page);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentChildTypeExpandable {\n");
    
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
