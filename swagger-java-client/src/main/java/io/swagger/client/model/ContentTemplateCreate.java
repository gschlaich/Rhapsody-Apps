/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentTemplateBodyCreate;
import io.swagger.client.model.Label;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * This object is used to create content templates.
 */
@Schema(description = "This object is used to create content templates.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentTemplateCreate extends HashMap<String, Object> {
  @SerializedName("name")
  private String name = null;

  @SerializedName("templateType")
  private String templateType = null;

  @SerializedName("body")
  private ContentTemplateBodyCreate body = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("labels")
  private List<Label> labels = null;

  @SerializedName("space")
  private Map space = null;

  public ContentTemplateCreate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the new template.
   * @return name
  **/
  @Schema(required = true, description = "The name of the new template.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContentTemplateCreate templateType(String templateType) {
    this.templateType = templateType;
    return this;
  }

   /**
   * The type of the new template. Set to &#x60;page&#x60;.
   * @return templateType
  **/
  @Schema(required = true, description = "The type of the new template. Set to `page`.")
  public String getTemplateType() {
    return templateType;
  }

  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }

  public ContentTemplateCreate body(ContentTemplateBodyCreate body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(required = true, description = "")
  public ContentTemplateBodyCreate getBody() {
    return body;
  }

  public void setBody(ContentTemplateBodyCreate body) {
    this.body = body;
  }

  public ContentTemplateCreate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the new template.
   * @return description
  **/
  @Schema(description = "A description of the new template.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ContentTemplateCreate labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public ContentTemplateCreate addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<Label>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Labels for the new template.
   * @return labels
  **/
  @Schema(description = "Labels for the new template.")
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }

  public ContentTemplateCreate space(Map space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @Schema(description = "")
  public Map getSpace() {
    return space;
  }

  public void setSpace(Map space) {
    this.space = space;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentTemplateCreate contentTemplateCreate = (ContentTemplateCreate) o;
    return Objects.equals(this.name, contentTemplateCreate.name) &&
        Objects.equals(this.templateType, contentTemplateCreate.templateType) &&
        Objects.equals(this.body, contentTemplateCreate.body) &&
        Objects.equals(this.description, contentTemplateCreate.description) &&
        Objects.equals(this.labels, contentTemplateCreate.labels) &&
        Objects.equals(this.space, contentTemplateCreate.space) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, templateType, body, description, labels, space, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentTemplateCreate {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
