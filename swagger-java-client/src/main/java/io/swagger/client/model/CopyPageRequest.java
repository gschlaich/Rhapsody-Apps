/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CopyPageRequestBody;
import io.swagger.client.model.CopyPageRequestDestination;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CopyPageRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class CopyPageRequest {
  @SerializedName("copyAttachments")
  private Boolean copyAttachments = false;

  @SerializedName("copyPermissions")
  private Boolean copyPermissions = false;

  @SerializedName("copyProperties")
  private Boolean copyProperties = false;

  @SerializedName("copyLabels")
  private Boolean copyLabels = false;

  @SerializedName("copyCustomContents")
  private Boolean copyCustomContents = false;

  @SerializedName("destination")
  private CopyPageRequestDestination destination = null;

  @SerializedName("pageTitle")
  private String pageTitle = null;

  @SerializedName("body")
  private CopyPageRequestBody body = null;

  public CopyPageRequest copyAttachments(Boolean copyAttachments) {
    this.copyAttachments = copyAttachments;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, attachments are copied to the destination page.
   * @return copyAttachments
  **/
  @Schema(description = "If set to `true`, attachments are copied to the destination page.")
  public Boolean isCopyAttachments() {
    return copyAttachments;
  }

  public void setCopyAttachments(Boolean copyAttachments) {
    this.copyAttachments = copyAttachments;
  }

  public CopyPageRequest copyPermissions(Boolean copyPermissions) {
    this.copyPermissions = copyPermissions;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, page permissions are copied to the destination page.
   * @return copyPermissions
  **/
  @Schema(description = "If set to `true`, page permissions are copied to the destination page.")
  public Boolean isCopyPermissions() {
    return copyPermissions;
  }

  public void setCopyPermissions(Boolean copyPermissions) {
    this.copyPermissions = copyPermissions;
  }

  public CopyPageRequest copyProperties(Boolean copyProperties) {
    this.copyProperties = copyProperties;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, content properties are copied to the destination page.
   * @return copyProperties
  **/
  @Schema(description = "If set to `true`, content properties are copied to the destination page.")
  public Boolean isCopyProperties() {
    return copyProperties;
  }

  public void setCopyProperties(Boolean copyProperties) {
    this.copyProperties = copyProperties;
  }

  public CopyPageRequest copyLabels(Boolean copyLabels) {
    this.copyLabels = copyLabels;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, labels are copied to the destination page.
   * @return copyLabels
  **/
  @Schema(description = "If set to `true`, labels are copied to the destination page.")
  public Boolean isCopyLabels() {
    return copyLabels;
  }

  public void setCopyLabels(Boolean copyLabels) {
    this.copyLabels = copyLabels;
  }

  public CopyPageRequest copyCustomContents(Boolean copyCustomContents) {
    this.copyCustomContents = copyCustomContents;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, custom contents are copied to the destination page.
   * @return copyCustomContents
  **/
  @Schema(description = "If set to `true`, custom contents are copied to the destination page.")
  public Boolean isCopyCustomContents() {
    return copyCustomContents;
  }

  public void setCopyCustomContents(Boolean copyCustomContents) {
    this.copyCustomContents = copyCustomContents;
  }

  public CopyPageRequest destination(CopyPageRequestDestination destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @Schema(required = true, description = "")
  public CopyPageRequestDestination getDestination() {
    return destination;
  }

  public void setDestination(CopyPageRequestDestination destination) {
    this.destination = destination;
  }

  public CopyPageRequest pageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
    return this;
  }

   /**
   * If defined, this will replace the title of the destination page.
   * @return pageTitle
  **/
  @Schema(description = "If defined, this will replace the title of the destination page.")
  public String getPageTitle() {
    return pageTitle;
  }

  public void setPageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
  }

  public CopyPageRequest body(CopyPageRequestBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(description = "")
  public CopyPageRequestBody getBody() {
    return body;
  }

  public void setBody(CopyPageRequestBody body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyPageRequest copyPageRequest = (CopyPageRequest) o;
    return Objects.equals(this.copyAttachments, copyPageRequest.copyAttachments) &&
        Objects.equals(this.copyPermissions, copyPageRequest.copyPermissions) &&
        Objects.equals(this.copyProperties, copyPageRequest.copyProperties) &&
        Objects.equals(this.copyLabels, copyPageRequest.copyLabels) &&
        Objects.equals(this.copyCustomContents, copyPageRequest.copyCustomContents) &&
        Objects.equals(this.destination, copyPageRequest.destination) &&
        Objects.equals(this.pageTitle, copyPageRequest.pageTitle) &&
        Objects.equals(this.body, copyPageRequest.body);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyAttachments, copyPermissions, copyProperties, copyLabels, copyCustomContents, destination, pageTitle, body);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyPageRequest {\n");
    
    sb.append("    copyAttachments: ").append(toIndentedString(copyAttachments)).append("\n");
    sb.append("    copyPermissions: ").append(toIndentedString(copyPermissions)).append("\n");
    sb.append("    copyProperties: ").append(toIndentedString(copyProperties)).append("\n");
    sb.append("    copyLabels: ").append(toIndentedString(copyLabels)).append("\n");
    sb.append("    copyCustomContents: ").append(toIndentedString(copyCustomContents)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
