/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentCreateBody;
import io.swagger.client.model.ContentCreateSpace;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ContentCreate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentCreate extends HashMap<String, Object> {
  @SerializedName("id")
  private String id = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("space")
  private ContentCreateSpace space = null;

  /**
   * The status of the new content.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CURRENT("current"),
    DELETED("deleted"),
    HISTORICAL("historical"),
    DRAFT("draft");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = StatusEnum.CURRENT;

  @SerializedName("container")
  private Map container = null;

  @SerializedName("ancestors")
  private List<Map> ancestors = null;

  @SerializedName("body")
  private ContentCreateBody body = null;

  public ContentCreate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the draft content. Required when publishing a draft.
   * @return id
  **/
  @Schema(description = "The ID of the draft content. Required when publishing a draft.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ContentCreate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @Schema(description = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ContentCreate type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the new content. Custom content types defined by apps are also supported. eg. &#x27;page&#x27;, &#x27;blogpost&#x27;, &#x27;comment&#x27; etc.
   * @return type
  **/
  @Schema(required = true, description = "The type of the new content. Custom content types defined by apps are also supported. eg. 'page', 'blogpost', 'comment' etc.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ContentCreate space(ContentCreateSpace space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @Schema(description = "")
  public ContentCreateSpace getSpace() {
    return space;
  }

  public void setSpace(ContentCreateSpace space) {
    this.space = space;
  }

  public ContentCreate status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the new content.
   * @return status
  **/
  @Schema(description = "The status of the new content.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ContentCreate container(Map container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @Schema(description = "")
  public Map getContainer() {
    return container;
  }

  public void setContainer(Map container) {
    this.container = container;
  }

  public ContentCreate ancestors(List<Map> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public ContentCreate addAncestorsItem(Map ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<Map>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * The parent content of the new content.  If you are creating a top-level &#x60;page&#x60; or &#x60;comment&#x60;, this can be left blank. If you are creating a child page, this is where the parent page id goes. If you are creating a child comment, this is where the parent comment id goes. Only one parent content id can be specified.
   * @return ancestors
  **/
  @Schema(description = "The parent content of the new content.  If you are creating a top-level `page` or `comment`, this can be left blank. If you are creating a child page, this is where the parent page id goes. If you are creating a child comment, this is where the parent comment id goes. Only one parent content id can be specified.")
  public List<Map> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<Map> ancestors) {
    this.ancestors = ancestors;
  }

  public ContentCreate body(ContentCreateBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(description = "")
  public ContentCreateBody getBody() {
    return body;
  }

  public void setBody(ContentCreateBody body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentCreate contentCreate = (ContentCreate) o;
    return Objects.equals(this.id, contentCreate.id) &&
        Objects.equals(this.title, contentCreate.title) &&
        Objects.equals(this.type, contentCreate.type) &&
        Objects.equals(this.space, contentCreate.space) &&
        Objects.equals(this.status, contentCreate.status) &&
        Objects.equals(this.container, contentCreate.container) &&
        Objects.equals(this.ancestors, contentCreate.ancestors) &&
        Objects.equals(this.body, contentCreate.body) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, type, space, status, container, ancestors, body, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentCreate {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
