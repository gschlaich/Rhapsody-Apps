/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
/**
 * This object is used when creating or updating content.
 */
@Schema(description = "This object is used when creating or updating content.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentBodyCreateStorage extends HashMap<String, Object> {
  @SerializedName("value")
  private String value = null;

  /**
   * The content format type. Set the value of this property to the name of the format being used, e.g. &#x27;storage&#x27;.
   */
  @JsonAdapter(RepresentationEnum.Adapter.class)
  public enum RepresentationEnum {
    STORAGE("storage"),
    VIEW("view"),
    EXPORT_VIEW("export_view"),
    STYLED_VIEW("styled_view"),
    EDITOR("editor"),
    EDITOR2("editor2"),
    ANONYMOUS_EXPORT_VIEW("anonymous_export_view"),
    WIKI("wiki"),
    ATLAS_DOC_FORMAT("atlas_doc_format");

    private String value;

    RepresentationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RepresentationEnum fromValue(String input) {
      for (RepresentationEnum b : RepresentationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RepresentationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepresentationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RepresentationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RepresentationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("representation")
  private RepresentationEnum representation = null;

  public ContentBodyCreateStorage value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The body of the content in the relevant format.
   * @return value
  **/
  @Schema(required = true, description = "The body of the content in the relevant format.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public ContentBodyCreateStorage representation(RepresentationEnum representation) {
    this.representation = representation;
    return this;
  }

   /**
   * The content format type. Set the value of this property to the name of the format being used, e.g. &#x27;storage&#x27;.
   * @return representation
  **/
  @Schema(required = true, description = "The content format type. Set the value of this property to the name of the format being used, e.g. 'storage'.")
  public RepresentationEnum getRepresentation() {
    return representation;
  }

  public void setRepresentation(RepresentationEnum representation) {
    this.representation = representation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentBodyCreateStorage contentBodyCreateStorage = (ContentBodyCreateStorage) o;
    return Objects.equals(this.value, contentBodyCreateStorage.value) &&
        Objects.equals(this.representation, contentBodyCreateStorage.representation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, representation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentBodyCreateStorage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    representation: ").append(toIndentedString(representation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
