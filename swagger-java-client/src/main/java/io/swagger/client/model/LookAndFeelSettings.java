/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LookAndFeel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LookAndFeelSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class LookAndFeelSettings {
  /**
   * Gets or Sets selected
   */
  @JsonAdapter(SelectedEnum.Adapter.class)
  public enum SelectedEnum {
    GLOBAL("global"),
    CUSTOM("custom");

    private String value;

    SelectedEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SelectedEnum fromValue(String input) {
      for (SelectedEnum b : SelectedEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SelectedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectedEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SelectedEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SelectedEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("selected")
  private SelectedEnum selected = null;

  @SerializedName("global")
  private LookAndFeel global = null;

  @SerializedName("theme")
  private LookAndFeel theme = null;

  @SerializedName("custom")
  private LookAndFeel custom = null;

  public LookAndFeelSettings selected(SelectedEnum selected) {
    this.selected = selected;
    return this;
  }

   /**
   * Get selected
   * @return selected
  **/
  @Schema(required = true, description = "")
  public SelectedEnum getSelected() {
    return selected;
  }

  public void setSelected(SelectedEnum selected) {
    this.selected = selected;
  }

  public LookAndFeelSettings global(LookAndFeel global) {
    this.global = global;
    return this;
  }

   /**
   * Get global
   * @return global
  **/
  @Schema(required = true, description = "")
  public LookAndFeel getGlobal() {
    return global;
  }

  public void setGlobal(LookAndFeel global) {
    this.global = global;
  }

  public LookAndFeelSettings theme(LookAndFeel theme) {
    this.theme = theme;
    return this;
  }

   /**
   * Get theme
   * @return theme
  **/
  @Schema(description = "")
  public LookAndFeel getTheme() {
    return theme;
  }

  public void setTheme(LookAndFeel theme) {
    this.theme = theme;
  }

  public LookAndFeelSettings custom(LookAndFeel custom) {
    this.custom = custom;
    return this;
  }

   /**
   * Get custom
   * @return custom
  **/
  @Schema(required = true, description = "")
  public LookAndFeel getCustom() {
    return custom;
  }

  public void setCustom(LookAndFeel custom) {
    this.custom = custom;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookAndFeelSettings lookAndFeelSettings = (LookAndFeelSettings) o;
    return Objects.equals(this.selected, lookAndFeelSettings.selected) &&
        Objects.equals(this.global, lookAndFeelSettings.global) &&
        Objects.equals(this.theme, lookAndFeelSettings.theme) &&
        Objects.equals(this.custom, lookAndFeelSettings.custom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selected, global, theme, custom);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookAndFeelSettings {\n");
    
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
