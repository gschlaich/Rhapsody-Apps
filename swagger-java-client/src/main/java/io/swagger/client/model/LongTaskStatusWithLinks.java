/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GenericLinks;
import io.swagger.client.model.LongTaskStatusName;
import io.swagger.client.model.LongTaskStatusWithLinksAdditionalDetails;
import io.swagger.client.model.Message;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Same as LongTaskStatus but with &#x60;_links&#x60; property.  Status keys:  - &#x60;ERROR_UNKNOWN&#x60; - Generic error - &#x60;ERROR_LOCK_FAILED&#x60; - Could not get the lock on destination space - &#x60;ERROR_RELINK&#x60; - Error when relink pages/attachments - &#x60;ERROR_COPY_PAGE&#x60; - Error while copying 1 page - &#x60;WARN_RENAME_PAGE&#x60; - Warning page is rename during copy - &#x60;WARN_IGNORE_COPY_PERMISSION&#x60; - Warning could not copy permission - &#x60;WARN_IGNORE_COPY_ATTACHMENT&#x60; - Warning could not copy attachment - &#x60;WARN_IGNORE_DELETE_PAGE&#x60; - Warning ignoring delete of a non agreed on page - &#x60;STATUS_COPIED_PAGES&#x60; - Message total pages are copied - &#x60;STATUS_COPYING_PAGES&#x60; - Message copy pages - &#x60;STATUS_RELINK_PAGES&#x60; - Message relink pages/attachments - &#x60;STATUS_DELETING_PAGES&#x60; - Message delete pages - &#x60;STATUS_DELETED_PAGES&#x60; - Message total pages are deleted - &#x60;STATUS_MOVING_PAGES&#x60; - Message move pages - &#x60;WARN_IGNORE_VIEW_RESTRICTED&#x60; - Permission changed - view restricted - &#x60;WARN_IGNORE_EDIT_RESTRICTED&#x60; - Permission changed - edit restricted - &#x60;INITIALIZING_TASK&#x60; - Message when initializing task - &#x60;UNKNOWN_STATUS&#x60; - Message when status is unknown
 */
@Schema(description = "Same as LongTaskStatus but with `_links` property.  Status keys:  - `ERROR_UNKNOWN` - Generic error - `ERROR_LOCK_FAILED` - Could not get the lock on destination space - `ERROR_RELINK` - Error when relink pages/attachments - `ERROR_COPY_PAGE` - Error while copying 1 page - `WARN_RENAME_PAGE` - Warning page is rename during copy - `WARN_IGNORE_COPY_PERMISSION` - Warning could not copy permission - `WARN_IGNORE_COPY_ATTACHMENT` - Warning could not copy attachment - `WARN_IGNORE_DELETE_PAGE` - Warning ignoring delete of a non agreed on page - `STATUS_COPIED_PAGES` - Message total pages are copied - `STATUS_COPYING_PAGES` - Message copy pages - `STATUS_RELINK_PAGES` - Message relink pages/attachments - `STATUS_DELETING_PAGES` - Message delete pages - `STATUS_DELETED_PAGES` - Message total pages are deleted - `STATUS_MOVING_PAGES` - Message move pages - `WARN_IGNORE_VIEW_RESTRICTED` - Permission changed - view restricted - `WARN_IGNORE_EDIT_RESTRICTED` - Permission changed - edit restricted - `INITIALIZING_TASK` - Message when initializing task - `UNKNOWN_STATUS` - Message when status is unknown")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class LongTaskStatusWithLinks {
  @SerializedName("ari")
  private String ari = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private LongTaskStatusName name = null;

  @SerializedName("elapsedTime")
  private Long elapsedTime = null;

  @SerializedName("percentageComplete")
  private Integer percentageComplete = null;

  @SerializedName("successful")
  private Boolean successful = null;

  @SerializedName("finished")
  private Boolean finished = null;

  @SerializedName("messages")
  private List<Message> messages = new ArrayList<Message>();

  @SerializedName("_links")
  private GenericLinks _links = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("errors")
  private List<Message> errors = null;

  @SerializedName("additionalDetails")
  private LongTaskStatusWithLinksAdditionalDetails additionalDetails = null;

  public LongTaskStatusWithLinks ari(String ari) {
    this.ari = ari;
    return this;
  }

   /**
   * the ARI for the long task, based on its ID
   * @return ari
  **/
  @Schema(description = "the ARI for the long task, based on its ID")
  public String getAri() {
    return ari;
  }

  public void setAri(String ari) {
    this.ari = ari;
  }

  public LongTaskStatusWithLinks id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public LongTaskStatusWithLinks name(LongTaskStatusName name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public LongTaskStatusName getName() {
    return name;
  }

  public void setName(LongTaskStatusName name) {
    this.name = name;
  }

  public LongTaskStatusWithLinks elapsedTime(Long elapsedTime) {
    this.elapsedTime = elapsedTime;
    return this;
  }

   /**
   * Get elapsedTime
   * @return elapsedTime
  **/
  @Schema(required = true, description = "")
  public Long getElapsedTime() {
    return elapsedTime;
  }

  public void setElapsedTime(Long elapsedTime) {
    this.elapsedTime = elapsedTime;
  }

  public LongTaskStatusWithLinks percentageComplete(Integer percentageComplete) {
    this.percentageComplete = percentageComplete;
    return this;
  }

   /**
   * Get percentageComplete
   * @return percentageComplete
  **/
  @Schema(required = true, description = "")
  public Integer getPercentageComplete() {
    return percentageComplete;
  }

  public void setPercentageComplete(Integer percentageComplete) {
    this.percentageComplete = percentageComplete;
  }

  public LongTaskStatusWithLinks successful(Boolean successful) {
    this.successful = successful;
    return this;
  }

   /**
   * Get successful
   * @return successful
  **/
  @Schema(required = true, description = "")
  public Boolean isSuccessful() {
    return successful;
  }

  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public LongTaskStatusWithLinks finished(Boolean finished) {
    this.finished = finished;
    return this;
  }

   /**
   * Get finished
   * @return finished
  **/
  @Schema(required = true, description = "")
  public Boolean isFinished() {
    return finished;
  }

  public void setFinished(Boolean finished) {
    this.finished = finished;
  }

  public LongTaskStatusWithLinks messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public LongTaskStatusWithLinks addMessagesItem(Message messagesItem) {
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @Schema(required = true, description = "")
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }

  public LongTaskStatusWithLinks _links(GenericLinks _links) {
    this._links = _links;
    return this;
  }

   /**
   * Get _links
   * @return _links
  **/
  @Schema(required = true, description = "")
  public GenericLinks getLinks() {
    return _links;
  }

  public void setLinks(GenericLinks _links) {
    this._links = _links;
  }

  public LongTaskStatusWithLinks status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public LongTaskStatusWithLinks errors(List<Message> errors) {
    this.errors = errors;
    return this;
  }

  public LongTaskStatusWithLinks addErrorsItem(Message errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<Message>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @Schema(description = "")
  public List<Message> getErrors() {
    return errors;
  }

  public void setErrors(List<Message> errors) {
    this.errors = errors;
  }

  public LongTaskStatusWithLinks additionalDetails(LongTaskStatusWithLinksAdditionalDetails additionalDetails) {
    this.additionalDetails = additionalDetails;
    return this;
  }

   /**
   * Get additionalDetails
   * @return additionalDetails
  **/
  @Schema(description = "")
  public LongTaskStatusWithLinksAdditionalDetails getAdditionalDetails() {
    return additionalDetails;
  }

  public void setAdditionalDetails(LongTaskStatusWithLinksAdditionalDetails additionalDetails) {
    this.additionalDetails = additionalDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongTaskStatusWithLinks longTaskStatusWithLinks = (LongTaskStatusWithLinks) o;
    return Objects.equals(this.ari, longTaskStatusWithLinks.ari) &&
        Objects.equals(this.id, longTaskStatusWithLinks.id) &&
        Objects.equals(this.name, longTaskStatusWithLinks.name) &&
        Objects.equals(this.elapsedTime, longTaskStatusWithLinks.elapsedTime) &&
        Objects.equals(this.percentageComplete, longTaskStatusWithLinks.percentageComplete) &&
        Objects.equals(this.successful, longTaskStatusWithLinks.successful) &&
        Objects.equals(this.finished, longTaskStatusWithLinks.finished) &&
        Objects.equals(this.messages, longTaskStatusWithLinks.messages) &&
        Objects.equals(this._links, longTaskStatusWithLinks._links) &&
        Objects.equals(this.status, longTaskStatusWithLinks.status) &&
        Objects.equals(this.errors, longTaskStatusWithLinks.errors) &&
        Objects.equals(this.additionalDetails, longTaskStatusWithLinks.additionalDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ari, id, name, elapsedTime, percentageComplete, successful, finished, messages, _links, status, errors, additionalDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongTaskStatusWithLinks {\n");
    
    sb.append("    ari: ").append(toIndentedString(ari)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    percentageComplete: ").append(toIndentedString(percentageComplete)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    additionalDetails: ").append(toIndentedString(additionalDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
