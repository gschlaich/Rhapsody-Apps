/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ContentBodyExpandable
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentBodyExpandable {
  @SerializedName("editor")
  private String editor = null;

  @SerializedName("view")
  private String view = null;

  @SerializedName("export_view")
  private String exportView = null;

  @SerializedName("styled_view")
  private String styledView = null;

  @SerializedName("storage")
  private String storage = null;

  @SerializedName("editor2")
  private String editor2 = null;

  @SerializedName("anonymous_export_view")
  private String anonymousExportView = null;

  @SerializedName("atlas_doc_format")
  private String atlasDocFormat = null;

  @SerializedName("wiki")
  private String wiki = null;

  @SerializedName("dynamic")
  private String dynamic = null;

  @SerializedName("raw")
  private String raw = null;

  public ContentBodyExpandable editor(String editor) {
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @Schema(description = "")
  public String getEditor() {
    return editor;
  }

  public void setEditor(String editor) {
    this.editor = editor;
  }

  public ContentBodyExpandable view(String view) {
    this.view = view;
    return this;
  }

   /**
   * Get view
   * @return view
  **/
  @Schema(description = "")
  public String getView() {
    return view;
  }

  public void setView(String view) {
    this.view = view;
  }

  public ContentBodyExpandable exportView(String exportView) {
    this.exportView = exportView;
    return this;
  }

   /**
   * Get exportView
   * @return exportView
  **/
  @Schema(description = "")
  public String getExportView() {
    return exportView;
  }

  public void setExportView(String exportView) {
    this.exportView = exportView;
  }

  public ContentBodyExpandable styledView(String styledView) {
    this.styledView = styledView;
    return this;
  }

   /**
   * Get styledView
   * @return styledView
  **/
  @Schema(description = "")
  public String getStyledView() {
    return styledView;
  }

  public void setStyledView(String styledView) {
    this.styledView = styledView;
  }

  public ContentBodyExpandable storage(String storage) {
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @Schema(description = "")
  public String getStorage() {
    return storage;
  }

  public void setStorage(String storage) {
    this.storage = storage;
  }

  public ContentBodyExpandable editor2(String editor2) {
    this.editor2 = editor2;
    return this;
  }

   /**
   * Get editor2
   * @return editor2
  **/
  @Schema(description = "")
  public String getEditor2() {
    return editor2;
  }

  public void setEditor2(String editor2) {
    this.editor2 = editor2;
  }

  public ContentBodyExpandable anonymousExportView(String anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
    return this;
  }

   /**
   * Get anonymousExportView
   * @return anonymousExportView
  **/
  @Schema(description = "")
  public String getAnonymousExportView() {
    return anonymousExportView;
  }

  public void setAnonymousExportView(String anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
  }

  public ContentBodyExpandable atlasDocFormat(String atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
    return this;
  }

   /**
   * Get atlasDocFormat
   * @return atlasDocFormat
  **/
  @Schema(description = "")
  public String getAtlasDocFormat() {
    return atlasDocFormat;
  }

  public void setAtlasDocFormat(String atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
  }

  public ContentBodyExpandable wiki(String wiki) {
    this.wiki = wiki;
    return this;
  }

   /**
   * Get wiki
   * @return wiki
  **/
  @Schema(description = "")
  public String getWiki() {
    return wiki;
  }

  public void setWiki(String wiki) {
    this.wiki = wiki;
  }

  public ContentBodyExpandable dynamic(String dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Get dynamic
   * @return dynamic
  **/
  @Schema(description = "")
  public String getDynamic() {
    return dynamic;
  }

  public void setDynamic(String dynamic) {
    this.dynamic = dynamic;
  }

  public ContentBodyExpandable raw(String raw) {
    this.raw = raw;
    return this;
  }

   /**
   * Get raw
   * @return raw
  **/
  @Schema(description = "")
  public String getRaw() {
    return raw;
  }

  public void setRaw(String raw) {
    this.raw = raw;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentBodyExpandable contentBodyExpandable = (ContentBodyExpandable) o;
    return Objects.equals(this.editor, contentBodyExpandable.editor) &&
        Objects.equals(this.view, contentBodyExpandable.view) &&
        Objects.equals(this.exportView, contentBodyExpandable.exportView) &&
        Objects.equals(this.styledView, contentBodyExpandable.styledView) &&
        Objects.equals(this.storage, contentBodyExpandable.storage) &&
        Objects.equals(this.editor2, contentBodyExpandable.editor2) &&
        Objects.equals(this.anonymousExportView, contentBodyExpandable.anonymousExportView) &&
        Objects.equals(this.atlasDocFormat, contentBodyExpandable.atlasDocFormat) &&
        Objects.equals(this.wiki, contentBodyExpandable.wiki) &&
        Objects.equals(this.dynamic, contentBodyExpandable.dynamic) &&
        Objects.equals(this.raw, contentBodyExpandable.raw);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editor, view, exportView, styledView, storage, editor2, anonymousExportView, atlasDocFormat, wiki, dynamic, raw);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentBodyExpandable {\n");
    
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    exportView: ").append(toIndentedString(exportView)).append("\n");
    sb.append("    styledView: ").append(toIndentedString(styledView)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    editor2: ").append(toIndentedString(editor2)).append("\n");
    sb.append("    anonymousExportView: ").append(toIndentedString(anonymousExportView)).append("\n");
    sb.append("    atlasDocFormat: ").append(toIndentedString(atlasDocFormat)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
