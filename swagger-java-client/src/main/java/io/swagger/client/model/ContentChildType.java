/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentChildTypeAttachment;
import io.swagger.client.model.ContentChildTypeExpandable;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
/**
 * Shows whether a piece of content has attachments, comments, or child pages. Note, this doesn&#x27;t actually contain the child objects.
 */
@Schema(description = "Shows whether a piece of content has attachments, comments, or child pages. Note, this doesn't actually contain the child objects.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentChildType extends HashMap<String, Object> {
  @SerializedName("attachment")
  private ContentChildTypeAttachment attachment = null;

  @SerializedName("comment")
  private ContentChildTypeAttachment comment = null;

  @SerializedName("page")
  private ContentChildTypeAttachment page = null;

  @SerializedName("_expandable")
  private ContentChildTypeExpandable _expandable = null;

  public ContentChildType attachment(ContentChildTypeAttachment attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @Schema(description = "")
  public ContentChildTypeAttachment getAttachment() {
    return attachment;
  }

  public void setAttachment(ContentChildTypeAttachment attachment) {
    this.attachment = attachment;
  }

  public ContentChildType comment(ContentChildTypeAttachment comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public ContentChildTypeAttachment getComment() {
    return comment;
  }

  public void setComment(ContentChildTypeAttachment comment) {
    this.comment = comment;
  }

  public ContentChildType page(ContentChildTypeAttachment page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @Schema(description = "")
  public ContentChildTypeAttachment getPage() {
    return page;
  }

  public void setPage(ContentChildTypeAttachment page) {
    this.page = page;
  }

  public ContentChildType _expandable(ContentChildTypeExpandable _expandable) {
    this._expandable = _expandable;
    return this;
  }

   /**
   * Get _expandable
   * @return _expandable
  **/
  @Schema(description = "")
  public ContentChildTypeExpandable getExpandable() {
    return _expandable;
  }

  public void setExpandable(ContentChildTypeExpandable _expandable) {
    this._expandable = _expandable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentChildType contentChildType = (ContentChildType) o;
    return Objects.equals(this.attachment, contentChildType.attachment) &&
        Objects.equals(this.comment, contentChildType.comment) &&
        Objects.equals(this.page, contentChildType.page) &&
        Objects.equals(this._expandable, contentChildType._expandable) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachment, comment, page, _expandable, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentChildType {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    _expandable: ").append(toIndentedString(_expandable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
