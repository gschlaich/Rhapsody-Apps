/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentState;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ContentStateSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentStateSettings {
  @SerializedName("contentStatesAllowed")
  private Boolean contentStatesAllowed = null;

  @SerializedName("customContentStatesAllowed")
  private Boolean customContentStatesAllowed = null;

  @SerializedName("spaceContentStatesAllowed")
  private Boolean spaceContentStatesAllowed = null;

  @SerializedName("spaceContentStates")
  private List<ContentState> spaceContentStates = null;

  public ContentStateSettings contentStatesAllowed(Boolean contentStatesAllowed) {
    this.contentStatesAllowed = contentStatesAllowed;
    return this;
  }

   /**
   * Whether users can place any content states on content
   * @return contentStatesAllowed
  **/
  @Schema(required = true, description = "Whether users can place any content states on content")
  public Boolean isContentStatesAllowed() {
    return contentStatesAllowed;
  }

  public void setContentStatesAllowed(Boolean contentStatesAllowed) {
    this.contentStatesAllowed = contentStatesAllowed;
  }

  public ContentStateSettings customContentStatesAllowed(Boolean customContentStatesAllowed) {
    this.customContentStatesAllowed = customContentStatesAllowed;
    return this;
  }

   /**
   * Whether users can place their custom states on content
   * @return customContentStatesAllowed
  **/
  @Schema(required = true, description = "Whether users can place their custom states on content")
  public Boolean isCustomContentStatesAllowed() {
    return customContentStatesAllowed;
  }

  public void setCustomContentStatesAllowed(Boolean customContentStatesAllowed) {
    this.customContentStatesAllowed = customContentStatesAllowed;
  }

  public ContentStateSettings spaceContentStatesAllowed(Boolean spaceContentStatesAllowed) {
    this.spaceContentStatesAllowed = spaceContentStatesAllowed;
    return this;
  }

   /**
   * Whether users can place space suggested states on content
   * @return spaceContentStatesAllowed
  **/
  @Schema(required = true, description = "Whether users can place space suggested states on content")
  public Boolean isSpaceContentStatesAllowed() {
    return spaceContentStatesAllowed;
  }

  public void setSpaceContentStatesAllowed(Boolean spaceContentStatesAllowed) {
    this.spaceContentStatesAllowed = spaceContentStatesAllowed;
  }

  public ContentStateSettings spaceContentStates(List<ContentState> spaceContentStates) {
    this.spaceContentStates = spaceContentStates;
    return this;
  }

  public ContentStateSettings addSpaceContentStatesItem(ContentState spaceContentStatesItem) {
    if (this.spaceContentStates == null) {
      this.spaceContentStates = new ArrayList<ContentState>();
    }
    this.spaceContentStates.add(spaceContentStatesItem);
    return this;
  }

   /**
   * space suggested content states that users can choose from
   * @return spaceContentStates
  **/
  @Schema(description = "space suggested content states that users can choose from")
  public List<ContentState> getSpaceContentStates() {
    return spaceContentStates;
  }

  public void setSpaceContentStates(List<ContentState> spaceContentStates) {
    this.spaceContentStates = spaceContentStates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentStateSettings contentStateSettings = (ContentStateSettings) o;
    return Objects.equals(this.contentStatesAllowed, contentStateSettings.contentStatesAllowed) &&
        Objects.equals(this.customContentStatesAllowed, contentStateSettings.customContentStatesAllowed) &&
        Objects.equals(this.spaceContentStatesAllowed, contentStateSettings.spaceContentStatesAllowed) &&
        Objects.equals(this.spaceContentStates, contentStateSettings.spaceContentStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentStatesAllowed, customContentStatesAllowed, spaceContentStatesAllowed, spaceContentStates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentStateSettings {\n");
    
    sb.append("    contentStatesAllowed: ").append(toIndentedString(contentStatesAllowed)).append("\n");
    sb.append("    customContentStatesAllowed: ").append(toIndentedString(customContentStatesAllowed)).append("\n");
    sb.append("    spaceContentStatesAllowed: ").append(toIndentedString(spaceContentStatesAllowed)).append("\n");
    sb.append("    spaceContentStates: ").append(toIndentedString(spaceContentStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
