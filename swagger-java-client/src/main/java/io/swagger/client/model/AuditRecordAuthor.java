/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AuditRecordAuthor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class AuditRecordAuthor {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    USER("user");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = TypeEnum.USER;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("operations")
  private Object operations = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("userKey")
  private String userKey = null;

  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("accountType")
  private String accountType = null;

  @SerializedName("externalCollaborator")
  private Boolean externalCollaborator = null;

  @SerializedName("isExternalCollaborator")
  private Boolean isExternalCollaborator = null;

  @SerializedName("publicName")
  private String publicName = null;

  public AuditRecordAuthor type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AuditRecordAuthor displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @Schema(required = true, description = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public AuditRecordAuthor operations(Object operations) {
    this.operations = operations;
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @Schema(required = true, description = "")
  public Object getOperations() {
    return operations;
  }

  public void setOperations(Object operations) {
    this.operations = operations;
  }

  public AuditRecordAuthor username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public AuditRecordAuthor userKey(String userKey) {
    this.userKey = userKey;
    return this;
  }

   /**
   * Get userKey
   * @return userKey
  **/
  @Schema(description = "")
  public String getUserKey() {
    return userKey;
  }

  public void setUserKey(String userKey) {
    this.userKey = userKey;
  }

  public AuditRecordAuthor accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public AuditRecordAuthor accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @Schema(description = "")
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }

  public AuditRecordAuthor externalCollaborator(Boolean externalCollaborator) {
    this.externalCollaborator = externalCollaborator;
    return this;
  }

   /**
   * Get externalCollaborator
   * @return externalCollaborator
  **/
  @Schema(description = "")
  public Boolean isExternalCollaborator() {
    return externalCollaborator;
  }

  public void setExternalCollaborator(Boolean externalCollaborator) {
    this.externalCollaborator = externalCollaborator;
  }

  public AuditRecordAuthor isExternalCollaborator(Boolean isExternalCollaborator) {
    this.isExternalCollaborator = isExternalCollaborator;
    return this;
  }

   /**
   * Whether the user is an external collaborator user
   * @return isExternalCollaborator
  **/
  @Schema(description = "Whether the user is an external collaborator user")
  public Boolean isIsExternalCollaborator() {
    return isExternalCollaborator;
  }

  public void setIsExternalCollaborator(Boolean isExternalCollaborator) {
    this.isExternalCollaborator = isExternalCollaborator;
  }

  public AuditRecordAuthor publicName(String publicName) {
    this.publicName = publicName;
    return this;
  }

   /**
   * The public name or nickname of the user. Will always contain a value.
   * @return publicName
  **/
  @Schema(description = "The public name or nickname of the user. Will always contain a value.")
  public String getPublicName() {
    return publicName;
  }

  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditRecordAuthor auditRecordAuthor = (AuditRecordAuthor) o;
    return Objects.equals(this.type, auditRecordAuthor.type) &&
        Objects.equals(this.displayName, auditRecordAuthor.displayName) &&
        Objects.equals(this.operations, auditRecordAuthor.operations) &&
        Objects.equals(this.username, auditRecordAuthor.username) &&
        Objects.equals(this.userKey, auditRecordAuthor.userKey) &&
        Objects.equals(this.accountId, auditRecordAuthor.accountId) &&
        Objects.equals(this.accountType, auditRecordAuthor.accountType) &&
        Objects.equals(this.externalCollaborator, auditRecordAuthor.externalCollaborator) &&
        Objects.equals(this.isExternalCollaborator, auditRecordAuthor.isExternalCollaborator) &&
        Objects.equals(this.publicName, auditRecordAuthor.publicName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, displayName, operations, username, userKey, accountId, accountType, externalCollaborator, isExternalCollaborator, publicName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditRecordAuthor {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    externalCollaborator: ").append(toIndentedString(externalCollaborator)).append("\n");
    sb.append("    isExternalCollaborator: ").append(toIndentedString(isExternalCollaborator)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
