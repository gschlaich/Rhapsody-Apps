/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentBlueprintDraftAncestors;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ContentBlueprintDraft
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentBlueprintDraft extends HashMap<String, Object> {
  @SerializedName("version")
  private Map version = null;

  @SerializedName("title")
  private String title = null;

  /**
   * The type of content. Set this to &#x60;page&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PAGE("page");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * The status of the content. Set this to &#x60;current&#x60; or omit it altogether.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CURRENT("current");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = StatusEnum.CURRENT;

  @SerializedName("space")
  private Map space = null;

  @SerializedName("ancestors")
  private List<ContentBlueprintDraftAncestors> ancestors = null;

  public ContentBlueprintDraft version(Map version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(required = true, description = "")
  public Map getVersion() {
    return version;
  }

  public void setVersion(Map version) {
    this.version = version;
  }

  public ContentBlueprintDraft title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The title of the content. If you don&#x27;t want to change the title, set this to the current title of the draft.
   * @return title
  **/
  @Schema(required = true, description = "The title of the content. If you don't want to change the title, set this to the current title of the draft.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ContentBlueprintDraft type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of content. Set this to &#x60;page&#x60;.
   * @return type
  **/
  @Schema(required = true, description = "The type of content. Set this to `page`.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ContentBlueprintDraft status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the content. Set this to &#x60;current&#x60; or omit it altogether.
   * @return status
  **/
  @Schema(description = "The status of the content. Set this to `current` or omit it altogether.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ContentBlueprintDraft space(Map space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @Schema(description = "")
  public Map getSpace() {
    return space;
  }

  public void setSpace(Map space) {
    this.space = space;
  }

  public ContentBlueprintDraft ancestors(List<ContentBlueprintDraftAncestors> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public ContentBlueprintDraft addAncestorsItem(ContentBlueprintDraftAncestors ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<ContentBlueprintDraftAncestors>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * The new ancestor (i.e. parent page) for the content. If you have specified an ancestor, you must also specify a &#x60;space&#x60; property in the request body for the space that the ancestor is in.  Note, if you specify more than one ancestor, the last ID in the array will be selected as the parent page for the content.
   * @return ancestors
  **/
  @Schema(description = "The new ancestor (i.e. parent page) for the content. If you have specified an ancestor, you must also specify a `space` property in the request body for the space that the ancestor is in.  Note, if you specify more than one ancestor, the last ID in the array will be selected as the parent page for the content.")
  public List<ContentBlueprintDraftAncestors> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<ContentBlueprintDraftAncestors> ancestors) {
    this.ancestors = ancestors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentBlueprintDraft contentBlueprintDraft = (ContentBlueprintDraft) o;
    return Objects.equals(this.version, contentBlueprintDraft.version) &&
        Objects.equals(this.title, contentBlueprintDraft.title) &&
        Objects.equals(this.type, contentBlueprintDraft.type) &&
        Objects.equals(this.status, contentBlueprintDraft.status) &&
        Objects.equals(this.space, contentBlueprintDraft.space) &&
        Objects.equals(this.ancestors, contentBlueprintDraft.ancestors) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, title, type, status, space, ancestors, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentBlueprintDraft {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
