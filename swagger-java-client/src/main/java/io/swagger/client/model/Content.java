/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Container;
import io.swagger.client.model.Content;
import io.swagger.client.model.ContentBody;
import io.swagger.client.model.ContentChildType;
import io.swagger.client.model.ContentChildren;
import io.swagger.client.model.ContentExpandable;
import io.swagger.client.model.ContentHistory;
import io.swagger.client.model.ContentMetadata;
import io.swagger.client.model.ContentRestrictions;
import io.swagger.client.model.GenericLinks;
import io.swagger.client.model.OperationCheckResult;
import io.swagger.client.model.Space;
import io.swagger.client.model.Version;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Base object for all content types.
 */
@Schema(description = "Base object for all content types.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class Content extends HashMap<String, Object> implements OneOfRelationSource, OneOfRelationTarget {
  @SerializedName("id")
  private String id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("space")
  private Space space = null;

  @SerializedName("history")
  private ContentHistory history = null;

  @SerializedName("version")
  private Version version = null;

  @SerializedName("ancestors")
  private List<Content> ancestors = null;

  @SerializedName("operations")
  private List<OperationCheckResult> operations = null;

  @SerializedName("children")
  private ContentChildren children = null;

  @SerializedName("childTypes")
  private ContentChildType childTypes = null;

  @SerializedName("descendants")
  private ContentChildren descendants = null;

  @SerializedName("container")
  private Container container = null;

  @SerializedName("body")
  private ContentBody body = null;

  @SerializedName("restrictions")
  private ContentRestrictions restrictions = null;

  @SerializedName("metadata")
  private ContentMetadata metadata = null;

  @SerializedName("macroRenderedOutput")
  private Map<String, Object> macroRenderedOutput = null;

  @SerializedName("extensions")
  private Object extensions = null;

  @SerializedName("_expandable")
  private ContentExpandable _expandable = null;

  @SerializedName("_links")
  private GenericLinks _links = null;

  public Content id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Content type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Can be \&quot;page\&quot;, \&quot;blogpost\&quot;, \&quot;attachment\&quot; or \&quot;content\&quot;
   * @return type
  **/
  @Schema(required = true, description = "Can be \"page\", \"blogpost\", \"attachment\" or \"content\"")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Content status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Content title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @Schema(description = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Content space(Space space) {
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @Schema(description = "")
  public Space getSpace() {
    return space;
  }

  public void setSpace(Space space) {
    this.space = space;
  }

  public Content history(ContentHistory history) {
    this.history = history;
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @Schema(description = "")
  public ContentHistory getHistory() {
    return history;
  }

  public void setHistory(ContentHistory history) {
    this.history = history;
  }

  public Content version(Version version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Version getVersion() {
    return version;
  }

  public void setVersion(Version version) {
    this.version = version;
  }

  public Content ancestors(List<Content> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public Content addAncestorsItem(Content ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<Content>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * Get ancestors
   * @return ancestors
  **/
  @Schema(description = "")
  public List<Content> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<Content> ancestors) {
    this.ancestors = ancestors;
  }

  public Content operations(List<OperationCheckResult> operations) {
    this.operations = operations;
    return this;
  }

  public Content addOperationsItem(OperationCheckResult operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<OperationCheckResult>();
    }
    this.operations.add(operationsItem);
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @Schema(description = "")
  public List<OperationCheckResult> getOperations() {
    return operations;
  }

  public void setOperations(List<OperationCheckResult> operations) {
    this.operations = operations;
  }

  public Content children(ContentChildren children) {
    this.children = children;
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @Schema(description = "")
  public ContentChildren getChildren() {
    return children;
  }

  public void setChildren(ContentChildren children) {
    this.children = children;
  }

  public Content childTypes(ContentChildType childTypes) {
    this.childTypes = childTypes;
    return this;
  }

   /**
   * Get childTypes
   * @return childTypes
  **/
  @Schema(description = "")
  public ContentChildType getChildTypes() {
    return childTypes;
  }

  public void setChildTypes(ContentChildType childTypes) {
    this.childTypes = childTypes;
  }

  public Content descendants(ContentChildren descendants) {
    this.descendants = descendants;
    return this;
  }

   /**
   * Get descendants
   * @return descendants
  **/
  @Schema(description = "")
  public ContentChildren getDescendants() {
    return descendants;
  }

  public void setDescendants(ContentChildren descendants) {
    this.descendants = descendants;
  }

  public Content container(Container container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @Schema(description = "")
  public Container getContainer() {
    return container;
  }

  public void setContainer(Container container) {
    this.container = container;
  }

  public Content body(ContentBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(description = "")
  public ContentBody getBody() {
    return body;
  }

  public void setBody(ContentBody body) {
    this.body = body;
  }

  public Content restrictions(ContentRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @Schema(description = "")
  public ContentRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(ContentRestrictions restrictions) {
    this.restrictions = restrictions;
  }

  public Content metadata(ContentMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public ContentMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ContentMetadata metadata) {
    this.metadata = metadata;
  }

  public Content macroRenderedOutput(Map<String, Object> macroRenderedOutput) {
    this.macroRenderedOutput = macroRenderedOutput;
    return this;
  }

  public Content putMacroRenderedOutputItem(String key, Object macroRenderedOutputItem) {
    if (this.macroRenderedOutput == null) {
      this.macroRenderedOutput = new HashMap<String, Object>();
    }
    this.macroRenderedOutput.put(key, macroRenderedOutputItem);
    return this;
  }

   /**
   * Get macroRenderedOutput
   * @return macroRenderedOutput
  **/
  @Schema(description = "")
  public Map<String, Object> getMacroRenderedOutput() {
    return macroRenderedOutput;
  }

  public void setMacroRenderedOutput(Map<String, Object> macroRenderedOutput) {
    this.macroRenderedOutput = macroRenderedOutput;
  }

  public Content extensions(Object extensions) {
    this.extensions = extensions;
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @Schema(description = "")
  public Object getExtensions() {
    return extensions;
  }

  public void setExtensions(Object extensions) {
    this.extensions = extensions;
  }

  public Content _expandable(ContentExpandable _expandable) {
    this._expandable = _expandable;
    return this;
  }

   /**
   * Get _expandable
   * @return _expandable
  **/
  @Schema(description = "")
  public ContentExpandable getExpandable() {
    return _expandable;
  }

  public void setExpandable(ContentExpandable _expandable) {
    this._expandable = _expandable;
  }

  public Content _links(GenericLinks _links) {
    this._links = _links;
    return this;
  }

   /**
   * Get _links
   * @return _links
  **/
  @Schema(description = "")
  public GenericLinks getLinks() {
    return _links;
  }

  public void setLinks(GenericLinks _links) {
    this._links = _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Content content = (Content) o;
    return Objects.equals(this.id, content.id) &&
        Objects.equals(this.type, content.type) &&
        Objects.equals(this.status, content.status) &&
        Objects.equals(this.title, content.title) &&
        Objects.equals(this.space, content.space) &&
        Objects.equals(this.history, content.history) &&
        Objects.equals(this.version, content.version) &&
        Objects.equals(this.ancestors, content.ancestors) &&
        Objects.equals(this.operations, content.operations) &&
        Objects.equals(this.children, content.children) &&
        Objects.equals(this.childTypes, content.childTypes) &&
        Objects.equals(this.descendants, content.descendants) &&
        Objects.equals(this.container, content.container) &&
        Objects.equals(this.body, content.body) &&
        Objects.equals(this.restrictions, content.restrictions) &&
        Objects.equals(this.metadata, content.metadata) &&
        Objects.equals(this.macroRenderedOutput, content.macroRenderedOutput) &&
        Objects.equals(this.extensions, content.extensions) &&
        Objects.equals(this._expandable, content._expandable) &&
        Objects.equals(this._links, content._links) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, status, title, space, history, version, ancestors, operations, children, childTypes, descendants, container, body, restrictions, metadata, macroRenderedOutput, extensions, _expandable, _links, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Content {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    childTypes: ").append(toIndentedString(childTypes)).append("\n");
    sb.append("    descendants: ").append(toIndentedString(descendants)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    macroRenderedOutput: ").append(toIndentedString(macroRenderedOutput)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    _expandable: ").append(toIndentedString(_expandable)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
