/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.OperationCheckResult;
import io.swagger.client.model.SpacePermissionSubjects;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This object represents a permission for given space. Permissions consist of at least one operation object with an accompanying subjects object.  The following combinations of &#x60;operation&#x60; and &#x60;targetType&#x60; values are valid for the &#x60;operation&#x60; object:    - &#x27;create&#x27;: &#x27;page&#x27;, &#x27;blogpost&#x27;, &#x27;comment&#x27;, &#x27;attachment&#x27;   - &#x27;read&#x27;: &#x27;space&#x27;   - &#x27;delete&#x27;: &#x27;page&#x27;, &#x27;blogpost&#x27;, &#x27;comment&#x27;, &#x27;attachment&#x27;   - &#x27;export&#x27;: &#x27;space&#x27;   - &#x27;administer&#x27;: &#x27;space&#x27;
 */
@Schema(description = "This object represents a permission for given space. Permissions consist of at least one operation object with an accompanying subjects object.  The following combinations of `operation` and `targetType` values are valid for the `operation` object:    - 'create': 'page', 'blogpost', 'comment', 'attachment'   - 'read': 'space'   - 'delete': 'page', 'blogpost', 'comment', 'attachment'   - 'export': 'space'   - 'administer': 'space'")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class SpacePermission {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("subjects")
  private SpacePermissionSubjects subjects = null;

  @SerializedName("operation")
  private OperationCheckResult operation = null;

  @SerializedName("anonymousAccess")
  private Boolean anonymousAccess = false;

  @SerializedName("unlicensedAccess")
  private Boolean unlicensedAccess = false;

  public SpacePermission id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SpacePermission subjects(SpacePermissionSubjects subjects) {
    this.subjects = subjects;
    return this;
  }

   /**
   * Get subjects
   * @return subjects
  **/
  @Schema(description = "")
  public SpacePermissionSubjects getSubjects() {
    return subjects;
  }

  public void setSubjects(SpacePermissionSubjects subjects) {
    this.subjects = subjects;
  }

  public SpacePermission operation(OperationCheckResult operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @Schema(required = true, description = "")
  public OperationCheckResult getOperation() {
    return operation;
  }

  public void setOperation(OperationCheckResult operation) {
    this.operation = operation;
  }

  public SpacePermission anonymousAccess(Boolean anonymousAccess) {
    this.anonymousAccess = anonymousAccess;
    return this;
  }

   /**
   * Grant anonymous users permission to use the operation.
   * @return anonymousAccess
  **/
  @Schema(required = true, description = "Grant anonymous users permission to use the operation.")
  public Boolean isAnonymousAccess() {
    return anonymousAccess;
  }

  public void setAnonymousAccess(Boolean anonymousAccess) {
    this.anonymousAccess = anonymousAccess;
  }

  public SpacePermission unlicensedAccess(Boolean unlicensedAccess) {
    this.unlicensedAccess = unlicensedAccess;
    return this;
  }

   /**
   * Grants access to unlicensed users from JIRA Service Desk when used with the &#x27;read space&#x27; operation.
   * @return unlicensedAccess
  **/
  @Schema(required = true, description = "Grants access to unlicensed users from JIRA Service Desk when used with the 'read space' operation.")
  public Boolean isUnlicensedAccess() {
    return unlicensedAccess;
  }

  public void setUnlicensedAccess(Boolean unlicensedAccess) {
    this.unlicensedAccess = unlicensedAccess;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpacePermission spacePermission = (SpacePermission) o;
    return Objects.equals(this.id, spacePermission.id) &&
        Objects.equals(this.subjects, spacePermission.subjects) &&
        Objects.equals(this.operation, spacePermission.operation) &&
        Objects.equals(this.anonymousAccess, spacePermission.anonymousAccess) &&
        Objects.equals(this.unlicensedAccess, spacePermission.unlicensedAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, subjects, operation, anonymousAccess, unlicensedAccess);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpacePermission {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    anonymousAccess: ").append(toIndentedString(anonymousAccess)).append("\n");
    sb.append("    unlicensedAccess: ").append(toIndentedString(unlicensedAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
