/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Look and feel selection
 */
@Schema(description = "Look and feel selection")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class LookAndFeelSelection {
  @SerializedName("spaceKey")
  private String spaceKey = null;

  /**
   * Gets or Sets lookAndFeelType
   */
  @JsonAdapter(LookAndFeelTypeEnum.Adapter.class)
  public enum LookAndFeelTypeEnum {
    GLOBAL("global"),
    CUSTOM("custom"),
    THEME("theme");

    private String value;

    LookAndFeelTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LookAndFeelTypeEnum fromValue(String input) {
      for (LookAndFeelTypeEnum b : LookAndFeelTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LookAndFeelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LookAndFeelTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LookAndFeelTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LookAndFeelTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("lookAndFeelType")
  private LookAndFeelTypeEnum lookAndFeelType = null;

  public LookAndFeelSelection spaceKey(String spaceKey) {
    this.spaceKey = spaceKey;
    return this;
  }

   /**
   * The key of the space for which the look and feel settings will be set.
   * @return spaceKey
  **/
  @Schema(required = true, description = "The key of the space for which the look and feel settings will be set.")
  public String getSpaceKey() {
    return spaceKey;
  }

  public void setSpaceKey(String spaceKey) {
    this.spaceKey = spaceKey;
  }

  public LookAndFeelSelection lookAndFeelType(LookAndFeelTypeEnum lookAndFeelType) {
    this.lookAndFeelType = lookAndFeelType;
    return this;
  }

   /**
   * Get lookAndFeelType
   * @return lookAndFeelType
  **/
  @Schema(required = true, description = "")
  public LookAndFeelTypeEnum getLookAndFeelType() {
    return lookAndFeelType;
  }

  public void setLookAndFeelType(LookAndFeelTypeEnum lookAndFeelType) {
    this.lookAndFeelType = lookAndFeelType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookAndFeelSelection lookAndFeelSelection = (LookAndFeelSelection) o;
    return Objects.equals(this.spaceKey, lookAndFeelSelection.spaceKey) &&
        Objects.equals(this.lookAndFeelType, lookAndFeelSelection.lookAndFeelType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spaceKey, lookAndFeelType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookAndFeelSelection {\n");
    
    sb.append("    spaceKey: ").append(toIndentedString(spaceKey)).append("\n");
    sb.append("    lookAndFeelType: ").append(toIndentedString(lookAndFeelType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
