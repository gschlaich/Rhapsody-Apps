/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentBody;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The body of the new content. Does not apply to attachments. Only one body format should be specified as the property for this object, e.g. &#x60;storage&#x60;.  Note, &#x60;editor2&#x60; format is used by Atlassian only. &#x60;anonymous_export_view&#x60; is the same as &#x60;export_view&#x60; format but only content viewable by an anonymous user is included.
 */
@Schema(description = "The body of the new content. Does not apply to attachments. Only one body format should be specified as the property for this object, e.g. `storage`.  Note, `editor2` format is used by Atlassian only. `anonymous_export_view` is the same as `export_view` format but only content viewable by an anonymous user is included.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentTemplateBody {
  @SerializedName("view")
  private ContentBody view = null;

  @SerializedName("export_view")
  private ContentBody exportView = null;

  @SerializedName("styled_view")
  private ContentBody styledView = null;

  @SerializedName("storage")
  private ContentBody storage = null;

  @SerializedName("editor")
  private ContentBody editor = null;

  @SerializedName("editor2")
  private ContentBody editor2 = null;

  @SerializedName("wiki")
  private ContentBody wiki = null;

  @SerializedName("atlas_doc_format")
  private ContentBody atlasDocFormat = null;

  @SerializedName("anonymous_export_view")
  private ContentBody anonymousExportView = null;

  public ContentTemplateBody view(ContentBody view) {
    this.view = view;
    return this;
  }

   /**
   * Get view
   * @return view
  **/
  @Schema(description = "")
  public ContentBody getView() {
    return view;
  }

  public void setView(ContentBody view) {
    this.view = view;
  }

  public ContentTemplateBody exportView(ContentBody exportView) {
    this.exportView = exportView;
    return this;
  }

   /**
   * Get exportView
   * @return exportView
  **/
  @Schema(description = "")
  public ContentBody getExportView() {
    return exportView;
  }

  public void setExportView(ContentBody exportView) {
    this.exportView = exportView;
  }

  public ContentTemplateBody styledView(ContentBody styledView) {
    this.styledView = styledView;
    return this;
  }

   /**
   * Get styledView
   * @return styledView
  **/
  @Schema(description = "")
  public ContentBody getStyledView() {
    return styledView;
  }

  public void setStyledView(ContentBody styledView) {
    this.styledView = styledView;
  }

  public ContentTemplateBody storage(ContentBody storage) {
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @Schema(description = "")
  public ContentBody getStorage() {
    return storage;
  }

  public void setStorage(ContentBody storage) {
    this.storage = storage;
  }

  public ContentTemplateBody editor(ContentBody editor) {
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @Schema(description = "")
  public ContentBody getEditor() {
    return editor;
  }

  public void setEditor(ContentBody editor) {
    this.editor = editor;
  }

  public ContentTemplateBody editor2(ContentBody editor2) {
    this.editor2 = editor2;
    return this;
  }

   /**
   * Get editor2
   * @return editor2
  **/
  @Schema(description = "")
  public ContentBody getEditor2() {
    return editor2;
  }

  public void setEditor2(ContentBody editor2) {
    this.editor2 = editor2;
  }

  public ContentTemplateBody wiki(ContentBody wiki) {
    this.wiki = wiki;
    return this;
  }

   /**
   * Get wiki
   * @return wiki
  **/
  @Schema(description = "")
  public ContentBody getWiki() {
    return wiki;
  }

  public void setWiki(ContentBody wiki) {
    this.wiki = wiki;
  }

  public ContentTemplateBody atlasDocFormat(ContentBody atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
    return this;
  }

   /**
   * Get atlasDocFormat
   * @return atlasDocFormat
  **/
  @Schema(description = "")
  public ContentBody getAtlasDocFormat() {
    return atlasDocFormat;
  }

  public void setAtlasDocFormat(ContentBody atlasDocFormat) {
    this.atlasDocFormat = atlasDocFormat;
  }

  public ContentTemplateBody anonymousExportView(ContentBody anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
    return this;
  }

   /**
   * Get anonymousExportView
   * @return anonymousExportView
  **/
  @Schema(description = "")
  public ContentBody getAnonymousExportView() {
    return anonymousExportView;
  }

  public void setAnonymousExportView(ContentBody anonymousExportView) {
    this.anonymousExportView = anonymousExportView;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentTemplateBody contentTemplateBody = (ContentTemplateBody) o;
    return Objects.equals(this.view, contentTemplateBody.view) &&
        Objects.equals(this.exportView, contentTemplateBody.exportView) &&
        Objects.equals(this.styledView, contentTemplateBody.styledView) &&
        Objects.equals(this.storage, contentTemplateBody.storage) &&
        Objects.equals(this.editor, contentTemplateBody.editor) &&
        Objects.equals(this.editor2, contentTemplateBody.editor2) &&
        Objects.equals(this.wiki, contentTemplateBody.wiki) &&
        Objects.equals(this.atlasDocFormat, contentTemplateBody.atlasDocFormat) &&
        Objects.equals(this.anonymousExportView, contentTemplateBody.anonymousExportView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(view, exportView, styledView, storage, editor, editor2, wiki, atlasDocFormat, anonymousExportView);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentTemplateBody {\n");
    
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    exportView: ").append(toIndentedString(exportView)).append("\n");
    sb.append("    styledView: ").append(toIndentedString(styledView)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    editor2: ").append(toIndentedString(editor2)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("    atlasDocFormat: ").append(toIndentedString(atlasDocFormat)).append("\n");
    sb.append("    anonymousExportView: ").append(toIndentedString(anonymousExportView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
