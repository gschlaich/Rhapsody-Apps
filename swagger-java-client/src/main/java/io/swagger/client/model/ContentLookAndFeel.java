/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContainerLookAndFeel;
import io.swagger.client.model.ScreenLookAndFeel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ContentLookAndFeel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentLookAndFeel {
  @SerializedName("screen")
  private ScreenLookAndFeel screen = null;

  @SerializedName("container")
  private ContainerLookAndFeel container = null;

  @SerializedName("header")
  private ContainerLookAndFeel header = null;

  @SerializedName("body")
  private ContainerLookAndFeel body = null;

  public ContentLookAndFeel screen(ScreenLookAndFeel screen) {
    this.screen = screen;
    return this;
  }

   /**
   * Get screen
   * @return screen
  **/
  @Schema(description = "")
  public ScreenLookAndFeel getScreen() {
    return screen;
  }

  public void setScreen(ScreenLookAndFeel screen) {
    this.screen = screen;
  }

  public ContentLookAndFeel container(ContainerLookAndFeel container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @Schema(description = "")
  public ContainerLookAndFeel getContainer() {
    return container;
  }

  public void setContainer(ContainerLookAndFeel container) {
    this.container = container;
  }

  public ContentLookAndFeel header(ContainerLookAndFeel header) {
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @Schema(description = "")
  public ContainerLookAndFeel getHeader() {
    return header;
  }

  public void setHeader(ContainerLookAndFeel header) {
    this.header = header;
  }

  public ContentLookAndFeel body(ContainerLookAndFeel body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(description = "")
  public ContainerLookAndFeel getBody() {
    return body;
  }

  public void setBody(ContainerLookAndFeel body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentLookAndFeel contentLookAndFeel = (ContentLookAndFeel) o;
    return Objects.equals(this.screen, contentLookAndFeel.screen) &&
        Objects.equals(this.container, contentLookAndFeel.container) &&
        Objects.equals(this.header, contentLookAndFeel.header) &&
        Objects.equals(this.body, contentLookAndFeel.body);
  }

  @Override
  public int hashCode() {
    return Objects.hash(screen, container, header, body);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentLookAndFeel {\n");
    
    sb.append("    screen: ").append(toIndentedString(screen)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
