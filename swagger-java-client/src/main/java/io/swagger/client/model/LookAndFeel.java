/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentLookAndFeel;
import io.swagger.client.model.HeaderLookAndFeel;
import io.swagger.client.model.HorizontalHeaderLookAndFeel;
import io.swagger.client.model.LookAndFeelHeadings;
import io.swagger.client.model.MenusLookAndFeel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LookAndFeel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class LookAndFeel {
  @SerializedName("headings")
  private LookAndFeelHeadings headings = null;

  @SerializedName("links")
  private LookAndFeelHeadings links = null;

  @SerializedName("menus")
  private MenusLookAndFeel menus = null;

  @SerializedName("header")
  private HeaderLookAndFeel header = null;

  @SerializedName("horizontalHeader")
  private HorizontalHeaderLookAndFeel horizontalHeader = null;

  @SerializedName("content")
  private ContentLookAndFeel content = null;

  @SerializedName("bordersAndDividers")
  private LookAndFeelHeadings bordersAndDividers = null;

  @SerializedName("spaceReference")
  private Object spaceReference = null;

  public LookAndFeel headings(LookAndFeelHeadings headings) {
    this.headings = headings;
    return this;
  }

   /**
   * Get headings
   * @return headings
  **/
  @Schema(required = true, description = "")
  public LookAndFeelHeadings getHeadings() {
    return headings;
  }

  public void setHeadings(LookAndFeelHeadings headings) {
    this.headings = headings;
  }

  public LookAndFeel links(LookAndFeelHeadings links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(required = true, description = "")
  public LookAndFeelHeadings getLinks() {
    return links;
  }

  public void setLinks(LookAndFeelHeadings links) {
    this.links = links;
  }

  public LookAndFeel menus(MenusLookAndFeel menus) {
    this.menus = menus;
    return this;
  }

   /**
   * Get menus
   * @return menus
  **/
  @Schema(required = true, description = "")
  public MenusLookAndFeel getMenus() {
    return menus;
  }

  public void setMenus(MenusLookAndFeel menus) {
    this.menus = menus;
  }

  public LookAndFeel header(HeaderLookAndFeel header) {
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @Schema(required = true, description = "")
  public HeaderLookAndFeel getHeader() {
    return header;
  }

  public void setHeader(HeaderLookAndFeel header) {
    this.header = header;
  }

  public LookAndFeel horizontalHeader(HorizontalHeaderLookAndFeel horizontalHeader) {
    this.horizontalHeader = horizontalHeader;
    return this;
  }

   /**
   * Get horizontalHeader
   * @return horizontalHeader
  **/
  @Schema(description = "")
  public HorizontalHeaderLookAndFeel getHorizontalHeader() {
    return horizontalHeader;
  }

  public void setHorizontalHeader(HorizontalHeaderLookAndFeel horizontalHeader) {
    this.horizontalHeader = horizontalHeader;
  }

  public LookAndFeel content(ContentLookAndFeel content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @Schema(required = true, description = "")
  public ContentLookAndFeel getContent() {
    return content;
  }

  public void setContent(ContentLookAndFeel content) {
    this.content = content;
  }

  public LookAndFeel bordersAndDividers(LookAndFeelHeadings bordersAndDividers) {
    this.bordersAndDividers = bordersAndDividers;
    return this;
  }

   /**
   * Get bordersAndDividers
   * @return bordersAndDividers
  **/
  @Schema(required = true, description = "")
  public LookAndFeelHeadings getBordersAndDividers() {
    return bordersAndDividers;
  }

  public void setBordersAndDividers(LookAndFeelHeadings bordersAndDividers) {
    this.bordersAndDividers = bordersAndDividers;
  }

  public LookAndFeel spaceReference(Object spaceReference) {
    this.spaceReference = spaceReference;
    return this;
  }

   /**
   * Get spaceReference
   * @return spaceReference
  **/
  @Schema(description = "")
  public Object getSpaceReference() {
    return spaceReference;
  }

  public void setSpaceReference(Object spaceReference) {
    this.spaceReference = spaceReference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookAndFeel lookAndFeel = (LookAndFeel) o;
    return Objects.equals(this.headings, lookAndFeel.headings) &&
        Objects.equals(this.links, lookAndFeel.links) &&
        Objects.equals(this.menus, lookAndFeel.menus) &&
        Objects.equals(this.header, lookAndFeel.header) &&
        Objects.equals(this.horizontalHeader, lookAndFeel.horizontalHeader) &&
        Objects.equals(this.content, lookAndFeel.content) &&
        Objects.equals(this.bordersAndDividers, lookAndFeel.bordersAndDividers) &&
        Objects.equals(this.spaceReference, lookAndFeel.spaceReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headings, links, menus, header, horizontalHeader, content, bordersAndDividers, spaceReference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookAndFeel {\n");
    
    sb.append("    headings: ").append(toIndentedString(headings)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    menus: ").append(toIndentedString(menus)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    horizontalHeader: ").append(toIndentedString(horizontalHeader)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    bordersAndDividers: ").append(toIndentedString(bordersAndDividers)).append("\n");
    sb.append("    spaceReference: ").append(toIndentedString(spaceReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
