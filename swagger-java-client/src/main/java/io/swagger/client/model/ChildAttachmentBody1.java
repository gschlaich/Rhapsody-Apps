/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
/**
 * ChildAttachmentBody1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ChildAttachmentBody1 {
  @SerializedName("file")
  private File file = null;

  @SerializedName("comment")
  private File comment = null;

  @SerializedName("minorEdit")
  private File minorEdit = null;

  public ChildAttachmentBody1 file(File file) {
    this.file = file;
    return this;
  }

   /**
   * The relative location and name of the attachment to be added to the content.
   * @return file
  **/
  @Schema(required = true, description = "The relative location and name of the attachment to be added to the content.")
  public File getFile() {
    return file;
  }

  public void setFile(File file) {
    this.file = file;
  }

  public ChildAttachmentBody1 comment(File comment) {
    this.comment = comment;
    return this;
  }

   /**
   * The comment for the attachment that is being added. If you specify a comment, then every file must have a comment and the comments must be in the same order as the files. Alternatively, don&#x27;t specify any comments.
   * @return comment
  **/
  @Schema(description = "The comment for the attachment that is being added. If you specify a comment, then every file must have a comment and the comments must be in the same order as the files. Alternatively, don't specify any comments.")
  public File getComment() {
    return comment;
  }

  public void setComment(File comment) {
    this.comment = comment;
  }

  public ChildAttachmentBody1 minorEdit(File minorEdit) {
    this.minorEdit = minorEdit;
    return this;
  }

   /**
   * If &#x60;minorEdits&#x60; is set to &#x27;true&#x27;, no notification email or activity stream will be generated when the attachment is added to the content.
   * @return minorEdit
  **/
  @Schema(required = true, description = "If `minorEdits` is set to 'true', no notification email or activity stream will be generated when the attachment is added to the content.")
  public File getMinorEdit() {
    return minorEdit;
  }

  public void setMinorEdit(File minorEdit) {
    this.minorEdit = minorEdit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChildAttachmentBody1 childAttachmentBody1 = (ChildAttachmentBody1) o;
    return Objects.equals(this.file, childAttachmentBody1.file) &&
        Objects.equals(this.comment, childAttachmentBody1.comment) &&
        Objects.equals(this.minorEdit, childAttachmentBody1.minorEdit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Objects.hashCode(file), Objects.hashCode(comment), Objects.hashCode(minorEdit));
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChildAttachmentBody1 {\n");
    
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    minorEdit: ").append(toIndentedString(minorEdit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
