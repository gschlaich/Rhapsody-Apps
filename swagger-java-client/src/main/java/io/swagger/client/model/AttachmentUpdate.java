/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AttachmentUpdateContainer;
import io.swagger.client.model.AttachmentUpdateMetadata;
import io.swagger.client.model.AttachmentUpdateVersion;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AttachmentUpdate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class AttachmentUpdate {
  @SerializedName("version")
  private AttachmentUpdateVersion version = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Set this to &#x60;attachment&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ATTACHMENT("attachment");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("metadata")
  private AttachmentUpdateMetadata metadata = null;

  @SerializedName("container")
  private AttachmentUpdateContainer container = null;

  public AttachmentUpdate version(AttachmentUpdateVersion version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(required = true, description = "")
  public AttachmentUpdateVersion getVersion() {
    return version;
  }

  public void setVersion(AttachmentUpdateVersion version) {
    this.version = version;
  }

  public AttachmentUpdate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the attachment to be updated.
   * @return id
  **/
  @Schema(required = true, description = "The ID of the attachment to be updated.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public AttachmentUpdate type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Set this to &#x60;attachment&#x60;.
   * @return type
  **/
  @Schema(required = true, description = "Set this to `attachment`.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AttachmentUpdate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The updated name of the attachment.
   * @return title
  **/
  @Schema(description = "The updated name of the attachment.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public AttachmentUpdate metadata(AttachmentUpdateMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public AttachmentUpdateMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(AttachmentUpdateMetadata metadata) {
    this.metadata = metadata;
  }

  public AttachmentUpdate container(AttachmentUpdateContainer container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @Schema(description = "")
  public AttachmentUpdateContainer getContainer() {
    return container;
  }

  public void setContainer(AttachmentUpdateContainer container) {
    this.container = container;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentUpdate attachmentUpdate = (AttachmentUpdate) o;
    return Objects.equals(this.version, attachmentUpdate.version) &&
        Objects.equals(this.id, attachmentUpdate.id) &&
        Objects.equals(this.type, attachmentUpdate.type) &&
        Objects.equals(this.title, attachmentUpdate.title) &&
        Objects.equals(this.metadata, attachmentUpdate.metadata) &&
        Objects.equals(this.container, attachmentUpdate.container);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, id, type, title, metadata, container);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentUpdate {\n");
    
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
