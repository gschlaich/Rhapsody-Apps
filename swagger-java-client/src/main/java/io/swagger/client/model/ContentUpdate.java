/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentUpdateBody;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ContentUpdate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class ContentUpdate extends HashMap<String, Object> {
  @SerializedName("version")
  private Map version = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("type")
  private String type = null;

  /**
   * The updated status of the content. Note, if you change the status of a page from &#x27;current&#x27; to &#x27;draft&#x27; and it has an existing draft, the existing draft will be deleted in favor of the updated page.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CURRENT("current"),
    TRASHED("trashed"),
    DELETED("deleted"),
    HISTORICAL("historical"),
    DRAFT("draft");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("ancestors")
  private List<Map> ancestors = null;

  @SerializedName("body")
  private ContentUpdateBody body = null;

  public ContentUpdate version(Map version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(required = true, description = "")
  public Map getVersion() {
    return version;
  }

  public void setVersion(Map version) {
    this.version = version;
  }

  public ContentUpdate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The updated title of the content. If you are updating a non-draft &#x60;page&#x60; or &#x60;blogpost&#x60;, title is required. If you are not changing the title, set this field to the the current title.
   * @return title
  **/
  @Schema(description = "The updated title of the content. If you are updating a non-draft `page` or `blogpost`, title is required. If you are not changing the title, set this field to the the current title.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ContentUpdate type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of content. Set this to the current type of the content. For example, - page - blogpost - comment - attachment
   * @return type
  **/
  @Schema(required = true, description = "The type of content. Set this to the current type of the content. For example, - page - blogpost - comment - attachment")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ContentUpdate status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The updated status of the content. Note, if you change the status of a page from &#x27;current&#x27; to &#x27;draft&#x27; and it has an existing draft, the existing draft will be deleted in favor of the updated page.
   * @return status
  **/
  @Schema(description = "The updated status of the content. Note, if you change the status of a page from 'current' to 'draft' and it has an existing draft, the existing draft will be deleted in favor of the updated page.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ContentUpdate ancestors(List<Map> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public ContentUpdate addAncestorsItem(Map ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<Map>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * The new parent for the content. Only one parent content &#x27;id&#x27; can be specified.
   * @return ancestors
  **/
  @Schema(description = "The new parent for the content. Only one parent content 'id' can be specified.")
  public List<Map> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<Map> ancestors) {
    this.ancestors = ancestors;
  }

  public ContentUpdate body(ContentUpdateBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(description = "")
  public ContentUpdateBody getBody() {
    return body;
  }

  public void setBody(ContentUpdateBody body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentUpdate contentUpdate = (ContentUpdate) o;
    return Objects.equals(this.version, contentUpdate.version) &&
        Objects.equals(this.title, contentUpdate.title) &&
        Objects.equals(this.type, contentUpdate.type) &&
        Objects.equals(this.status, contentUpdate.status) &&
        Objects.equals(this.ancestors, contentUpdate.ancestors) &&
        Objects.equals(this.body, contentUpdate.body) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, title, type, status, ancestors, body, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentUpdate {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
