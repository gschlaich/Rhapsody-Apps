/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CopyPageHierarchyTitleOptions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CopyPageHierarchyRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class CopyPageHierarchyRequest {
  @SerializedName("copyAttachments")
  private Boolean copyAttachments = false;

  @SerializedName("copyPermissions")
  private Boolean copyPermissions = false;

  @SerializedName("copyProperties")
  private Boolean copyProperties = false;

  @SerializedName("copyLabels")
  private Boolean copyLabels = false;

  @SerializedName("copyCustomContents")
  private Boolean copyCustomContents = false;

  @SerializedName("copyDescendants")
  private Boolean copyDescendants = true;

  @SerializedName("destinationPageId")
  private String destinationPageId = null;

  @SerializedName("titleOptions")
  private CopyPageHierarchyTitleOptions titleOptions = null;

  public CopyPageHierarchyRequest copyAttachments(Boolean copyAttachments) {
    this.copyAttachments = copyAttachments;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, attachments are copied to the destination page.
   * @return copyAttachments
  **/
  @Schema(description = "If set to `true`, attachments are copied to the destination page.")
  public Boolean isCopyAttachments() {
    return copyAttachments;
  }

  public void setCopyAttachments(Boolean copyAttachments) {
    this.copyAttachments = copyAttachments;
  }

  public CopyPageHierarchyRequest copyPermissions(Boolean copyPermissions) {
    this.copyPermissions = copyPermissions;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, page permissions are copied to the destination page.
   * @return copyPermissions
  **/
  @Schema(description = "If set to `true`, page permissions are copied to the destination page.")
  public Boolean isCopyPermissions() {
    return copyPermissions;
  }

  public void setCopyPermissions(Boolean copyPermissions) {
    this.copyPermissions = copyPermissions;
  }

  public CopyPageHierarchyRequest copyProperties(Boolean copyProperties) {
    this.copyProperties = copyProperties;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, content properties are copied to the destination page.
   * @return copyProperties
  **/
  @Schema(description = "If set to `true`, content properties are copied to the destination page.")
  public Boolean isCopyProperties() {
    return copyProperties;
  }

  public void setCopyProperties(Boolean copyProperties) {
    this.copyProperties = copyProperties;
  }

  public CopyPageHierarchyRequest copyLabels(Boolean copyLabels) {
    this.copyLabels = copyLabels;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, labels are copied to the destination page.
   * @return copyLabels
  **/
  @Schema(description = "If set to `true`, labels are copied to the destination page.")
  public Boolean isCopyLabels() {
    return copyLabels;
  }

  public void setCopyLabels(Boolean copyLabels) {
    this.copyLabels = copyLabels;
  }

  public CopyPageHierarchyRequest copyCustomContents(Boolean copyCustomContents) {
    this.copyCustomContents = copyCustomContents;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, custom contents are copied to the destination page.
   * @return copyCustomContents
  **/
  @Schema(description = "If set to `true`, custom contents are copied to the destination page.")
  public Boolean isCopyCustomContents() {
    return copyCustomContents;
  }

  public void setCopyCustomContents(Boolean copyCustomContents) {
    this.copyCustomContents = copyCustomContents;
  }

  public CopyPageHierarchyRequest copyDescendants(Boolean copyDescendants) {
    this.copyDescendants = copyDescendants;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, descendants are copied to the destination page.
   * @return copyDescendants
  **/
  @Schema(description = "If set to `true`, descendants are copied to the destination page.")
  public Boolean isCopyDescendants() {
    return copyDescendants;
  }

  public void setCopyDescendants(Boolean copyDescendants) {
    this.copyDescendants = copyDescendants;
  }

  public CopyPageHierarchyRequest destinationPageId(String destinationPageId) {
    this.destinationPageId = destinationPageId;
    return this;
  }

   /**
   * Get destinationPageId
   * @return destinationPageId
  **/
  @Schema(required = true, description = "")
  public String getDestinationPageId() {
    return destinationPageId;
  }

  public void setDestinationPageId(String destinationPageId) {
    this.destinationPageId = destinationPageId;
  }

  public CopyPageHierarchyRequest titleOptions(CopyPageHierarchyTitleOptions titleOptions) {
    this.titleOptions = titleOptions;
    return this;
  }

   /**
   * Get titleOptions
   * @return titleOptions
  **/
  @Schema(description = "")
  public CopyPageHierarchyTitleOptions getTitleOptions() {
    return titleOptions;
  }

  public void setTitleOptions(CopyPageHierarchyTitleOptions titleOptions) {
    this.titleOptions = titleOptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyPageHierarchyRequest copyPageHierarchyRequest = (CopyPageHierarchyRequest) o;
    return Objects.equals(this.copyAttachments, copyPageHierarchyRequest.copyAttachments) &&
        Objects.equals(this.copyPermissions, copyPageHierarchyRequest.copyPermissions) &&
        Objects.equals(this.copyProperties, copyPageHierarchyRequest.copyProperties) &&
        Objects.equals(this.copyLabels, copyPageHierarchyRequest.copyLabels) &&
        Objects.equals(this.copyCustomContents, copyPageHierarchyRequest.copyCustomContents) &&
        Objects.equals(this.copyDescendants, copyPageHierarchyRequest.copyDescendants) &&
        Objects.equals(this.destinationPageId, copyPageHierarchyRequest.destinationPageId) &&
        Objects.equals(this.titleOptions, copyPageHierarchyRequest.titleOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyAttachments, copyPermissions, copyProperties, copyLabels, copyCustomContents, copyDescendants, destinationPageId, titleOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyPageHierarchyRequest {\n");
    
    sb.append("    copyAttachments: ").append(toIndentedString(copyAttachments)).append("\n");
    sb.append("    copyPermissions: ").append(toIndentedString(copyPermissions)).append("\n");
    sb.append("    copyProperties: ").append(toIndentedString(copyProperties)).append("\n");
    sb.append("    copyLabels: ").append(toIndentedString(copyLabels)).append("\n");
    sb.append("    copyCustomContents: ").append(toIndentedString(copyCustomContents)).append("\n");
    sb.append("    copyDescendants: ").append(toIndentedString(copyDescendants)).append("\n");
    sb.append("    destinationPageId: ").append(toIndentedString(destinationPageId)).append("\n");
    sb.append("    titleOptions: ").append(toIndentedString(titleOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
