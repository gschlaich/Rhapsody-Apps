/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NavigationLookAndFeelHoverOrFocus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NavigationLookAndFeel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-29T20:08:21.572793104Z[GMT]")
public class NavigationLookAndFeel {
  @SerializedName("color")
  private String color = null;

  @SerializedName("highlightColor")
  private String highlightColor = null;

  @SerializedName("hoverOrFocus")
  private NavigationLookAndFeelHoverOrFocus hoverOrFocus = null;

  public NavigationLookAndFeel color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @Schema(required = true, description = "")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public NavigationLookAndFeel highlightColor(String highlightColor) {
    this.highlightColor = highlightColor;
    return this;
  }

   /**
   * Get highlightColor
   * @return highlightColor
  **/
  @Schema(description = "")
  public String getHighlightColor() {
    return highlightColor;
  }

  public void setHighlightColor(String highlightColor) {
    this.highlightColor = highlightColor;
  }

  public NavigationLookAndFeel hoverOrFocus(NavigationLookAndFeelHoverOrFocus hoverOrFocus) {
    this.hoverOrFocus = hoverOrFocus;
    return this;
  }

   /**
   * Get hoverOrFocus
   * @return hoverOrFocus
  **/
  @Schema(required = true, description = "")
  public NavigationLookAndFeelHoverOrFocus getHoverOrFocus() {
    return hoverOrFocus;
  }

  public void setHoverOrFocus(NavigationLookAndFeelHoverOrFocus hoverOrFocus) {
    this.hoverOrFocus = hoverOrFocus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NavigationLookAndFeel navigationLookAndFeel = (NavigationLookAndFeel) o;
    return Objects.equals(this.color, navigationLookAndFeel.color) &&
        Objects.equals(this.highlightColor, navigationLookAndFeel.highlightColor) &&
        Objects.equals(this.hoverOrFocus, navigationLookAndFeel.hoverOrFocus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, highlightColor, hoverOrFocus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NavigationLookAndFeel {\n");
    
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    highlightColor: ").append(toIndentedString(highlightColor)).append("\n");
    sb.append("    hoverOrFocus: ").append(toIndentedString(hoverOrFocus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
