/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Relation;
import io.swagger.client.model.RelationArray;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for RelationApi
 */
@Ignore
public class RelationApiTest {

    private final RelationApi api = new RelationApi();

    /**
     * Create relationship
     *
     * Creates a relationship between two entities (user, space, content). The &#x27;favourite&#x27; relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a &#x27;sibling&#x27; relationship between two pieces of content: &#x60;GET /wiki/rest/api/relation/sibling/from/content/123/to/content/456&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRelationshipTest() throws Exception {
        String relationName = null;
        String sourceType = null;
        String sourceKey = null;
        String targetType = null;
        String targetKey = null;
        String sourceStatus = null;
        String targetStatus = null;
        Integer sourceVersion = null;
        Integer targetVersion = null;
        Relation response = api.createRelationship(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion);

        // TODO: test validations
    }
    /**
     * Delete relationship
     *
     * Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRelationshipTest() throws Exception {
        String relationName = null;
        String sourceType = null;
        String sourceKey = null;
        String targetType = null;
        String targetKey = null;
        String sourceStatus = null;
        String targetStatus = null;
        Integer sourceVersion = null;
        Integer targetVersion = null;
        api.deleteRelationship(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion);

        // TODO: test validations
    }
    /**
     * Find source entities related to a target entity
     *
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a &#x27;collaborator&#x27; relationship to a piece of content with an ID of &#x27;1234&#x27;: &#x60;GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user&#x60; Note, &#x27;collaborator&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findSourcesForTargetTest() throws Exception {
        String relationName = null;
        String sourceType = null;
        String targetType = null;
        String targetKey = null;
        String sourceStatus = null;
        String targetStatus = null;
        Integer sourceVersion = null;
        Integer targetVersion = null;
        List<String> expand = null;
        Integer start = null;
        Integer limit = null;
        RelationArray response = api.findSourcesForTarget(relationName, sourceType, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit);

        // TODO: test validations
    }
    /**
     * Find target entities related to a source entity
     *
     * Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an &#x27;ignore&#x27; relationship with: &#x60;GET /wiki/rest/api/relation/ignore/from/user/current/to/content&#x60; Note, &#x27;ignore&#x27; is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTargetFromSourceTest() throws Exception {
        String relationName = null;
        String sourceType = null;
        String sourceKey = null;
        String targetType = null;
        String sourceStatus = null;
        String targetStatus = null;
        Integer sourceVersion = null;
        Integer targetVersion = null;
        List<String> expand = null;
        Integer start = null;
        Integer limit = null;
        RelationArray response = api.findTargetFromSource(relationName, sourceType, sourceKey, targetType, sourceStatus, targetStatus, sourceVersion, targetVersion, expand, start, limit);

        // TODO: test validations
    }
    /**
     * Find relationship from source to target
     *
     * Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. &#x27;save for later&#x27;): &#x60;GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123&#x60;  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRelationshipTest() throws Exception {
        String relationName = null;
        String sourceType = null;
        String sourceKey = null;
        String targetType = null;
        String targetKey = null;
        String sourceStatus = null;
        String targetStatus = null;
        Integer sourceVersion = null;
        Integer targetVersion = null;
        List<String> expand = null;
        Relation response = api.getRelationship(relationName, sourceType, sourceKey, targetType, targetKey, sourceStatus, targetStatus, sourceVersion, targetVersion, expand);

        // TODO: test validations
    }
}
