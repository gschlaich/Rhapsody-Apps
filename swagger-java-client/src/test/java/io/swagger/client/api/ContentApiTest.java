/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Content;
import io.swagger.client.model.ContentArchiveBody;
import io.swagger.client.model.ContentArray;
import io.swagger.client.model.ContentHistory;
import io.swagger.client.model.LongTask;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContentApi
 */
@Ignore
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    /**
     * Archive pages
     *
     * Archives a list of pages. The pages to be archived are specified as a list of content IDs. This API accepts the archival request and returns a task ID. The archival process happens asynchronously. Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.  Each content ID needs to resolve to page objects that are not already in an archived state. The content IDs need not belong to the same space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Archive&#x27; permission for each of the pages in the corresponding space it belongs to.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void archivePagesTest() throws Exception {
        ContentArchiveBody body = null;
        LongTask response = api.archivePages(body);

        // TODO: test validations
    }
    /**
     * Create content
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Creates a new piece of content or publishes an existing draft.  To publish a draft, add the &#x60;id&#x60; and &#x60;status&#x60; properties to the body of the request. Set the &#x60;id&#x60; to the ID of the draft and set the &#x60;status&#x60; to &#x27;current&#x27;. When the request is sent, a new piece of content will be created and the metadata from the draft will be transferred into it.  By default, the following objects are expanded: &#x60;space&#x60;, &#x60;history&#x60;, &#x60;version&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Add&#x27; permission for the space that the content will be created in, and permission to view the draft if publishing a draft.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createContentTest() throws Exception {
        Map<String, Object> body = null;
        String status = null;
        List<String> expand = null;
        Content response = api.createContent(body, status, expand);

        // TODO: test validations
    }
    /**
     * Delete content
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Moves a piece of content to the space&#x27;s trash or purges it from the trash, depending on the content&#x27;s type and status:  - If the content&#x27;s type is &#x60;page&#x60; or &#x60;blogpost&#x60; and its status is &#x60;current&#x60;, it will be trashed. - If the content&#x27;s type is &#x60;page&#x60; or &#x60;blogpost&#x60; and its status is &#x60;trashed&#x60;, the content will be purged from the trash and deleted permanently. Note, you must also set the &#x60;status&#x60; query parameter to &#x60;trashed&#x60; in your request. - If the content&#x27;s type is &#x60;comment&#x60; or &#x60;attachment&#x60;, it will be deleted permanently without being trashed.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Delete&#x27; permission for the space that the content is in.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteContentTest() throws Exception {
        String id = null;
        String status = null;
        api.deleteContent(id, status);

        // TODO: test validations
    }
    /**
     * Get content
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all content in a Confluence instance.  By default, the following objects are expanded: &#x60;space&#x60;, &#x60;history&#x60;, &#x60;version&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). Only content that the user has permission to view will be returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContentTest() throws Exception {
        String type = null;
        String spaceKey = null;
        String title = null;
        List<String> status = null;
        String postingDay = null;
        List<String> expand = null;
        String trigger = null;
        String orderby = null;
        Integer start = null;
        Integer limit = null;
        ContentArray response = api.getContent(type, spaceKey, title, status, postingDay, expand, trigger, orderby, start, limit);

        // TODO: test validations
    }
    /**
     * Get content by ID
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a single piece of content, like a page or a blog post.  By default, the following objects are expanded: &#x60;space&#x60;, &#x60;history&#x60;, &#x60;version&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the content is a blog post, &#x27;View&#x27; permission for the space is required.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContentByIdTest() throws Exception {
        String id = null;
        List<String> status = null;
        Integer version = null;
        String embeddedContentRender = null;
        List<String> expand = null;
        String trigger = null;
        Content response = api.getContentById(id, status, version, embeddedContentRender, expand, trigger);

        // TODO: test validations
    }
    /**
     * Get content history
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns the most recent update for a piece of content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getHistoryForContentTest() throws Exception {
        String id = null;
        List<String> expand = null;
        ContentHistory response = api.getHistoryForContent(id, expand);

        // TODO: test validations
    }
    /**
     * Publish legacy draft
     *
     * Publishes a legacy draft of a page created from a blueprint. Legacy drafts will eventually be removed in favor of shared drafts. For now, this method works the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).  By default, the following objects are expanded: &#x60;body.storage&#x60;, &#x60;history&#x60;, &#x60;space&#x60;, &#x60;version&#x60;, &#x60;ancestors&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the draft and &#x27;Add&#x27; permission for the space that the content will be created in.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void publishLegacyDraftTest() throws Exception {
        Map<String, Object> body = null;
        String draftId = null;
        String status = null;
        List<String> expand = null;
        Content response = api.publishLegacyDraft(body, draftId, status, expand);

        // TODO: test validations
    }
    /**
     * Publish shared draft
     *
     * Publishes a shared draft of a page created from a blueprint.  By default, the following objects are expanded: &#x60;body.storage&#x60;, &#x60;history&#x60;, &#x60;space&#x60;, &#x60;version&#x60;, &#x60;ancestors&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the draft and &#x27;Add&#x27; permission for the space that the content will be created in.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void publishSharedDraftTest() throws Exception {
        Map<String, Object> body = null;
        String draftId = null;
        String status = null;
        List<String> expand = null;
        Content response = api.publishSharedDraft(body, draftId, status, expand);

        // TODO: test validations
    }
    /**
     * Search content by CQL
     *
     * Returns the list of content that matches a Confluence Query Language (CQL) query. For information on CQL, see: [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Example initial call: &#x60;&#x60;&#x60; /wiki/rest/api/content/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25 &#x60;&#x60;&#x60;  Example response: &#x60;&#x60;&#x60; {   \&quot;results\&quot;: [     { ... },     { ... },     ...     { ... }   ],   \&quot;limit\&quot;: 25,   \&quot;size\&quot;: 25,   ...   \&quot;_links\&quot;: {     \&quot;base\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;context\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;next\&quot;: \&quot;/rest/api/content/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg\&quot;,     \&quot;self\&quot;: \&quot;&lt;url&gt;\&quot;   } } &#x60;&#x60;&#x60;  When additional results are available, returns &#x60;next&#x60; and &#x60;prev&#x60; URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use &#x60;limit&#x60; to specify the number of results returned in each call. Example subsequent call (taken from example response): &#x60;&#x60;&#x60; /wiki/rest/api/content/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg &#x60;&#x60;&#x60; The response to this will have a &#x60;prev&#x60; URL similar to the &#x60;next&#x60; in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (&#x27;Can use&#x27; global permission). Only content that the user has permission to view will be returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchContentByCQLTest() throws Exception {
        String cql = null;
        String cqlcontext = null;
        List<String> expand = null;
        String cursor = null;
        Integer limit = null;
        ContentArray response = api.searchContentByCQL(cql, cqlcontext, expand, cursor, limit);

        // TODO: test validations
    }
    /**
     * Update content
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Updates a piece of content. Use this method to update the title or body of a piece of content, change the status, change the parent page, and more.  Note, updating draft content is currently not supported.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateContentTest() throws Exception {
        Map<String, Object> body = null;
        String id = null;
        String status = null;
        String conflictPolicy = null;
        Content response = api.updateContent(body, id, status, conflictPolicy);

        // TODO: test validations
    }
}
