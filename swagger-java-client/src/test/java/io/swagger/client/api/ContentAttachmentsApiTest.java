/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Content;
import io.swagger.client.model.ContentArray;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContentAttachmentsApi
 */
@Ignore
public class ContentAttachmentsApiTest {

    private final ContentAttachmentsApi api = new ContentAttachmentsApi();

    /**
     * Create attachment
     *
     * Adds an attachment to a piece of content. This method only adds a new attachment. If you want to update an existing attachment, use [Create or update attachments](#api-content-id-child-attachment-put).  Note, you must set a &#x60;X-Atlassian-Token: nocheck&#x60; header on the request for this method, otherwise it will be blocked. This protects against XSRF attacks, which is necessary as this method accepts multipart/form-data.  The media type &#x27;multipart/form-data&#x27; is defined in [RFC 7578](https://www.ietf.org/rfc/rfc7578.txt). Most client libraries have classes that make it easier to implement multipart posts, like the [MultipartEntityBuilder](https://hc.apache.org/httpcomponents-client-5.1.x/current/httpclient5/apidocs/) Java class provided by Apache HTTP Components.  Note, according to [RFC 7578](https://tools.ietf.org/html/rfc7578#section-4.5), in the case where the form data is text, the charset parameter for the \&quot;text/plain\&quot; Content-Type may be used to indicate the character encoding used in that part. In the case of this API endpoint, the &#x60;comment&#x60; body parameter should be sent with &#x60;type&#x3D;text/plain&#x60; and &#x60;charset&#x3D;utf-8&#x60; values. This will force the charset to be UTF-8.  Example: This curl command attaches a file (&#x27;example.txt&#x27;) to a container (id&#x3D;&#x27;123&#x27;) with a comment and &#x60;minorEdits&#x60;&#x3D;true.  &#x60;&#x60;&#x60; bash curl -D- \\   -u admin:admin \\   -X POST \\   -H &#x27;X-Atlassian-Token: nocheck&#x27; \\   -F &#x27;file&#x3D;@\&quot;example.txt\&quot;&#x27; \\   -F &#x27;minorEdit&#x3D;\&quot;true\&quot;&#x27; \\   -F &#x27;comment&#x3D;\&quot;Example attachment comment\&quot;; type&#x3D;text/plain; charset&#x3D;utf-8&#x27; \\   http://myhost/rest/api/content/123/child/attachment &#x60;&#x60;&#x60; **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAttachmentTest() throws Exception {
        File file = null;
        File comment = null;
        File minorEdit = null;
        String id = null;
        String status = null;
        ContentArray response = api.createAttachment(file, comment, minorEdit, id, status);

        // TODO: test validations
    }
    /**
     * Create or update attachment
     *
     * Adds an attachment to a piece of content. If the attachment already exists for the content, then the attachment is updated (i.e. a new version of the attachment is created).  Note, you must set a &#x60;X-Atlassian-Token: nocheck&#x60; header on the request for this method, otherwise it will be blocked. This protects against XSRF attacks, which is necessary as this method accepts multipart/form-data.  The media type &#x27;multipart/form-data&#x27; is defined in [RFC 7578](https://www.ietf.org/rfc/rfc7578.txt). Most client libraries have classes that make it easier to implement multipart posts, like the [MultipartEntityBuilder](https://hc.apache.org/httpcomponents-client-5.1.x/current/httpclient5/apidocs/) Java class provided by Apache HTTP Components.  Note, according to [RFC 7578](https://tools.ietf.org/html/rfc7578#section-4.5), in the case where the form data is text, the charset parameter for the \&quot;text/plain\&quot; Content-Type may be used to indicate the character encoding used in that part. In the case of this API endpoint, the &#x60;comment&#x60; body parameter should be sent with &#x60;type&#x3D;text/plain&#x60; and &#x60;charset&#x3D;utf-8&#x60; values. This will force the charset to be UTF-8.  Example: This curl command attaches a file (&#x27;example.txt&#x27;) to a piece of content (id&#x3D;&#x27;123&#x27;) with a comment and &#x60;minorEdits&#x60;&#x3D;true. If the &#x27;example.txt&#x27; file already exists, it will update it with a new version of the attachment.  &#x60;&#x60;&#x60; bash curl -D- \\   -u admin:admin \\   -X PUT \\   -H &#x27;X-Atlassian-Token: nocheck&#x27; \\   -F &#x27;file&#x3D;@\&quot;example.txt\&quot;&#x27; \\   -F &#x27;minorEdit&#x3D;\&quot;true\&quot;&#x27; \\   -F &#x27;comment&#x3D;\&quot;Example attachment comment\&quot;; type&#x3D;text/plain; charset&#x3D;utf-8&#x27; \\   http://myhost/rest/api/content/123/child/attachment &#x60;&#x60;&#x60; **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateAttachmentsTest() throws Exception {
        File file = null;
        File comment = null;
        File minorEdit = null;
        String id = null;
        String status = null;
        ContentArray response = api.createOrUpdateAttachments(file, comment, minorEdit, id, status);

        // TODO: test validations
    }
    /**
     * Get URI to download attachment
     *
     * Redirects the client to a URL that serves an attachment&#x27;s binary data.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadAttatchmentTest() throws Exception {
        String id = null;
        String attachmentId = null;
        Integer version = null;
        api.downloadAttatchment(id, attachmentId, version);

        // TODO: test validations
    }
    /**
     * Get attachments
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns the attachments for a piece of content.  By default, the following objects are expanded: &#x60;metadata&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content. If the content is a blog post, &#x27;View&#x27; permission for the space is required.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws Exception {
        String id = null;
        List<String> expand = null;
        Integer start = null;
        Integer limit = null;
        String filename = null;
        String mediaType = null;
        ContentArray response = api.getAttachments(id, expand, start, limit, filename, mediaType);

        // TODO: test validations
    }
    /**
     * Update attachment data
     *
     * Updates the binary data of an attachment, given the attachment ID, and optionally the comment and the minor edit field.  This method is essentially the same as [Create or update attachments](#api-content-id-child-attachment-put), except that it matches the attachment ID rather than the name.  Note, you must set a &#x60;X-Atlassian-Token: nocheck&#x60; header on the request for this method, otherwise it will be blocked. This protects against XSRF attacks, which is necessary as this method accepts multipart/form-data.  The media type &#x27;multipart/form-data&#x27; is defined in [RFC 7578](https://www.ietf.org/rfc/rfc7578.txt). Most client libraries have classes that make it easier to implement multipart posts, like the [MultipartEntityBuilder](https://hc.apache.org/httpcomponents-client-5.1.x/current/httpclient5/apidocs/) Java class provided by Apache HTTP Components.  Note, according to [RFC 7578](https://tools.ietf.org/html/rfc7578#section-4.5), in the case where the form data is text, the charset parameter for the \&quot;text/plain\&quot; Content-Type may be used to indicate the character encoding used in that part. In the case of this API endpoint, the &#x60;comment&#x60; body parameter should be sent with &#x60;type&#x3D;text/plain&#x60; and &#x60;charset&#x3D;utf-8&#x60; values. This will force the charset to be UTF-8.  Example: This curl command updates an attachment (id&#x3D;&#x27;att456&#x27;) that is attached to a piece of content (id&#x3D;&#x27;123&#x27;) with a comment and &#x60;minorEdits&#x60;&#x3D;true.  &#x60;&#x60;&#x60; bash curl -D- \\   -u admin:admin \\   -X POST \\   -H &#x27;X-Atlassian-Token: nocheck&#x27; \\   -F &#x27;file&#x3D;@\&quot;example.txt\&quot;&#x27; \\   -F &#x27;minorEdit&#x3D;\&quot;true\&quot;&#x27; \\   -F &#x27;comment&#x3D;\&quot;Example attachment comment\&quot;; type&#x3D;text/plain; charset&#x3D;utf-8&#x27; \\   http://myhost/rest/api/content/123/child/attachment/att456/data &#x60;&#x60;&#x60; **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAttachmentDataTest() throws Exception {
        File file = null;
        File comment = null;
        File minorEdit = null;
        String id = null;
        String attachmentId = null;
        Content response = api.updateAttachmentData(file, comment, minorEdit, id, attachmentId);

        // TODO: test validations
    }
    /**
     * Update attachment properties
     *
     * Updates the attachment properties, i.e. the non-binary data of an attachment like the filename, media-type, comment, and parent container.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to update the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAttachmentPropertiesTest() throws Exception {
        Map<String, Object> body = null;
        String id = null;
        String attachmentId = null;
        Content response = api.updateAttachmentProperties(body, id, attachmentId);

        // TODO: test validations
    }
}
