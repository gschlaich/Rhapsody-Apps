/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Content;
import io.swagger.client.model.ContentArray;
import io.swagger.client.model.ContentChildren;
import io.swagger.client.model.CopyPageHierarchyRequest;
import io.swagger.client.model.CopyPageRequest;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.LongTask;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContentChildrenAndDescendantsApi
 */
@Ignore
public class ContentChildrenAndDescendantsApiTest {

    private final ContentChildrenAndDescendantsApi api = new ContentChildrenAndDescendantsApi();

    /**
     * Copy single page
     *
     * Copies a single page and its associated properties, permissions, attachments, and custom contents.  The &#x60;id&#x60; path parameter refers to the content ID of the page to copy. The target of the page to be copied  is defined using the &#x60;destination&#x60; in the request body and can be one of the following types.    - &#x60;space&#x60;: page will be copied to the specified space as a root page on the space   - &#x60;parent_page&#x60;: page will be copied as a child of the specified parent page   - &#x60;existing_page&#x60;: page will be copied and replace the specified page  By default, the following objects are expanded: &#x60;space&#x60;, &#x60;history&#x60;, &#x60;version&#x60;.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;Add&#x27; permission for the space that the content will be copied in and permission to update the content if copying to an &#x60;existing_page&#x60;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void copyPageTest() throws Exception {
        CopyPageRequest body = null;
        String id = null;
        List<String> expand = null;
        Content response = api.copyPage(body, id, expand);

        // TODO: test validations
    }
    /**
     * Copy page hierarchy
     *
     * Copy page hierarchy allows the copying of an entire hierarchy of pages and their associated properties, permissions and attachments.  The id path parameter refers to the content id of the page to copy, and the new parent of this copied page is defined using the destinationPageId in the request body.  The titleOptions object defines the rules of renaming page titles during the copy;  for example, search and replace can be used in conjunction to rewrite the copied page titles.   Response example:  &lt;pre&gt;&lt;code&gt;  {       \&quot;id\&quot; : \&quot;1180606\&quot;,       \&quot;links\&quot; : {            \&quot;status\&quot; : \&quot;/rest/api/longtask/1180606\&quot;       }  }  &lt;/code&gt;&lt;/pre&gt;  Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void copyPageHierarchyTest() throws Exception {
        CopyPageHierarchyRequest body = null;
        String id = null;
        LongTask response = api.copyPageHierarchy(body, id);

        // TODO: test validations
    }
    /**
     * Get content children
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns a map of the direct children of a piece of content. A piece of content has different types of child content, depending on its type. These are the default parent-child content type relationships:  - &#x60;page&#x60;: child content is &#x60;page&#x60;, &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;blogpost&#x60;: child content is &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;attachment&#x60;: child content is &#x60;comment&#x60; - &#x60;comment&#x60;: child content is &#x60;attachment&#x60;  Apps can override these default relationships. Apps can also introduce new content types that create new parent-child content relationships.  Note, the map will always include all child content types that are valid for the content. However, if the content has no instances of a child content type, the map will contain an empty array for that child content type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContentChildrenTest() throws Exception {
        String id = null;
        List<String> expand = null;
        Integer parentVersion = null;
        ContentChildren response = api.getContentChildren(id, expand, parentVersion);

        // TODO: test validations
    }
    /**
     * Get content children by type
     *
     * Deprecated, use [Confluence&#x27;s v2 API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).  Returns all children of a given type, for a piece of content. A piece of content has different types of child content, depending on its type:  - &#x60;page&#x60;: child content is &#x60;page&#x60;, &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;blogpost&#x60;: child content is &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;attachment&#x60;: child content is &#x60;comment&#x60; - &#x60;comment&#x60;: child content is &#x60;attachment&#x60;  Custom content types that are provided by apps can also be returned.  Note, this method only returns direct children. To return children at all levels, use [Get descendants by type](#api-content-id-descendant-type-get).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContentChildrenByTypeTest() throws Exception {
        String id = null;
        String type = null;
        List<String> expand = null;
        Integer parentVersion = null;
        Integer start = null;
        Integer limit = null;
        ContentArray response = api.getContentChildrenByType(id, type, expand, parentVersion, start, limit);

        // TODO: test validations
    }
    /**
     * Get content descendants
     *
     * Returns a map of the descendants of a piece of content. This is similar to [Get content children](#api-content-id-child-get), except that this method returns child pages at all levels, rather than just the direct child pages.  A piece of content has different types of descendants, depending on its type:  - &#x60;page&#x60;: descendant is &#x60;page&#x60;, &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;blogpost&#x60;: descendant is &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;attachment&#x60;: descendant is &#x60;comment&#x60; - &#x60;comment&#x60;: descendant is &#x60;attachment&#x60;  The map will always include all descendant types that are valid for the content. However, if the content has no instances of a descendant type, the map will contain an empty array for that descendant type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getContentDescendantsTest() throws Exception {
        String id = null;
        List<String> expand = null;
        ContentChildren response = api.getContentDescendants(id, expand);

        // TODO: test validations
    }
    /**
     * Get content descendants by type
     *
     * Returns all descendants of a given type, for a piece of content. This is similar to [Get content children by type](#api-content-id-child-type-get), except that this method returns child pages at all levels, rather than just the direct child pages.  A piece of content has different types of descendants, depending on its type:  - &#x60;page&#x60;: descendant is &#x60;page&#x60;, &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;blogpost&#x60;: descendant is &#x60;comment&#x60;, &#x60;attachment&#x60; - &#x60;attachment&#x60;: descendant is &#x60;comment&#x60; - &#x60;comment&#x60;: descendant is &#x60;attachment&#x60;  Custom content types that are provided by apps can also be returned.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: &#x27;View&#x27; permission for the space, and permission to view the content if it is a page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDescendantsOfTypeTest() throws Exception {
        String id = null;
        String type = null;
        String depth = null;
        List<String> expand = null;
        Integer start = null;
        Integer limit = null;
        ContentArray response = api.getDescendantsOfType(id, type, depth, expand, start, limit);

        // TODO: test validations
    }
    /**
     * Move a page to a new location relative to a target page
     *
     * Move a page to a new location relative to a target page:  * &#x60;before&#x60; - move the page under the same parent as the target, before the target in the list of children * &#x60;after&#x60; - move the page under the same parent as the target, after the target in the list of children * &#x60;append&#x60; - move the page to be a child of the target  Caution: This API can move pages to the top level of a space. Top-level pages are difficult to find in the UI because they do not show up in the page tree display. To avoid this, never use &#x60;before&#x60; or &#x60;after&#x60; positions when the &#x60;targetId&#x60; is a top-level page.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void movePageTest() throws Exception {
        String pageId = null;
        String position = null;
        String targetId = null;
        InlineResponse200 response = api.movePage(pageId, position, targetId);

        // TODO: test validations
    }
}
