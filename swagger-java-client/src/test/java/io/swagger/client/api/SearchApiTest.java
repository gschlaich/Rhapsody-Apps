/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.SearchPageResponseSearchResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SearchApi
 */
@Ignore
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    /**
     * Search content
     *
     * Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search&#x60; endpoint no longer support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25 &#x60;&#x60;&#x60;  Example response: &#x60;&#x60;&#x60; {   \&quot;results\&quot;: [     { ... },     { ... },     ...     { ... }   ],   \&quot;limit\&quot;: 25,   \&quot;size\&quot;: 25,   ...   \&quot;_links\&quot;: {     \&quot;base\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;context\&quot;: \&quot;&lt;url&gt;\&quot;,     \&quot;next\&quot;: \&quot;/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg\&quot;,     \&quot;self\&quot;: \&quot;&lt;url&gt;\&quot;   } } &#x60;&#x60;&#x60;  When additional results are available, returns &#x60;next&#x60; and &#x60;prev&#x60; URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use &#x60;limit&#x60; to specify the number of results returned in each call.  Example subsequent call (taken from example response): &#x60;&#x60;&#x60; /wiki/rest/api/search?cql&#x3D;type&#x3D;page&amp;limit&#x3D;25&amp;cursor&#x3D;raNDoMsTRiNg &#x60;&#x60;&#x60; The response to this will have a &#x60;prev&#x60; URL similar to the &#x60;next&#x60; in the example response.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchByCQLTest() throws Exception {
        String cql = null;
        String cqlcontext = null;
        String cursor = null;
        Boolean next = null;
        Boolean prev = null;
        Integer limit = null;
        Integer start = null;
        Boolean includeArchivedSpaces = null;
        Boolean excludeCurrentSpaces = null;
        String excerpt = null;
        String sitePermissionTypeFilter = null;
        Long u = null;
        List<String> expand = null;
        SearchPageResponseSearchResult response = api.searchByCQL(cql, cqlcontext, cursor, next, prev, limit, start, includeArchivedSpaces, excludeCurrentSpaces, excerpt, sitePermissionTypeFilter, u, expand);

        // TODO: test validations
    }
    /**
     * Search users
     *
     * Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the &#x60;/wiki/rest/api/search/user&#x60; endpoint only support user-specific fields like &#x60;user&#x60;, &#x60;user.fullname&#x60;, &#x60;user.accountid&#x60;, and &#x60;user.userkey&#x60;.  Note that some user fields may be set to null depending on the user&#x27;s privacy settings. These are: email, profilePicture, displayName, and timeZone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchUserTest() throws Exception {
        String cql = null;
        Integer start = null;
        Integer limit = null;
        List<String> expand = null;
        SearchPageResponseSearchResult response = api.searchUser(cql, start, limit, expand);

        // TODO: test validations
    }
}
