/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AsyncId;
import io.swagger.client.model.ContentBody;
import io.swagger.client.model.MacroInstance;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContentMacroBodyApi
 */
@Ignore
public class ContentMacroBodyApiTest {

    private final ContentMacroBodyApi api = new ContentMacroBodyApi();

    /**
     * Get macro body by macro ID and convert representation Asynchronously
     *
     * Returns Async Id of the conversion task which will convert the macro into a content body of the desired format. The result will be available for 5 minutes after completion of the conversion.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: &#x27;884bd9-0cb8-41d5-98be-f80943c14f96&#x27;. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAndAsyncConvertMacroBodyByMacroIdTest() throws Exception {
        String id = null;
        Integer version = null;
        String macroId = null;
        String to = null;
        List<String> expand = null;
        Boolean allowCache = null;
        String spaceKeyContext = null;
        String embeddedContentRender = null;
        AsyncId response = api.getAndAsyncConvertMacroBodyByMacroId(id, version, macroId, to, expand, allowCache, spaceKeyContext, embeddedContentRender);

        // TODO: test validations
    }
    /**
     * Get macro body by macro ID and convert the representation synchronously
     *
     * Returns the body of a macro in format specified in path, for the given macro ID. This includes information like the name of the macro, the body of the macro, and any macro parameters.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: &#x27;50884bd9-0cb8-41d5-98be-f80943c14f96&#x27;. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAndConvertMacroBodyByMacroIdTest() throws Exception {
        String id = null;
        Integer version = null;
        String macroId = null;
        String to = null;
        List<String> expand = null;
        String spaceKeyContext = null;
        String embeddedContentRender = null;
        ContentBody response = api.getAndConvertMacroBodyByMacroId(id, version, macroId, to, expand, spaceKeyContext, embeddedContentRender);

        // TODO: test validations
    }
    /**
     * Get macro body by macro ID
     *
     * Returns the body of a macro in storage format, for the given macro ID. This includes information like the name of the macro, the body of the macro, and any macro parameters. This method is mainly used by Cloud apps.  About the macro ID: When a macro is created in a new version of content, Confluence will generate a random ID for it, unless an ID is specified (by an app). The macro ID will look similar to this: &#x27;50884bd9-0cb8-41d5-98be-f80943c14f96&#x27;. The ID is then persisted as new versions of content are created, and is only modified by Confluence if there are conflicting IDs.  Note, to preserve backwards compatibility this resource will also match on the hash of the macro body, even if a macro ID is found. This check will eventually become redundant, as macro IDs are generated for pages and transparently propagate out to all instances.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content that the macro is in.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMacroBodyByMacroIdTest() throws Exception {
        String id = null;
        Integer version = null;
        String macroId = null;
        MacroInstance response = api.getMacroBodyByMacroId(id, version, macroId);

        // TODO: test validations
    }
}
