/*
 * The Confluence Cloud REST API
 * This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ConnectModules;
import io.swagger.client.model.DynamicModulesErrorMessage;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DynamicModulesApi
 */
@Ignore
public class DynamicModulesApiTest {

    private final DynamicModulesApi api = new DynamicModulesApi();

    /**
     * Get modules
     *
     * Returns all modules registered dynamically by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getModulesTest() throws Exception {
        ConnectModules response = api.getModules();

        // TODO: test validations
    }
    /**
     * Register modules
     *
     * Registers a list of modules. For the list of modules that support dynamic registration, see [Dynamic modules](https://developer.atlassian.com/cloud/confluence/dynamic-modules/).  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void registerModulesTest() throws Exception {
        ConnectModules body = null;
        api.registerModules(body);

        // TODO: test validations
    }
    /**
     * Remove modules
     *
     * Remove all or a list of modules registered by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeModulesTest() throws Exception {
        List<String> moduleKey = null;
        api.removeModules(moduleKey);

        // TODO: test validations
    }
}
